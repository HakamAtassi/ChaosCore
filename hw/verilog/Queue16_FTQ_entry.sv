// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue16_FTQ_entry(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
                io_enq_bits_valid,
  input  [31:0] io_enq_bits_fetch_PC,
  input         io_enq_bits_is_misprediction,
  input  [31:0] io_enq_bits_predicted_PC,
  input  [5:0]  io_enq_bits_ROB_index,
  input         io_enq_bits_T_NT,
  input  [2:0]  io_enq_bits_br_type,
  input  [1:0]  io_enq_bits_dominant_index,
  input  [31:0] io_enq_bits_resolved_PC,
  input         io_deq_ready,
  output        io_deq_valid,
                io_deq_bits_valid,
  output [31:0] io_deq_bits_fetch_PC,
  output        io_deq_bits_is_misprediction,
  output [31:0] io_deq_bits_predicted_PC,
  output [5:0]  io_deq_bits_ROB_index,
  output        io_deq_bits_T_NT,
  output [2:0]  io_deq_bits_br_type,
  output [1:0]  io_deq_bits_dominant_index,
  output [31:0] io_deq_bits_resolved_PC,
  input         io_flush
);

  wire [109:0] _ram_ext_R0_data;
  reg  [3:0]   enq_ptr_value;
  reg  [3:0]   deq_ptr_value;
  reg          maybe_full;
  wire         ptr_match = enq_ptr_value == deq_ptr_value;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  wire         do_deq = io_deq_ready & ~empty;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (io_flush) begin
        enq_ptr_value <= 4'h0;
        deq_ptr_value <= 4'h0;
      end
      else begin
        if (do_enq)
          enq_ptr_value <= enq_ptr_value + 4'h1;
        if (do_deq)
          deq_ptr_value <= deq_ptr_value + 4'h1;
      end
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_16x110 ram_ext (
    .R0_addr (do_deq ? ((&deq_ptr_value) ? 4'h0 : deq_ptr_value + 4'h1) : deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_resolved_PC,
        io_enq_bits_dominant_index,
        io_enq_bits_br_type,
        io_enq_bits_T_NT,
        io_enq_bits_ROB_index,
        io_enq_bits_predicted_PC,
        io_enq_bits_is_misprediction,
        io_enq_bits_fetch_PC,
        io_enq_bits_valid})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_valid = _ram_ext_R0_data[0];
  assign io_deq_bits_fetch_PC = _ram_ext_R0_data[32:1];
  assign io_deq_bits_is_misprediction = _ram_ext_R0_data[33];
  assign io_deq_bits_predicted_PC = _ram_ext_R0_data[65:34];
  assign io_deq_bits_ROB_index = _ram_ext_R0_data[71:66];
  assign io_deq_bits_T_NT = _ram_ext_R0_data[72];
  assign io_deq_bits_br_type = _ram_ext_R0_data[75:73];
  assign io_deq_bits_dominant_index = _ram_ext_R0_data[77:76];
  assign io_deq_bits_resolved_PC = _ram_ext_R0_data[109:78];
endmodule

