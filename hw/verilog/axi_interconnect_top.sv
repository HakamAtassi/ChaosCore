// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module axi_interconnect_top(
  input         clock,
                reset,
  output        io_m_AXI_port_0_AXI_AW_ready,
  input         io_m_AXI_port_0_AXI_AW_valid,
  input  [7:0]  io_m_AXI_port_0_AXI_AW_bits_awid,
  input  [31:0] io_m_AXI_port_0_AXI_AW_bits_awaddr,
  input  [7:0]  io_m_AXI_port_0_AXI_AW_bits_awlen,
  input  [2:0]  io_m_AXI_port_0_AXI_AW_bits_awsize,
  input  [1:0]  io_m_AXI_port_0_AXI_AW_bits_awburst,
  input         io_m_AXI_port_0_AXI_AW_bits_awlock,
  input  [3:0]  io_m_AXI_port_0_AXI_AW_bits_awcache,
  input  [2:0]  io_m_AXI_port_0_AXI_AW_bits_awprot,
  input  [3:0]  io_m_AXI_port_0_AXI_AW_bits_awqos,
                io_m_AXI_port_0_AXI_AW_bits_awregion,
  input         io_m_AXI_port_0_AXI_AW_bits_awuser,
  output        io_m_AXI_port_0_AXI_W_ready,
  input         io_m_AXI_port_0_AXI_W_valid,
  input  [31:0] io_m_AXI_port_0_AXI_W_bits_wdata,
  input  [3:0]  io_m_AXI_port_0_AXI_W_bits_wstrb,
  input         io_m_AXI_port_0_AXI_W_bits_wlast,
                io_m_AXI_port_0_AXI_W_bits_wuser,
                io_m_AXI_port_0_AXI_B_ready,
  output        io_m_AXI_port_0_AXI_B_valid,
  output [7:0]  io_m_AXI_port_0_AXI_B_bits_bid,
  output [1:0]  io_m_AXI_port_0_AXI_B_bits_bresp,
  output        io_m_AXI_port_0_AXI_B_bits_buser,
                io_m_AXI_port_0_AXI_AR_ready,
  input         io_m_AXI_port_0_AXI_AR_valid,
  input  [7:0]  io_m_AXI_port_0_AXI_AR_bits_arid,
  input  [31:0] io_m_AXI_port_0_AXI_AR_bits_araddr,
  input  [7:0]  io_m_AXI_port_0_AXI_AR_bits_arlen,
  input  [2:0]  io_m_AXI_port_0_AXI_AR_bits_arsize,
  input  [1:0]  io_m_AXI_port_0_AXI_AR_bits_arburst,
  input         io_m_AXI_port_0_AXI_AR_bits_arlock,
  input  [3:0]  io_m_AXI_port_0_AXI_AR_bits_arcache,
  input  [2:0]  io_m_AXI_port_0_AXI_AR_bits_arprot,
  input  [3:0]  io_m_AXI_port_0_AXI_AR_bits_arqos,
                io_m_AXI_port_0_AXI_AR_bits_arregion,
  input         io_m_AXI_port_0_AXI_AR_bits_aruser,
                io_m_AXI_port_0_AXI_R_ready,
  output        io_m_AXI_port_0_AXI_R_valid,
  output [7:0]  io_m_AXI_port_0_AXI_R_bits_rid,
  output [31:0] io_m_AXI_port_0_AXI_R_bits_rdata,
  output [1:0]  io_m_AXI_port_0_AXI_R_bits_rresp,
  output        io_m_AXI_port_0_AXI_R_bits_rlast,
                io_m_AXI_port_0_AXI_R_bits_ruser,
                io_m_AXI_port_1_AXI_AW_ready,
  input         io_m_AXI_port_1_AXI_AW_valid,
  input  [7:0]  io_m_AXI_port_1_AXI_AW_bits_awid,
  input  [31:0] io_m_AXI_port_1_AXI_AW_bits_awaddr,
  input  [7:0]  io_m_AXI_port_1_AXI_AW_bits_awlen,
  input  [2:0]  io_m_AXI_port_1_AXI_AW_bits_awsize,
  input  [1:0]  io_m_AXI_port_1_AXI_AW_bits_awburst,
  input         io_m_AXI_port_1_AXI_AW_bits_awlock,
  input  [3:0]  io_m_AXI_port_1_AXI_AW_bits_awcache,
  input  [2:0]  io_m_AXI_port_1_AXI_AW_bits_awprot,
  input  [3:0]  io_m_AXI_port_1_AXI_AW_bits_awqos,
                io_m_AXI_port_1_AXI_AW_bits_awregion,
  input         io_m_AXI_port_1_AXI_AW_bits_awuser,
  output        io_m_AXI_port_1_AXI_W_ready,
  input         io_m_AXI_port_1_AXI_W_valid,
  input  [31:0] io_m_AXI_port_1_AXI_W_bits_wdata,
  input  [3:0]  io_m_AXI_port_1_AXI_W_bits_wstrb,
  input         io_m_AXI_port_1_AXI_W_bits_wlast,
                io_m_AXI_port_1_AXI_W_bits_wuser,
                io_m_AXI_port_1_AXI_B_ready,
  output        io_m_AXI_port_1_AXI_B_valid,
  output [7:0]  io_m_AXI_port_1_AXI_B_bits_bid,
  output [1:0]  io_m_AXI_port_1_AXI_B_bits_bresp,
  output        io_m_AXI_port_1_AXI_B_bits_buser,
                io_m_AXI_port_1_AXI_AR_ready,
  input         io_m_AXI_port_1_AXI_AR_valid,
  input  [7:0]  io_m_AXI_port_1_AXI_AR_bits_arid,
  input  [31:0] io_m_AXI_port_1_AXI_AR_bits_araddr,
  input  [7:0]  io_m_AXI_port_1_AXI_AR_bits_arlen,
  input  [2:0]  io_m_AXI_port_1_AXI_AR_bits_arsize,
  input  [1:0]  io_m_AXI_port_1_AXI_AR_bits_arburst,
  input         io_m_AXI_port_1_AXI_AR_bits_arlock,
  input  [3:0]  io_m_AXI_port_1_AXI_AR_bits_arcache,
  input  [2:0]  io_m_AXI_port_1_AXI_AR_bits_arprot,
  input  [3:0]  io_m_AXI_port_1_AXI_AR_bits_arqos,
                io_m_AXI_port_1_AXI_AR_bits_arregion,
  input         io_m_AXI_port_1_AXI_AR_bits_aruser,
                io_m_AXI_port_1_AXI_R_ready,
  output        io_m_AXI_port_1_AXI_R_valid,
  output [7:0]  io_m_AXI_port_1_AXI_R_bits_rid,
  output [31:0] io_m_AXI_port_1_AXI_R_bits_rdata,
  output [1:0]  io_m_AXI_port_1_AXI_R_bits_rresp,
  output        io_m_AXI_port_1_AXI_R_bits_rlast,
                io_m_AXI_port_1_AXI_R_bits_ruser,
  input         io_s_AXI_port_0_AXI_AW_ready,
  output        io_s_AXI_port_0_AXI_AW_valid,
  output [7:0]  io_s_AXI_port_0_AXI_AW_bits_awid,
  output [31:0] io_s_AXI_port_0_AXI_AW_bits_awaddr,
  output [7:0]  io_s_AXI_port_0_AXI_AW_bits_awlen,
  output [2:0]  io_s_AXI_port_0_AXI_AW_bits_awsize,
  output [1:0]  io_s_AXI_port_0_AXI_AW_bits_awburst,
  output        io_s_AXI_port_0_AXI_AW_bits_awlock,
  output [3:0]  io_s_AXI_port_0_AXI_AW_bits_awcache,
  output [2:0]  io_s_AXI_port_0_AXI_AW_bits_awprot,
  output [3:0]  io_s_AXI_port_0_AXI_AW_bits_awqos,
                io_s_AXI_port_0_AXI_AW_bits_awregion,
  output        io_s_AXI_port_0_AXI_AW_bits_awuser,
  input         io_s_AXI_port_0_AXI_W_ready,
  output        io_s_AXI_port_0_AXI_W_valid,
  output [31:0] io_s_AXI_port_0_AXI_W_bits_wdata,
  output [3:0]  io_s_AXI_port_0_AXI_W_bits_wstrb,
  output        io_s_AXI_port_0_AXI_W_bits_wlast,
                io_s_AXI_port_0_AXI_W_bits_wuser,
                io_s_AXI_port_0_AXI_B_ready,
  input         io_s_AXI_port_0_AXI_B_valid,
  input  [7:0]  io_s_AXI_port_0_AXI_B_bits_bid,
  input  [1:0]  io_s_AXI_port_0_AXI_B_bits_bresp,
  input         io_s_AXI_port_0_AXI_B_bits_buser,
                io_s_AXI_port_0_AXI_AR_ready,
  output        io_s_AXI_port_0_AXI_AR_valid,
  output [7:0]  io_s_AXI_port_0_AXI_AR_bits_arid,
  output [31:0] io_s_AXI_port_0_AXI_AR_bits_araddr,
  output [7:0]  io_s_AXI_port_0_AXI_AR_bits_arlen,
  output [2:0]  io_s_AXI_port_0_AXI_AR_bits_arsize,
  output [1:0]  io_s_AXI_port_0_AXI_AR_bits_arburst,
  output        io_s_AXI_port_0_AXI_AR_bits_arlock,
  output [3:0]  io_s_AXI_port_0_AXI_AR_bits_arcache,
  output [2:0]  io_s_AXI_port_0_AXI_AR_bits_arprot,
  output [3:0]  io_s_AXI_port_0_AXI_AR_bits_arqos,
                io_s_AXI_port_0_AXI_AR_bits_arregion,
  output        io_s_AXI_port_0_AXI_AR_bits_aruser,
                io_s_AXI_port_0_AXI_R_ready,
  input         io_s_AXI_port_0_AXI_R_valid,
  input  [7:0]  io_s_AXI_port_0_AXI_R_bits_rid,
  input  [31:0] io_s_AXI_port_0_AXI_R_bits_rdata,
  input  [1:0]  io_s_AXI_port_0_AXI_R_bits_rresp,
  input         io_s_AXI_port_0_AXI_R_bits_rlast,
                io_s_AXI_port_0_AXI_R_bits_ruser,
                io_s_AXI_port_1_AXI_AW_ready,
  output        io_s_AXI_port_1_AXI_AW_valid,
  output [7:0]  io_s_AXI_port_1_AXI_AW_bits_awid,
  output [31:0] io_s_AXI_port_1_AXI_AW_bits_awaddr,
  output [7:0]  io_s_AXI_port_1_AXI_AW_bits_awlen,
  output [2:0]  io_s_AXI_port_1_AXI_AW_bits_awsize,
  output [1:0]  io_s_AXI_port_1_AXI_AW_bits_awburst,
  output        io_s_AXI_port_1_AXI_AW_bits_awlock,
  output [3:0]  io_s_AXI_port_1_AXI_AW_bits_awcache,
  output [2:0]  io_s_AXI_port_1_AXI_AW_bits_awprot,
  output [3:0]  io_s_AXI_port_1_AXI_AW_bits_awqos,
                io_s_AXI_port_1_AXI_AW_bits_awregion,
  output        io_s_AXI_port_1_AXI_AW_bits_awuser,
  input         io_s_AXI_port_1_AXI_W_ready,
  output        io_s_AXI_port_1_AXI_W_valid,
  output [31:0] io_s_AXI_port_1_AXI_W_bits_wdata,
  output [3:0]  io_s_AXI_port_1_AXI_W_bits_wstrb,
  output        io_s_AXI_port_1_AXI_W_bits_wlast,
                io_s_AXI_port_1_AXI_W_bits_wuser,
                io_s_AXI_port_1_AXI_B_ready,
  input         io_s_AXI_port_1_AXI_B_valid,
  input  [7:0]  io_s_AXI_port_1_AXI_B_bits_bid,
  input  [1:0]  io_s_AXI_port_1_AXI_B_bits_bresp,
  input         io_s_AXI_port_1_AXI_B_bits_buser,
                io_s_AXI_port_1_AXI_AR_ready,
  output        io_s_AXI_port_1_AXI_AR_valid,
  output [7:0]  io_s_AXI_port_1_AXI_AR_bits_arid,
  output [31:0] io_s_AXI_port_1_AXI_AR_bits_araddr,
  output [7:0]  io_s_AXI_port_1_AXI_AR_bits_arlen,
  output [2:0]  io_s_AXI_port_1_AXI_AR_bits_arsize,
  output [1:0]  io_s_AXI_port_1_AXI_AR_bits_arburst,
  output        io_s_AXI_port_1_AXI_AR_bits_arlock,
  output [3:0]  io_s_AXI_port_1_AXI_AR_bits_arcache,
  output [2:0]  io_s_AXI_port_1_AXI_AR_bits_arprot,
  output [3:0]  io_s_AXI_port_1_AXI_AR_bits_arqos,
                io_s_AXI_port_1_AXI_AR_bits_arregion,
  output        io_s_AXI_port_1_AXI_AR_bits_aruser,
                io_s_AXI_port_1_AXI_R_ready,
  input         io_s_AXI_port_1_AXI_R_valid,
  input  [7:0]  io_s_AXI_port_1_AXI_R_bits_rid,
  input  [31:0] io_s_AXI_port_1_AXI_R_bits_rdata,
  input  [1:0]  io_s_AXI_port_1_AXI_R_bits_rresp,
  input         io_s_AXI_port_1_AXI_R_bits_rlast,
                io_s_AXI_port_1_AXI_R_bits_ruser
);

  wire [1:0]  _NOC_s_axi_awready;
  wire [1:0]  _NOC_s_axi_wready;
  wire [15:0] _NOC_s_axi_bid;
  wire [3:0]  _NOC_s_axi_bresp;
  wire [1:0]  _NOC_s_axi_buser;
  wire [1:0]  _NOC_s_axi_bvalid;
  wire [1:0]  _NOC_s_axi_arready;
  wire [15:0] _NOC_s_axi_rid;
  wire [63:0] _NOC_s_axi_rdata;
  wire [3:0]  _NOC_s_axi_rresp;
  wire [1:0]  _NOC_s_axi_rlast;
  wire [1:0]  _NOC_s_axi_ruser;
  wire [1:0]  _NOC_s_axi_rvalid;
  wire [15:0] _NOC_m_axi_awid;
  wire [63:0] _NOC_m_axi_awaddr;
  wire [15:0] _NOC_m_axi_awlen;
  wire [5:0]  _NOC_m_axi_awsize;
  wire [3:0]  _NOC_m_axi_awburst;
  wire [1:0]  _NOC_m_axi_awlock;
  wire [7:0]  _NOC_m_axi_awcache;
  wire [5:0]  _NOC_m_axi_awprot;
  wire [7:0]  _NOC_m_axi_awqos;
  wire [7:0]  _NOC_m_axi_awregion;
  wire [1:0]  _NOC_m_axi_awuser;
  wire [1:0]  _NOC_m_axi_awvalid;
  wire [63:0] _NOC_m_axi_wdata;
  wire [7:0]  _NOC_m_axi_wstrb;
  wire [1:0]  _NOC_m_axi_wlast;
  wire [1:0]  _NOC_m_axi_wuser;
  wire [1:0]  _NOC_m_axi_wvalid;
  wire [1:0]  _NOC_m_axi_bready;
  wire [15:0] _NOC_m_axi_arid;
  wire [63:0] _NOC_m_axi_araddr;
  wire [15:0] _NOC_m_axi_arlen;
  wire [5:0]  _NOC_m_axi_arsize;
  wire [3:0]  _NOC_m_axi_arburst;
  wire [1:0]  _NOC_m_axi_arlock;
  wire [7:0]  _NOC_m_axi_arcache;
  wire [5:0]  _NOC_m_axi_arprot;
  wire [7:0]  _NOC_m_axi_arqos;
  wire [7:0]  _NOC_m_axi_arregion;
  wire [1:0]  _NOC_m_axi_aruser;
  wire [1:0]  _NOC_m_axi_arvalid;
  wire [1:0]  _NOC_m_axi_rready;
  axi_interconnect #(
    .ADDR_WIDTH(32),
    .ARUSER_ENABLE(0),
    .ARUSER_WIDTH(1),
    .AWUSER_ENABLE(0),
    .AWUSER_WIDTH(1),
    .BUSER_ENABLE(0),
    .BUSER_WIDTH(1),
    .DATA_WIDTH(32),
    .FORWARD_ID(1),
    .ID_WIDTH(8),
    .M_ADDR_WIDTH(80'd18446744125249159196),
    .M_BASE_ADDR(80'd18448995875670720512),
    .M_CONNECT_READ(255),
    .M_CONNECT_WRITE(255),
    .M_COUNT(2),
    .M_REGIONS(1),
    .M_SECURE(0),
    .RUSER_ENABLE(0),
    .RUSER_WIDTH(1),
    .STRB_WIDTH(4),
    .S_COUNT(2),
    .WUSER_ENABLE(0),
    .WUSER_WIDTH(1)
  ) NOC (
    .clk            (clock),
    .rst            (reset),
    .s_axi_awid
      ({io_m_AXI_port_1_AXI_AW_bits_awid, io_m_AXI_port_0_AXI_AW_bits_awid}),
    .s_axi_awaddr
      ({io_m_AXI_port_1_AXI_AW_bits_awaddr, io_m_AXI_port_0_AXI_AW_bits_awaddr}),
    .s_axi_awlen
      ({io_m_AXI_port_1_AXI_AW_bits_awlen, io_m_AXI_port_0_AXI_AW_bits_awlen}),
    .s_axi_awsize
      ({io_m_AXI_port_1_AXI_AW_bits_awsize, io_m_AXI_port_0_AXI_AW_bits_awsize}),
    .s_axi_awburst
      ({io_m_AXI_port_1_AXI_AW_bits_awburst, io_m_AXI_port_0_AXI_AW_bits_awburst}),
    .s_axi_awlock
      ({io_m_AXI_port_1_AXI_AW_bits_awlock, io_m_AXI_port_0_AXI_AW_bits_awlock}),
    .s_axi_awcache
      ({io_m_AXI_port_1_AXI_AW_bits_awcache, io_m_AXI_port_0_AXI_AW_bits_awcache}),
    .s_axi_awprot
      ({io_m_AXI_port_1_AXI_AW_bits_awprot, io_m_AXI_port_0_AXI_AW_bits_awprot}),
    .s_axi_awqos
      ({io_m_AXI_port_1_AXI_AW_bits_awqos, io_m_AXI_port_0_AXI_AW_bits_awqos}),
    .s_axi_awuser
      ({io_m_AXI_port_1_AXI_AW_bits_awuser, io_m_AXI_port_0_AXI_AW_bits_awuser}),
    .s_axi_awvalid  ({io_m_AXI_port_1_AXI_AW_valid, io_m_AXI_port_0_AXI_AW_valid}),
    .s_axi_awready  (_NOC_s_axi_awready),
    .s_axi_wdata
      ({io_m_AXI_port_1_AXI_W_bits_wdata, io_m_AXI_port_0_AXI_W_bits_wdata}),
    .s_axi_wstrb
      ({io_m_AXI_port_1_AXI_W_bits_wstrb, io_m_AXI_port_0_AXI_W_bits_wstrb}),
    .s_axi_wlast
      ({io_m_AXI_port_1_AXI_W_bits_wlast, io_m_AXI_port_0_AXI_W_bits_wlast}),
    .s_axi_wuser
      ({io_m_AXI_port_1_AXI_W_bits_wuser, io_m_AXI_port_0_AXI_W_bits_wuser}),
    .s_axi_wvalid   ({io_m_AXI_port_1_AXI_W_valid, io_m_AXI_port_0_AXI_W_valid}),
    .s_axi_wready   (_NOC_s_axi_wready),
    .s_axi_bid      (_NOC_s_axi_bid),
    .s_axi_bresp    (_NOC_s_axi_bresp),
    .s_axi_buser    (_NOC_s_axi_buser),
    .s_axi_bvalid   (_NOC_s_axi_bvalid),
    .s_axi_bready   ({io_m_AXI_port_1_AXI_B_ready, io_m_AXI_port_0_AXI_B_ready}),
    .s_axi_arid
      ({io_m_AXI_port_1_AXI_AR_bits_arid, io_m_AXI_port_0_AXI_AR_bits_arid}),
    .s_axi_araddr
      ({io_m_AXI_port_1_AXI_AR_bits_araddr, io_m_AXI_port_0_AXI_AR_bits_araddr}),
    .s_axi_arlen
      ({io_m_AXI_port_1_AXI_AR_bits_arlen, io_m_AXI_port_0_AXI_AR_bits_arlen}),
    .s_axi_arsize
      ({io_m_AXI_port_1_AXI_AR_bits_arsize, io_m_AXI_port_0_AXI_AR_bits_arsize}),
    .s_axi_arburst
      ({io_m_AXI_port_1_AXI_AR_bits_arburst, io_m_AXI_port_0_AXI_AR_bits_arburst}),
    .s_axi_arlock
      ({io_m_AXI_port_1_AXI_AR_bits_arlock, io_m_AXI_port_0_AXI_AR_bits_arlock}),
    .s_axi_arcache
      ({io_m_AXI_port_1_AXI_AR_bits_arcache, io_m_AXI_port_0_AXI_AR_bits_arcache}),
    .s_axi_arprot
      ({io_m_AXI_port_1_AXI_AR_bits_arprot, io_m_AXI_port_0_AXI_AR_bits_arprot}),
    .s_axi_arqos
      ({io_m_AXI_port_1_AXI_AR_bits_arqos, io_m_AXI_port_0_AXI_AR_bits_arqos}),
    .s_axi_aruser
      ({io_m_AXI_port_1_AXI_AR_bits_aruser, io_m_AXI_port_0_AXI_AR_bits_aruser}),
    .s_axi_arvalid  ({io_m_AXI_port_1_AXI_AR_valid, io_m_AXI_port_0_AXI_AR_valid}),
    .s_axi_arready  (_NOC_s_axi_arready),
    .s_axi_rid      (_NOC_s_axi_rid),
    .s_axi_rdata    (_NOC_s_axi_rdata),
    .s_axi_rresp    (_NOC_s_axi_rresp),
    .s_axi_rlast    (_NOC_s_axi_rlast),
    .s_axi_ruser    (_NOC_s_axi_ruser),
    .s_axi_rvalid   (_NOC_s_axi_rvalid),
    .s_axi_rready   ({io_m_AXI_port_1_AXI_R_ready, io_m_AXI_port_0_AXI_R_ready}),
    .m_axi_awid     (_NOC_m_axi_awid),
    .m_axi_awaddr   (_NOC_m_axi_awaddr),
    .m_axi_awlen    (_NOC_m_axi_awlen),
    .m_axi_awsize   (_NOC_m_axi_awsize),
    .m_axi_awburst  (_NOC_m_axi_awburst),
    .m_axi_awlock   (_NOC_m_axi_awlock),
    .m_axi_awcache  (_NOC_m_axi_awcache),
    .m_axi_awprot   (_NOC_m_axi_awprot),
    .m_axi_awqos    (_NOC_m_axi_awqos),
    .m_axi_awregion (_NOC_m_axi_awregion),
    .m_axi_awuser   (_NOC_m_axi_awuser),
    .m_axi_awvalid  (_NOC_m_axi_awvalid),
    .m_axi_awready  ({io_s_AXI_port_1_AXI_AW_ready, io_s_AXI_port_0_AXI_AW_ready}),
    .m_axi_wdata    (_NOC_m_axi_wdata),
    .m_axi_wstrb    (_NOC_m_axi_wstrb),
    .m_axi_wlast    (_NOC_m_axi_wlast),
    .m_axi_wuser    (_NOC_m_axi_wuser),
    .m_axi_wvalid   (_NOC_m_axi_wvalid),
    .m_axi_wready   ({io_s_AXI_port_1_AXI_W_ready, io_s_AXI_port_0_AXI_W_ready}),
    .m_axi_bid      ({io_s_AXI_port_1_AXI_B_bits_bid, io_s_AXI_port_0_AXI_B_bits_bid}),
    .m_axi_bresp
      ({io_s_AXI_port_1_AXI_B_bits_bresp, io_s_AXI_port_0_AXI_B_bits_bresp}),
    .m_axi_buser
      ({io_s_AXI_port_1_AXI_B_bits_buser, io_s_AXI_port_0_AXI_B_bits_buser}),
    .m_axi_bvalid   ({io_s_AXI_port_1_AXI_B_valid, io_s_AXI_port_0_AXI_B_valid}),
    .m_axi_bready   (_NOC_m_axi_bready),
    .m_axi_arid     (_NOC_m_axi_arid),
    .m_axi_araddr   (_NOC_m_axi_araddr),
    .m_axi_arlen    (_NOC_m_axi_arlen),
    .m_axi_arsize   (_NOC_m_axi_arsize),
    .m_axi_arburst  (_NOC_m_axi_arburst),
    .m_axi_arlock   (_NOC_m_axi_arlock),
    .m_axi_arcache  (_NOC_m_axi_arcache),
    .m_axi_arprot   (_NOC_m_axi_arprot),
    .m_axi_arqos    (_NOC_m_axi_arqos),
    .m_axi_arregion (_NOC_m_axi_arregion),
    .m_axi_aruser   (_NOC_m_axi_aruser),
    .m_axi_arvalid  (_NOC_m_axi_arvalid),
    .m_axi_arready  ({io_s_AXI_port_1_AXI_AR_ready, io_s_AXI_port_0_AXI_AR_ready}),
    .m_axi_rid      ({io_s_AXI_port_1_AXI_R_bits_rid, io_s_AXI_port_0_AXI_R_bits_rid}),
    .m_axi_rdata
      ({io_s_AXI_port_1_AXI_R_bits_rdata, io_s_AXI_port_0_AXI_R_bits_rdata}),
    .m_axi_rresp
      ({io_s_AXI_port_1_AXI_R_bits_rresp, io_s_AXI_port_0_AXI_R_bits_rresp}),
    .m_axi_rlast
      ({io_s_AXI_port_1_AXI_R_bits_rlast, io_s_AXI_port_0_AXI_R_bits_rlast}),
    .m_axi_ruser
      ({io_s_AXI_port_1_AXI_R_bits_ruser, io_s_AXI_port_0_AXI_R_bits_ruser}),
    .m_axi_rvalid   ({io_s_AXI_port_1_AXI_R_valid, io_s_AXI_port_0_AXI_R_valid}),
    .m_axi_rready   (_NOC_m_axi_rready)
  );
  assign io_m_AXI_port_0_AXI_AW_ready = _NOC_s_axi_awready[0];
  assign io_m_AXI_port_0_AXI_W_ready = _NOC_s_axi_wready[0];
  assign io_m_AXI_port_0_AXI_B_valid = _NOC_s_axi_bvalid[0];
  assign io_m_AXI_port_0_AXI_B_bits_bid = _NOC_s_axi_bid[7:0];
  assign io_m_AXI_port_0_AXI_B_bits_bresp = _NOC_s_axi_bresp[1:0];
  assign io_m_AXI_port_0_AXI_B_bits_buser = _NOC_s_axi_buser[0];
  assign io_m_AXI_port_0_AXI_AR_ready = _NOC_s_axi_arready[0];
  assign io_m_AXI_port_0_AXI_R_valid = _NOC_s_axi_rvalid[0];
  assign io_m_AXI_port_0_AXI_R_bits_rid = _NOC_s_axi_rid[7:0];
  assign io_m_AXI_port_0_AXI_R_bits_rdata = _NOC_s_axi_rdata[31:0];
  assign io_m_AXI_port_0_AXI_R_bits_rresp = _NOC_s_axi_rresp[1:0];
  assign io_m_AXI_port_0_AXI_R_bits_rlast = _NOC_s_axi_rlast[0];
  assign io_m_AXI_port_0_AXI_R_bits_ruser = _NOC_s_axi_ruser[0];
  assign io_m_AXI_port_1_AXI_AW_ready = _NOC_s_axi_awready[1];
  assign io_m_AXI_port_1_AXI_W_ready = _NOC_s_axi_wready[1];
  assign io_m_AXI_port_1_AXI_B_valid = _NOC_s_axi_bvalid[1];
  assign io_m_AXI_port_1_AXI_B_bits_bid = _NOC_s_axi_bid[15:8];
  assign io_m_AXI_port_1_AXI_B_bits_bresp = _NOC_s_axi_bresp[3:2];
  assign io_m_AXI_port_1_AXI_B_bits_buser = _NOC_s_axi_buser[1];
  assign io_m_AXI_port_1_AXI_AR_ready = _NOC_s_axi_arready[1];
  assign io_m_AXI_port_1_AXI_R_valid = _NOC_s_axi_rvalid[1];
  assign io_m_AXI_port_1_AXI_R_bits_rid = _NOC_s_axi_rid[15:8];
  assign io_m_AXI_port_1_AXI_R_bits_rdata = _NOC_s_axi_rdata[63:32];
  assign io_m_AXI_port_1_AXI_R_bits_rresp = _NOC_s_axi_rresp[3:2];
  assign io_m_AXI_port_1_AXI_R_bits_rlast = _NOC_s_axi_rlast[1];
  assign io_m_AXI_port_1_AXI_R_bits_ruser = _NOC_s_axi_ruser[1];
  assign io_s_AXI_port_0_AXI_AW_valid = _NOC_m_axi_awvalid[0];
  assign io_s_AXI_port_0_AXI_AW_bits_awid = _NOC_m_axi_awid[7:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awaddr = _NOC_m_axi_awaddr[31:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awlen = _NOC_m_axi_awlen[7:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awsize = _NOC_m_axi_awsize[2:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awburst = _NOC_m_axi_awburst[1:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awlock = _NOC_m_axi_awlock[0];
  assign io_s_AXI_port_0_AXI_AW_bits_awcache = _NOC_m_axi_awcache[3:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awprot = _NOC_m_axi_awprot[2:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awqos = _NOC_m_axi_awqos[3:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awregion = _NOC_m_axi_awregion[3:0];
  assign io_s_AXI_port_0_AXI_AW_bits_awuser = _NOC_m_axi_awuser[0];
  assign io_s_AXI_port_0_AXI_W_valid = _NOC_m_axi_wvalid[0];
  assign io_s_AXI_port_0_AXI_W_bits_wdata = _NOC_m_axi_wdata[31:0];
  assign io_s_AXI_port_0_AXI_W_bits_wstrb = _NOC_m_axi_wstrb[3:0];
  assign io_s_AXI_port_0_AXI_W_bits_wlast = _NOC_m_axi_wlast[0];
  assign io_s_AXI_port_0_AXI_W_bits_wuser = _NOC_m_axi_wuser[0];
  assign io_s_AXI_port_0_AXI_B_ready = _NOC_m_axi_bready[0];
  assign io_s_AXI_port_0_AXI_AR_valid = _NOC_m_axi_arvalid[0];
  assign io_s_AXI_port_0_AXI_AR_bits_arid = _NOC_m_axi_arid[7:0];
  assign io_s_AXI_port_0_AXI_AR_bits_araddr = _NOC_m_axi_araddr[31:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arlen = _NOC_m_axi_arlen[7:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arsize = _NOC_m_axi_arsize[2:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arburst = _NOC_m_axi_arburst[1:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arlock = _NOC_m_axi_arlock[0];
  assign io_s_AXI_port_0_AXI_AR_bits_arcache = _NOC_m_axi_arcache[3:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arprot = _NOC_m_axi_arprot[2:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arqos = _NOC_m_axi_arqos[3:0];
  assign io_s_AXI_port_0_AXI_AR_bits_arregion = _NOC_m_axi_arregion[3:0];
  assign io_s_AXI_port_0_AXI_AR_bits_aruser = _NOC_m_axi_aruser[0];
  assign io_s_AXI_port_0_AXI_R_ready = _NOC_m_axi_rready[0];
  assign io_s_AXI_port_1_AXI_AW_valid = _NOC_m_axi_awvalid[1];
  assign io_s_AXI_port_1_AXI_AW_bits_awid = _NOC_m_axi_awid[15:8];
  assign io_s_AXI_port_1_AXI_AW_bits_awaddr = _NOC_m_axi_awaddr[63:32];
  assign io_s_AXI_port_1_AXI_AW_bits_awlen = _NOC_m_axi_awlen[15:8];
  assign io_s_AXI_port_1_AXI_AW_bits_awsize = _NOC_m_axi_awsize[5:3];
  assign io_s_AXI_port_1_AXI_AW_bits_awburst = _NOC_m_axi_awburst[3:2];
  assign io_s_AXI_port_1_AXI_AW_bits_awlock = _NOC_m_axi_awlock[1];
  assign io_s_AXI_port_1_AXI_AW_bits_awcache = _NOC_m_axi_awcache[7:4];
  assign io_s_AXI_port_1_AXI_AW_bits_awprot = _NOC_m_axi_awprot[5:3];
  assign io_s_AXI_port_1_AXI_AW_bits_awqos = _NOC_m_axi_awqos[7:4];
  assign io_s_AXI_port_1_AXI_AW_bits_awregion = _NOC_m_axi_awregion[7:4];
  assign io_s_AXI_port_1_AXI_AW_bits_awuser = _NOC_m_axi_awuser[1];
  assign io_s_AXI_port_1_AXI_W_valid = _NOC_m_axi_wvalid[1];
  assign io_s_AXI_port_1_AXI_W_bits_wdata = _NOC_m_axi_wdata[63:32];
  assign io_s_AXI_port_1_AXI_W_bits_wstrb = _NOC_m_axi_wstrb[7:4];
  assign io_s_AXI_port_1_AXI_W_bits_wlast = _NOC_m_axi_wlast[1];
  assign io_s_AXI_port_1_AXI_W_bits_wuser = _NOC_m_axi_wuser[1];
  assign io_s_AXI_port_1_AXI_B_ready = _NOC_m_axi_bready[1];
  assign io_s_AXI_port_1_AXI_AR_valid = _NOC_m_axi_arvalid[1];
  assign io_s_AXI_port_1_AXI_AR_bits_arid = _NOC_m_axi_arid[15:8];
  assign io_s_AXI_port_1_AXI_AR_bits_araddr = _NOC_m_axi_araddr[63:32];
  assign io_s_AXI_port_1_AXI_AR_bits_arlen = _NOC_m_axi_arlen[15:8];
  assign io_s_AXI_port_1_AXI_AR_bits_arsize = _NOC_m_axi_arsize[5:3];
  assign io_s_AXI_port_1_AXI_AR_bits_arburst = _NOC_m_axi_arburst[3:2];
  assign io_s_AXI_port_1_AXI_AR_bits_arlock = _NOC_m_axi_arlock[1];
  assign io_s_AXI_port_1_AXI_AR_bits_arcache = _NOC_m_axi_arcache[7:4];
  assign io_s_AXI_port_1_AXI_AR_bits_arprot = _NOC_m_axi_arprot[5:3];
  assign io_s_AXI_port_1_AXI_AR_bits_arqos = _NOC_m_axi_arqos[7:4];
  assign io_s_AXI_port_1_AXI_AR_bits_arregion = _NOC_m_axi_arregion[7:4];
  assign io_s_AXI_port_1_AXI_AR_bits_aruser = _NOC_m_axi_aruser[1];
  assign io_s_AXI_port_1_AXI_R_ready = _NOC_m_axi_rready[1];
endmodule

