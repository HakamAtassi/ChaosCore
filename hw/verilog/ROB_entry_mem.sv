// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ROB_entry_mem(
  input                                                                                                                             clock,
  input  [5:0]                                                                                                                      io_addrA,
  input  struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; } io_writeDataA,
  input                                                                                                                             io_writeEnableA,
  input  [5:0]                                                                                                                      io_addrB,
  output struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; } io_readDataB
);

  wire [4:0]  _GEN;
  wire        _GEN_0;
  wire [6:0]  _GEN_1;
  wire [1:0]  _GEN_2;
  wire        _GEN_3;
  wire        _GEN_4;
  wire        _GEN_5;
  wire        _GEN_6;
  wire        _GEN_7;
  wire        _GEN_8;
  wire        _GEN_9;
  wire        _GEN_10;
  wire [16:0] _mem_ext_R0_data;
  wire
    struct packed {logic valid; logic is_branch; logic memory_type; logic RD; logic RD_valid; logic RDold; }
    _GEN_11 = /*cast(bit)*/6'h0;
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    _GEN_12 = /*cast(bit)*/17'h0;
  assign _GEN_10 = io_writeEnableA | _GEN_11.valid;
  assign _GEN_9 = io_writeEnableA | _GEN_11.is_branch;
  assign _GEN_8 = io_writeEnableA | _GEN_11.memory_type;
  assign _GEN_7 = io_writeEnableA | _GEN_11.RD;
  assign _GEN_6 = io_writeEnableA | _GEN_11.RD_valid;
  assign _GEN_5 = io_writeEnableA | _GEN_11.RDold;
  assign _GEN_4 = io_writeEnableA ? io_writeDataA.valid : _GEN_12.valid;
  assign _GEN_3 = io_writeEnableA ? io_writeDataA.is_branch : _GEN_12.is_branch;
  assign _GEN_2 = io_writeEnableA ? io_writeDataA.memory_type : _GEN_12.memory_type;
  assign _GEN_1 = io_writeEnableA ? io_writeDataA.RD : _GEN_12.RD;
  assign _GEN_0 = io_writeEnableA ? io_writeDataA.RD_valid : _GEN_12.RD_valid;
  assign _GEN = io_writeEnableA ? io_writeDataA.RDold : _GEN_12.RDold;
  mem_64x17 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addrA),
    .W0_en   (io_writeEnableA),
    .W0_clk  (clock),
    .W0_data ({_GEN, _GEN_0, _GEN_1, _GEN_2, _GEN_3, _GEN_4}),
    .W0_mask ({{5{_GEN_5}}, _GEN_6, {7{_GEN_7}}, {2{_GEN_8}}, _GEN_9, _GEN_10})
  );
  assign io_readDataB = /*cast(bit)*/_mem_ext_R0_data;
endmodule

