// Generated by CIRCT firtool-1.62.0
module Queue8_AXI_request(
  inputclock,
  outputio_enq_ready,
  input  struct packed {struct packed {logic valid; struct packed {logic [7:0] m_axi_awid; logic [31:0] m_axi_awaddr; logic [7:0] m_axi_awlen; logic [2:0] m_axi_awsize; logic [1:0] m_axi_awburst; logic m_axi_awlock; logic [3:0] m_axi_awcache; logic [2:0] m_axi_awprot; } bits; } AXI_AW; struct packed {logic valid; struct packed {logic [31:0] m_axi_wdata; logic [3:0] m_axi_wstrb; logic m_axi_wlast; } bits; } AXI_W; struct packed {logic valid; struct packed {logic [7:0] m_axi_arid; logic [31:0] m_axi_araddr; logic [7:0] m_axi_arlen; logic [2:0] m_axi_arsize; logic [1:0] m_axi_arburst; logic m_axi_arlock; logic [3:0] m_axi_arcache; logic [2:0] m_axi_arprot; } bits; } AXI_AR; } io_enq_bits,
  output struct packed {struct packed {logic valid; struct packed {logic [7:0] m_axi_awid; logic [31:0] m_axi_awaddr; logic [7:0] m_axi_awlen; logic [2:0] m_axi_awsize; logic [1:0] m_axi_awburst; logic m_axi_awlock; logic [3:0] m_axi_awcache; logic [2:0] m_axi_awprot; } bits; } AXI_AW; struct packed {logic valid; struct packed {logic [31:0] m_axi_wdata; logic [3:0] m_axi_wstrb; logic m_axi_wlast; } bits; } AXI_W; struct packed {logic valid; struct packed {logic [7:0] m_axi_arid; logic [31:0] m_axi_araddr; logic [7:0] m_axi_arlen; logic [2:0] m_axi_arsize; logic [1:0] m_axi_arburst; logic m_axi_arlock; logic [3:0] m_axi_arcache; logic [2:0] m_axi_arprot; } bits; } AXI_AR; } io_deq_bits
);

  assign io_enq_ready = 1'h1;
  assign io_deq_bits = /*cast(bit)*/162'h0;
endmodule

