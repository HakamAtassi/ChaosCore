// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module fetch_packet_decoder(
  inputclock,
reset,
io_flush,
  outputio_fetch_packet_ready,
  inputio_fetch_packet_valid,
  input  struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }io_fetch_packet_bits,
  outputio_predictions_in_ready,
  inputio_predictions_in_valid,
  input  struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }io_predictions_in_bits,
  inputio_decoded_fetch_packet_ready,
  outputio_decoded_fetch_packet_valid,
  output struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; } io_decoded_fetch_packet_bits,
  inputio_predictions_out_ready,
  outputio_predictions_out_valid,
  output struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }io_predictions_out_bits
);

  reg  io_predictions_in_ready_REG;
  reg  io_fetch_packet_ready_REG;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _decoders_3_io_decoded_instruction_bits;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _decoders_2_io_decoded_instruction_bits;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _decoders_1_io_decoded_instruction_bits;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _decoders_0_io_decoded_instruction_bits;
  wire _predictions_out_valid_T_1 = io_fetch_packet_ready_REG & io_fetch_packet_valid;
  wire _predictions_out_valid_T = io_predictions_in_ready_REG & io_predictions_in_valid;
  wire _io_predictions_in_ready_T =
    io_decoded_fetch_packet_ready & io_predictions_out_ready;
  reg  monitor_output_REG;
  wire monitor_output = monitor_output_REG;
  wire
    struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; }
    _GEN =
    '{fetch_PC: io_fetch_packet_bits.fetch_PC,
      decoded_instruction:
        ({{_decoders_3_io_decoded_instruction_bits},
          {_decoders_2_io_decoded_instruction_bits},
          {_decoders_1_io_decoded_instruction_bits},
          {_decoders_0_io_decoded_instruction_bits}}),
      valid_bits: io_fetch_packet_bits.valid_bits,
      GHR: io_fetch_packet_bits.GHR,
      TOS: io_fetch_packet_bits.TOS,
      NEXT: io_fetch_packet_bits.NEXT,
      free_list_front_pointer: (8'h0)};
  always @(posedge clock) begin
    io_fetch_packet_ready_REG <= _io_predictions_in_ready_T;
    io_predictions_in_ready_REG <= _io_predictions_in_ready_T;
    monitor_output_REG <= io_fetch_packet_valid;
  end // always @(posedge)
  decoder decoders_0 (
    .clock                        (clock),
    .reset                        (reset),
    .io_instruction_ready         (/* unused */),
    .io_instruction_valid
      (io_fetch_packet_valid & io_fetch_packet_bits.valid_bits[2'h0]),
    .io_instruction_bits          (io_fetch_packet_bits.instructions[2'h0]),
    .io_decoded_instruction_ready (io_decoded_fetch_packet_ready),
    .io_decoded_instruction_valid (/* unused */),
    .io_decoded_instruction_bits  (_decoders_0_io_decoded_instruction_bits)
  );
  decoder decoders_1 (
    .clock                        (clock),
    .reset                        (reset),
    .io_instruction_ready         (/* unused */),
    .io_instruction_valid
      (io_fetch_packet_valid & io_fetch_packet_bits.valid_bits[2'h1]),
    .io_instruction_bits          (io_fetch_packet_bits.instructions[2'h1]),
    .io_decoded_instruction_ready (io_decoded_fetch_packet_ready),
    .io_decoded_instruction_valid (/* unused */),
    .io_decoded_instruction_bits  (_decoders_1_io_decoded_instruction_bits)
  );
  decoder decoders_2 (
    .clock                        (clock),
    .reset                        (reset),
    .io_instruction_ready         (/* unused */),
    .io_instruction_valid
      (io_fetch_packet_valid & io_fetch_packet_bits.valid_bits[2'h2]),
    .io_instruction_bits          (io_fetch_packet_bits.instructions[2'h2]),
    .io_decoded_instruction_ready (io_decoded_fetch_packet_ready),
    .io_decoded_instruction_valid (/* unused */),
    .io_decoded_instruction_bits  (_decoders_2_io_decoded_instruction_bits)
  );
  decoder decoders_3 (
    .clock                        (clock),
    .reset                        (reset),
    .io_instruction_ready         (/* unused */),
    .io_instruction_valid
      (io_fetch_packet_valid & io_fetch_packet_bits.valid_bits[2'h3]),
    .io_instruction_bits          (io_fetch_packet_bits.instructions[2'h3]),
    .io_decoded_instruction_ready (io_decoded_fetch_packet_ready),
    .io_decoded_instruction_valid (/* unused */),
    .io_decoded_instruction_bits  (_decoders_3_io_decoded_instruction_bits)
  );
  Queue2_decoded_fetch_packet decoded_fetch_packet_out_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid
      (_predictions_out_valid_T_1 & (_predictions_out_valid_T | ~io_predictions_in_valid)
       & ~io_flush),
    .io_enq_bits  (_GEN),
    .io_deq_ready (_io_predictions_in_ready_T),
    .io_deq_valid (io_decoded_fetch_packet_valid),
    .io_deq_bits  (io_decoded_fetch_packet_bits),
    .io_count     (/* unused */),
    .io_flush     (io_flush)
  );
  Queue2_FTQ_entry predictions_out_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (_predictions_out_valid_T & _predictions_out_valid_T_1 & ~io_flush),
    .io_enq_bits  (io_predictions_in_bits),
    .io_deq_ready (_io_predictions_in_ready_T),
    .io_deq_valid (io_predictions_out_valid),
    .io_deq_bits  (io_predictions_out_bits),
    .io_count     (/* unused */),
    .io_flush     (io_flush)
  );
  assign io_fetch_packet_ready = io_fetch_packet_ready_REG;
  assign io_predictions_in_ready = io_predictions_in_ready_REG;
endmodule

