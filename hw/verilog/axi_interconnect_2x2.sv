// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module axi_interconnect_2x2(
  input                                                                                                                                                                                                                                    clock,
                                                                                                                                                                                                                                           reset,
  output                                                                                                                                                                                                                                   io_m_AXI_port_0_AXI_AW_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_0_AXI_AW_valid,
  input  struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_m_AXI_port_0_AXI_AW_bits,
  output                                                                                                                                                                                                                                   io_m_AXI_port_0_AXI_W_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_0_AXI_W_valid,
  input  struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_m_AXI_port_0_AXI_W_bits,
  input                                                                                                                                                                                                                                    io_m_AXI_port_0_AXI_B_ready,
  output                                                                                                                                                                                                                                   io_m_AXI_port_0_AXI_B_valid,
  output struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_m_AXI_port_0_AXI_B_bits,
  output                                                                                                                                                                                                                                   io_m_AXI_port_0_AXI_AR_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_0_AXI_AR_valid,
  input  struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_m_AXI_port_0_AXI_AR_bits,
  input                                                                                                                                                                                                                                    io_m_AXI_port_0_AXI_R_ready,
  output                                                                                                                                                                                                                                   io_m_AXI_port_0_AXI_R_valid,
  output struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_m_AXI_port_0_AXI_R_bits,
  output                                                                                                                                                                                                                                   io_m_AXI_port_1_AXI_AW_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_1_AXI_AW_valid,
  input  struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_m_AXI_port_1_AXI_AW_bits,
  output                                                                                                                                                                                                                                   io_m_AXI_port_1_AXI_W_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_1_AXI_W_valid,
  input  struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_m_AXI_port_1_AXI_W_bits,
  input                                                                                                                                                                                                                                    io_m_AXI_port_1_AXI_B_ready,
  output                                                                                                                                                                                                                                   io_m_AXI_port_1_AXI_B_valid,
  output struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_m_AXI_port_1_AXI_B_bits,
  output                                                                                                                                                                                                                                   io_m_AXI_port_1_AXI_AR_ready,
  input                                                                                                                                                                                                                                    io_m_AXI_port_1_AXI_AR_valid,
  input  struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_m_AXI_port_1_AXI_AR_bits,
  input                                                                                                                                                                                                                                    io_m_AXI_port_1_AXI_R_ready,
  output                                                                                                                                                                                                                                   io_m_AXI_port_1_AXI_R_valid,
  output struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_m_AXI_port_1_AXI_R_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_0_AXI_AW_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_0_AXI_AW_valid,
  output struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_s_AXI_port_0_AXI_AW_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_0_AXI_W_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_0_AXI_W_valid,
  output struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_s_AXI_port_0_AXI_W_bits,
  output                                                                                                                                                                                                                                   io_s_AXI_port_0_AXI_B_ready,
  input                                                                                                                                                                                                                                    io_s_AXI_port_0_AXI_B_valid,
  input  struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_s_AXI_port_0_AXI_B_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_0_AXI_AR_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_0_AXI_AR_valid,
  output struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_s_AXI_port_0_AXI_AR_bits,
  output                                                                                                                                                                                                                                   io_s_AXI_port_0_AXI_R_ready,
  input                                                                                                                                                                                                                                    io_s_AXI_port_0_AXI_R_valid,
  input  struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_s_AXI_port_0_AXI_R_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_1_AXI_AW_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_1_AXI_AW_valid,
  output struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_s_AXI_port_1_AXI_AW_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_1_AXI_W_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_1_AXI_W_valid,
  output struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_s_AXI_port_1_AXI_W_bits,
  output                                                                                                                                                                                                                                   io_s_AXI_port_1_AXI_B_ready,
  input                                                                                                                                                                                                                                    io_s_AXI_port_1_AXI_B_valid,
  input  struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_s_AXI_port_1_AXI_B_bits,
  input                                                                                                                                                                                                                                    io_s_AXI_port_1_AXI_AR_ready,
  output                                                                                                                                                                                                                                   io_s_AXI_port_1_AXI_AR_valid,
  output struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_s_AXI_port_1_AXI_AR_bits,
  output                                                                                                                                                                                                                                   io_s_AXI_port_1_AXI_R_ready,
  input                                                                                                                                                                                                                                    io_s_AXI_port_1_AXI_R_valid,
  input  struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_s_AXI_port_1_AXI_R_bits
);

  wire [7:0]  _NOC_s00_axi_bid;
  wire [1:0]  _NOC_s00_axi_bresp;
  wire        _NOC_s00_axi_buser;
  wire [7:0]  _NOC_s00_axi_rid;
  wire [31:0] _NOC_s00_axi_rdata;
  wire [1:0]  _NOC_s00_axi_rresp;
  wire        _NOC_s00_axi_rlast;
  wire        _NOC_s00_axi_ruser;
  wire [7:0]  _NOC_s01_axi_bid;
  wire [1:0]  _NOC_s01_axi_bresp;
  wire        _NOC_s01_axi_buser;
  wire [7:0]  _NOC_s01_axi_rid;
  wire [31:0] _NOC_s01_axi_rdata;
  wire [1:0]  _NOC_s01_axi_rresp;
  wire        _NOC_s01_axi_rlast;
  wire        _NOC_s01_axi_ruser;
  wire [7:0]  _NOC_m00_axi_awid;
  wire [31:0] _NOC_m00_axi_awaddr;
  wire [7:0]  _NOC_m00_axi_awlen;
  wire [2:0]  _NOC_m00_axi_awsize;
  wire [1:0]  _NOC_m00_axi_awburst;
  wire        _NOC_m00_axi_awlock;
  wire [3:0]  _NOC_m00_axi_awcache;
  wire [2:0]  _NOC_m00_axi_awprot;
  wire [3:0]  _NOC_m00_axi_awqos;
  wire [3:0]  _NOC_m00_axi_awregion;
  wire        _NOC_m00_axi_awuser;
  wire [31:0] _NOC_m00_axi_wdata;
  wire [3:0]  _NOC_m00_axi_wstrb;
  wire        _NOC_m00_axi_wlast;
  wire        _NOC_m00_axi_wuser;
  wire [7:0]  _NOC_m00_axi_arid;
  wire [31:0] _NOC_m00_axi_araddr;
  wire [7:0]  _NOC_m00_axi_arlen;
  wire [2:0]  _NOC_m00_axi_arsize;
  wire [1:0]  _NOC_m00_axi_arburst;
  wire        _NOC_m00_axi_arlock;
  wire [3:0]  _NOC_m00_axi_arcache;
  wire [2:0]  _NOC_m00_axi_arprot;
  wire [3:0]  _NOC_m00_axi_arqos;
  wire [3:0]  _NOC_m00_axi_arregion;
  wire        _NOC_m00_axi_aruser;
  wire [7:0]  _NOC_m01_axi_awid;
  wire [31:0] _NOC_m01_axi_awaddr;
  wire [7:0]  _NOC_m01_axi_awlen;
  wire [2:0]  _NOC_m01_axi_awsize;
  wire [1:0]  _NOC_m01_axi_awburst;
  wire        _NOC_m01_axi_awlock;
  wire [3:0]  _NOC_m01_axi_awcache;
  wire [2:0]  _NOC_m01_axi_awprot;
  wire [3:0]  _NOC_m01_axi_awqos;
  wire        _NOC_m01_axi_awuser;
  wire [31:0] _NOC_m01_axi_wdata;
  wire [3:0]  _NOC_m01_axi_wstrb;
  wire        _NOC_m01_axi_wlast;
  wire        _NOC_m01_axi_wuser;
  wire [7:0]  _NOC_m01_axi_arid;
  wire [31:0] _NOC_m01_axi_araddr;
  wire [7:0]  _NOC_m01_axi_arlen;
  wire [2:0]  _NOC_m01_axi_arsize;
  wire [1:0]  _NOC_m01_axi_arburst;
  wire        _NOC_m01_axi_arlock;
  wire [3:0]  _NOC_m01_axi_arcache;
  wire [2:0]  _NOC_m01_axi_arprot;
  wire [3:0]  _NOC_m01_axi_arqos;
  wire [3:0]  _NOC_m01_axi_arregion;
  wire        _NOC_m01_axi_aruser;
  axi_interconnect_wrap_2x2 #(
    .ADDR_WIDTH(32),
    .ARUSER_ENABLE(0),
    .ARUSER_WIDTH(1),
    .AWUSER_ENABLE(0),
    .AWUSER_WIDTH(1),
    .BUSER_ENABLE(0),
    .BUSER_WIDTH(1),
    .DATA_WIDTH(32),
    .FORWARD_ID(0),
    .ID_WIDTH(8),
    .M00_ADDR_WIDTH(24),
    .M00_BASE_ADDR(0),
    .M00_CONNECT_READ(1),
    .M00_CONNECT_WRITE(1),
    .M00_SECURE(0),
    .M01_ADDR_WIDTH(24),
    .M01_BASE_ADDR(134217728),
    .M01_CONNECT_READ(1),
    .M01_CONNECT_WRITE(1),
    .M01_SECURE(0),
    .M_REGIONS(1),
    .RUSER_ENABLE(0),
    .RUSER_WIDTH(1),
    .STRB_WIDTH(4),
    .WUSER_ENABLE(0),
    .WUSER_WIDTH(1)
  ) NOC (
    .clk              (clock),
    .rst              (reset),
    .s00_axi_awid     (io_m_AXI_port_0_AXI_AW_bits.awid),
    .s00_axi_awaddr   (io_m_AXI_port_0_AXI_AW_bits.awaddr),
    .s00_axi_awlen    (io_m_AXI_port_0_AXI_AW_bits.awlen),
    .s00_axi_awsize   (io_m_AXI_port_0_AXI_AW_bits.awsize),
    .s00_axi_awburst  (io_m_AXI_port_0_AXI_AW_bits.awburst),
    .s00_axi_awlock   (io_m_AXI_port_0_AXI_AW_bits.awlock),
    .s00_axi_awcache  (io_m_AXI_port_0_AXI_AW_bits.awcache),
    .s00_axi_awprot   (io_m_AXI_port_0_AXI_AW_bits.awprot),
    .s00_axi_awqos    (io_m_AXI_port_0_AXI_AW_bits.awqos),
    .s00_axi_awuser   (io_m_AXI_port_0_AXI_AW_bits.awuser),
    .s00_axi_awvalid  (io_m_AXI_port_0_AXI_AW_valid),
    .s00_axi_awready  (io_m_AXI_port_0_AXI_AW_ready),
    .s00_axi_wdata    (io_m_AXI_port_0_AXI_W_bits.wdata),
    .s00_axi_wstrb    (io_m_AXI_port_0_AXI_W_bits.wstrb),
    .s00_axi_wlast    (io_m_AXI_port_0_AXI_W_bits.wlast),
    .s00_axi_wuser    (io_m_AXI_port_0_AXI_W_bits.wuser),
    .s00_axi_wvalid   (io_m_AXI_port_0_AXI_W_valid),
    .s00_axi_wready   (io_m_AXI_port_0_AXI_W_ready),
    .s00_axi_bid      (_NOC_s00_axi_bid),
    .s00_axi_bresp    (_NOC_s00_axi_bresp),
    .s00_axi_buser    (_NOC_s00_axi_buser),
    .s00_axi_bvalid   (io_m_AXI_port_0_AXI_B_valid),
    .s00_axi_bready   (io_m_AXI_port_0_AXI_B_ready),
    .s00_axi_arid     (io_m_AXI_port_0_AXI_AR_bits.arid),
    .s00_axi_araddr   (io_m_AXI_port_0_AXI_AR_bits.araddr),
    .s00_axi_arlen    (io_m_AXI_port_0_AXI_AR_bits.arlen),
    .s00_axi_arsize   (io_m_AXI_port_0_AXI_AR_bits.arsize),
    .s00_axi_arburst  (io_m_AXI_port_0_AXI_AR_bits.arburst),
    .s00_axi_arlock   (io_m_AXI_port_0_AXI_AR_bits.arlock),
    .s00_axi_arcache  (io_m_AXI_port_0_AXI_AR_bits.arcache),
    .s00_axi_arprot   (io_m_AXI_port_0_AXI_AR_bits.arprot),
    .s00_axi_arqos    (io_m_AXI_port_0_AXI_AR_bits.arqos),
    .s00_axi_aruser   (io_m_AXI_port_0_AXI_AR_bits.aruser),
    .s00_axi_arvalid  (io_m_AXI_port_0_AXI_AR_valid),
    .s00_axi_arready  (io_m_AXI_port_0_AXI_AR_ready),
    .s00_axi_rid      (_NOC_s00_axi_rid),
    .s00_axi_rdata    (_NOC_s00_axi_rdata),
    .s00_axi_rresp    (_NOC_s00_axi_rresp),
    .s00_axi_rlast    (_NOC_s00_axi_rlast),
    .s00_axi_ruser    (_NOC_s00_axi_ruser),
    .s00_axi_rvalid   (io_m_AXI_port_0_AXI_R_valid),
    .s00_axi_rready   (io_m_AXI_port_0_AXI_R_ready),
    .s01_axi_awid     (io_m_AXI_port_1_AXI_AW_bits.awid),
    .s01_axi_awaddr   (io_m_AXI_port_1_AXI_AW_bits.awaddr),
    .s01_axi_awlen    (io_m_AXI_port_1_AXI_AW_bits.awlen),
    .s01_axi_awsize   (io_m_AXI_port_1_AXI_AW_bits.awsize),
    .s01_axi_awburst  (io_m_AXI_port_1_AXI_AW_bits.awburst),
    .s01_axi_awlock   (io_m_AXI_port_1_AXI_AW_bits.awlock),
    .s01_axi_awcache  (io_m_AXI_port_1_AXI_AW_bits.awcache),
    .s01_axi_awprot   (io_m_AXI_port_1_AXI_AW_bits.awprot),
    .s01_axi_awqos    (io_m_AXI_port_1_AXI_AW_bits.awqos),
    .s01_axi_awuser   (io_m_AXI_port_1_AXI_AW_bits.awuser),
    .s01_axi_awvalid  (io_m_AXI_port_1_AXI_AW_valid),
    .s01_axi_awready  (io_m_AXI_port_1_AXI_AW_ready),
    .s01_axi_wdata    (io_m_AXI_port_1_AXI_W_bits.wdata),
    .s01_axi_wstrb    (io_m_AXI_port_1_AXI_W_bits.wstrb),
    .s01_axi_wlast    (io_m_AXI_port_1_AXI_W_bits.wlast),
    .s01_axi_wuser    (io_m_AXI_port_1_AXI_W_bits.wuser),
    .s01_axi_wvalid   (io_m_AXI_port_1_AXI_W_valid),
    .s01_axi_wready   (io_m_AXI_port_1_AXI_W_ready),
    .s01_axi_bid      (_NOC_s01_axi_bid),
    .s01_axi_bresp    (_NOC_s01_axi_bresp),
    .s01_axi_buser    (_NOC_s01_axi_buser),
    .s01_axi_bvalid   (io_m_AXI_port_1_AXI_B_valid),
    .s01_axi_bready   (io_m_AXI_port_1_AXI_B_ready),
    .s01_axi_arid     (io_m_AXI_port_1_AXI_AR_bits.arid),
    .s01_axi_araddr   (io_m_AXI_port_1_AXI_AR_bits.araddr),
    .s01_axi_arlen    (io_m_AXI_port_1_AXI_AR_bits.arlen),
    .s01_axi_arsize   (io_m_AXI_port_1_AXI_AR_bits.arsize),
    .s01_axi_arburst  (io_m_AXI_port_1_AXI_AR_bits.arburst),
    .s01_axi_arlock   (io_m_AXI_port_1_AXI_AR_bits.arlock),
    .s01_axi_arcache  (io_m_AXI_port_1_AXI_AR_bits.arcache),
    .s01_axi_arprot   (io_m_AXI_port_1_AXI_AR_bits.arprot),
    .s01_axi_arqos    (io_m_AXI_port_1_AXI_AR_bits.arqos),
    .s01_axi_aruser   (io_m_AXI_port_1_AXI_AR_bits.aruser),
    .s01_axi_arvalid  (io_m_AXI_port_1_AXI_AR_valid),
    .s01_axi_arready  (io_m_AXI_port_1_AXI_AR_ready),
    .s01_axi_rid      (_NOC_s01_axi_rid),
    .s01_axi_rdata    (_NOC_s01_axi_rdata),
    .s01_axi_rresp    (_NOC_s01_axi_rresp),
    .s01_axi_rlast    (_NOC_s01_axi_rlast),
    .s01_axi_ruser    (_NOC_s01_axi_ruser),
    .s01_axi_rvalid   (io_m_AXI_port_1_AXI_R_valid),
    .s01_axi_rready   (io_m_AXI_port_1_AXI_R_ready),
    .m00_axi_awid     (_NOC_m00_axi_awid),
    .m00_axi_awaddr   (_NOC_m00_axi_awaddr),
    .m00_axi_awlen    (_NOC_m00_axi_awlen),
    .m00_axi_awsize   (_NOC_m00_axi_awsize),
    .m00_axi_awburst  (_NOC_m00_axi_awburst),
    .m00_axi_awlock   (_NOC_m00_axi_awlock),
    .m00_axi_awcache  (_NOC_m00_axi_awcache),
    .m00_axi_awprot   (_NOC_m00_axi_awprot),
    .m00_axi_awqos    (_NOC_m00_axi_awqos),
    .m00_axi_awregion (_NOC_m00_axi_awregion),
    .m00_axi_awuser   (_NOC_m00_axi_awuser),
    .m00_axi_awvalid  (io_s_AXI_port_0_AXI_AW_valid),
    .m00_axi_awready  (io_s_AXI_port_0_AXI_AW_ready),
    .m00_axi_wdata    (_NOC_m00_axi_wdata),
    .m00_axi_wstrb    (_NOC_m00_axi_wstrb),
    .m00_axi_wlast    (_NOC_m00_axi_wlast),
    .m00_axi_wuser    (_NOC_m00_axi_wuser),
    .m00_axi_wvalid   (io_s_AXI_port_0_AXI_W_valid),
    .m00_axi_wready   (io_s_AXI_port_0_AXI_W_ready),
    .m00_axi_bid      (io_s_AXI_port_0_AXI_B_bits.bid),
    .m00_axi_bresp    (io_s_AXI_port_0_AXI_B_bits.bresp),
    .m00_axi_buser    (io_s_AXI_port_0_AXI_B_bits.buser),
    .m00_axi_bvalid   (io_s_AXI_port_0_AXI_B_valid),
    .m00_axi_bready   (io_s_AXI_port_0_AXI_B_ready),
    .m00_axi_arid     (_NOC_m00_axi_arid),
    .m00_axi_araddr   (_NOC_m00_axi_araddr),
    .m00_axi_arlen    (_NOC_m00_axi_arlen),
    .m00_axi_arsize   (_NOC_m00_axi_arsize),
    .m00_axi_arburst  (_NOC_m00_axi_arburst),
    .m00_axi_arlock   (_NOC_m00_axi_arlock),
    .m00_axi_arcache  (_NOC_m00_axi_arcache),
    .m00_axi_arprot   (_NOC_m00_axi_arprot),
    .m00_axi_arqos    (_NOC_m00_axi_arqos),
    .m00_axi_arregion (_NOC_m00_axi_arregion),
    .m00_axi_aruser   (_NOC_m00_axi_aruser),
    .m00_axi_arvalid  (io_s_AXI_port_0_AXI_AR_valid),
    .m00_axi_arready  (io_s_AXI_port_0_AXI_AR_ready),
    .m00_axi_rid      (io_s_AXI_port_0_AXI_R_bits.rid),
    .m00_axi_rdata    (io_s_AXI_port_0_AXI_R_bits.rdata),
    .m00_axi_rresp    (io_s_AXI_port_0_AXI_R_bits.rresp),
    .m00_axi_rlast    (io_s_AXI_port_0_AXI_R_bits.rlast),
    .m00_axi_ruser    (io_s_AXI_port_0_AXI_R_bits.ruser),
    .m00_axi_rvalid   (io_s_AXI_port_0_AXI_R_valid),
    .m00_axi_rready   (io_s_AXI_port_0_AXI_R_ready),
    .m01_axi_awid     (_NOC_m01_axi_awid),
    .m01_axi_awaddr   (_NOC_m01_axi_awaddr),
    .m01_axi_awlen    (_NOC_m01_axi_awlen),
    .m01_axi_awsize   (_NOC_m01_axi_awsize),
    .m01_axi_awburst  (_NOC_m01_axi_awburst),
    .m01_axi_awlock   (_NOC_m01_axi_awlock),
    .m01_axi_awcache  (_NOC_m01_axi_awcache),
    .m01_axi_awprot   (_NOC_m01_axi_awprot),
    .m01_axi_awqos    (_NOC_m01_axi_awqos),
    .m01_axi_awregion (/* unused */),
    .m01_axi_awuser   (_NOC_m01_axi_awuser),
    .m01_axi_awvalid  (io_s_AXI_port_1_AXI_AW_valid),
    .m01_axi_awready  (io_s_AXI_port_1_AXI_AW_ready),
    .m01_axi_wdata    (_NOC_m01_axi_wdata),
    .m01_axi_wstrb    (_NOC_m01_axi_wstrb),
    .m01_axi_wlast    (_NOC_m01_axi_wlast),
    .m01_axi_wuser    (_NOC_m01_axi_wuser),
    .m01_axi_wvalid   (io_s_AXI_port_1_AXI_W_valid),
    .m01_axi_wready   (io_s_AXI_port_1_AXI_W_ready),
    .m01_axi_bid      (io_s_AXI_port_1_AXI_B_bits.bid),
    .m01_axi_bresp    (io_s_AXI_port_1_AXI_B_bits.bresp),
    .m01_axi_buser    (io_s_AXI_port_1_AXI_B_bits.buser),
    .m01_axi_bvalid   (io_s_AXI_port_1_AXI_B_valid),
    .m01_axi_bready   (io_s_AXI_port_1_AXI_B_ready),
    .m01_axi_arid     (_NOC_m01_axi_arid),
    .m01_axi_araddr   (_NOC_m01_axi_araddr),
    .m01_axi_arlen    (_NOC_m01_axi_arlen),
    .m01_axi_arsize   (_NOC_m01_axi_arsize),
    .m01_axi_arburst  (_NOC_m01_axi_arburst),
    .m01_axi_arlock   (_NOC_m01_axi_arlock),
    .m01_axi_arcache  (_NOC_m01_axi_arcache),
    .m01_axi_arprot   (_NOC_m01_axi_arprot),
    .m01_axi_arqos    (_NOC_m01_axi_arqos),
    .m01_axi_arregion (_NOC_m01_axi_arregion),
    .m01_axi_aruser   (_NOC_m01_axi_aruser),
    .m01_axi_arvalid  (io_s_AXI_port_1_AXI_AR_valid),
    .m01_axi_arready  (io_s_AXI_port_1_AXI_AR_ready),
    .m01_axi_rid      (io_s_AXI_port_1_AXI_R_bits.rid),
    .m01_axi_rdata    (io_s_AXI_port_1_AXI_R_bits.rdata),
    .m01_axi_rresp    (io_s_AXI_port_1_AXI_R_bits.rresp),
    .m01_axi_rlast    (io_s_AXI_port_1_AXI_R_bits.rlast),
    .m01_axi_ruser    (io_s_AXI_port_1_AXI_R_bits.ruser),
    .m01_axi_rvalid   (io_s_AXI_port_1_AXI_R_valid),
    .m01_axi_rready   (io_s_AXI_port_1_AXI_R_ready)
  );
  assign io_m_AXI_port_0_AXI_B_bits =
    '{bid: _NOC_s00_axi_bid, bresp: _NOC_s00_axi_bresp, buser: _NOC_s00_axi_buser};
  assign io_m_AXI_port_0_AXI_R_bits =
    '{rid: _NOC_s00_axi_rid,
      rdata: _NOC_s00_axi_rdata,
      rresp: _NOC_s00_axi_rresp,
      rlast: _NOC_s00_axi_rlast,
      ruser: _NOC_s00_axi_ruser};
  assign io_m_AXI_port_1_AXI_B_bits =
    '{bid: _NOC_s01_axi_bid, bresp: _NOC_s01_axi_bresp, buser: _NOC_s01_axi_buser};
  assign io_m_AXI_port_1_AXI_R_bits =
    '{rid: _NOC_s01_axi_rid,
      rdata: _NOC_s01_axi_rdata,
      rresp: _NOC_s01_axi_rresp,
      rlast: _NOC_s01_axi_rlast,
      ruser: _NOC_s01_axi_ruser};
  assign io_s_AXI_port_0_AXI_AW_bits =
    '{awid: _NOC_m00_axi_awid,
      awaddr: _NOC_m00_axi_awaddr,
      awlen: _NOC_m00_axi_awlen,
      awsize: _NOC_m00_axi_awsize,
      awburst: _NOC_m00_axi_awburst,
      awlock: _NOC_m00_axi_awlock,
      awcache: _NOC_m00_axi_awcache,
      awprot: _NOC_m00_axi_awprot,
      awqos: _NOC_m00_axi_awqos,
      awregion: _NOC_m00_axi_awregion,
      awuser: _NOC_m00_axi_awuser};
  assign io_s_AXI_port_0_AXI_W_bits =
    '{wdata: _NOC_m00_axi_wdata,
      wstrb: _NOC_m00_axi_wstrb,
      wlast: _NOC_m00_axi_wlast,
      wuser: _NOC_m00_axi_wuser};
  assign io_s_AXI_port_0_AXI_AR_bits =
    '{arid: _NOC_m00_axi_arid,
      araddr: _NOC_m00_axi_araddr,
      arlen: _NOC_m00_axi_arlen,
      arsize: _NOC_m00_axi_arsize,
      arburst: _NOC_m00_axi_arburst,
      arlock: _NOC_m00_axi_arlock,
      arcache: _NOC_m00_axi_arcache,
      arprot: _NOC_m00_axi_arprot,
      arqos: _NOC_m00_axi_arqos,
      arregion: _NOC_m00_axi_arregion,
      aruser: _NOC_m00_axi_aruser};
  assign io_s_AXI_port_1_AXI_AW_bits =
    '{awid: _NOC_m01_axi_awid,
      awaddr: _NOC_m01_axi_awaddr,
      awlen: _NOC_m01_axi_awlen,
      awsize: _NOC_m01_axi_awsize,
      awburst: _NOC_m01_axi_awburst,
      awlock: _NOC_m01_axi_awlock,
      awcache: _NOC_m01_axi_awcache,
      awprot: _NOC_m01_axi_awprot,
      awqos: _NOC_m01_axi_awqos,
      awregion: _NOC_m01_axi_arregion,
      awuser: _NOC_m01_axi_awuser};
  assign io_s_AXI_port_1_AXI_W_bits =
    '{wdata: _NOC_m01_axi_wdata,
      wstrb: _NOC_m01_axi_wstrb,
      wlast: _NOC_m01_axi_wlast,
      wuser: _NOC_m01_axi_wuser};
  assign io_s_AXI_port_1_AXI_AR_bits =
    '{arid: _NOC_m01_axi_arid,
      araddr: _NOC_m01_axi_araddr,
      arlen: _NOC_m01_axi_arlen,
      arsize: _NOC_m01_axi_arsize,
      arburst: _NOC_m01_axi_arburst,
      arlock: _NOC_m01_axi_arlock,
      arcache: _NOC_m01_axi_arcache,
      arprot: _NOC_m01_axi_arprot,
      arqos: _NOC_m01_axi_arqos,
      arregion: {3'h0, _NOC_m01_axi_aruser},
      aruser: _NOC_m01_axi_aruser};
endmodule

