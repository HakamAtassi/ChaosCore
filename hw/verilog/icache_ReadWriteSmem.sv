// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module icache_ReadWriteSmem(
  input                                                                      clock,
                                                                             io_wr_en,
  input  [5:0]                                                               io_addr,
  input  struct packed {logic valid; logic [20:0] tag; logic [255:0] data; } io_data_in,
  output struct packed {logic valid; logic [20:0] tag; logic [255:0] data; } io_data_out
);

  wire [255:0] _GEN;
  wire [20:0]  _GEN_0;
  wire         _GEN_1;
  wire         _GEN_2;
  wire         _GEN_3;
  wire         _GEN_4;
  wire [277:0] _mem_ext_R0_data;
  wire struct packed {logic valid; logic tag; logic data; } _GEN_5 = /*cast(bit)*/3'h0;
  wire struct packed {logic valid; logic [20:0] tag; logic [255:0] data; } _GEN_6 =
    /*cast(bit)*/278'h0;
  assign _GEN_4 = io_wr_en | _GEN_5.valid;
  assign _GEN_3 = io_wr_en | _GEN_5.tag;
  assign _GEN_2 = io_wr_en | _GEN_5.data;
  assign _GEN_1 = io_wr_en ? io_data_in.valid : _GEN_6.valid;
  assign _GEN_0 = io_wr_en ? io_data_in.tag : _GEN_6.tag;
  assign _GEN = io_wr_en ? io_data_in.data : _GEN_6.data;
  mem_64x278 mem_ext (
    .R0_addr (io_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data ({_GEN, _GEN_0, _GEN_1}),
    .W0_mask ({{256{_GEN_2}}, {21{_GEN_3}}, _GEN_4})
  );
  assign io_data_out = /*cast(bit)*/_mem_ext_R0_data;
endmodule

