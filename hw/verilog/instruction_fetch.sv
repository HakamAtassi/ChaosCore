// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module instruction_fetch(
  input                                                                                                                                                                                                                                                                                                                                                                                                      clock,
                                                                                                                                                                                                                                                                                                                                                                                                             reset,
                                                                                                                                                                                                                                                                                                                                                                                                             io_flush,
  input  struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; } io_commit,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_memory_response_ready,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_memory_response_valid,
  input  struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }                                                                                                                                                                 io_memory_response_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_memory_request_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_memory_request_valid,
  output struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; }                                                                                                                                                                                                                                                                                                                              io_memory_request_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_fetch_packet_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_fetch_packet_valid,
  output struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }                                                                                                                                                                 io_fetch_packet_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_predictions_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_predictions_valid,
  output struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }                                                                                                                                                                               io_predictions_bits,
  output struct packed {logic valid; struct packed {logic [31:0] PC; } bits; }                                                                                                                                                                                                                                                                                                                               io_revert
);

  wire        _BTB_Q_io_enq_ready;
  wire        _BTB_Q_io_deq_valid;
  wire
    struct packed {logic hit; logic [31:0] target; logic [2:0] br_type; logic [15:0] GHR; logic T_NT; }
    _BTB_Q_io_deq_bits;
  wire        _PC_Q_io_enq_ready;
  wire struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; }
    _PC_Q_io_deq_bits;
  wire        _instruction_Q_io_deq_valid;
  wire
    struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    _instruction_Q_io_deq_bits;
  wire        _PC_gen_io_PC_next_valid;
  wire struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; }
    _PC_gen_io_PC_next_bits;
  wire struct packed {logic valid; struct packed {logic [31:0] PC; } bits; }
    _predecoder_io_revert;
  wire        _predecoder_io_prediction_ready;
  wire        _predecoder_io_fetch_packet_ready;
  wire [15:0] _predecoder_io_GHR;
  wire struct packed {logic [31:0] call_addr; logic call; logic ret; }
    _predecoder_io_RAS_update;
  wire        _bp_io_predict_ready;
  wire struct packed {logic [6:0] NEXT; logic [6:0] TOS; logic [31:0] ret_addr; }
    _bp_io_RAS_read;
  wire        _bp_io_prediction_valid;
  wire
    struct packed {logic hit; logic [31:0] target; logic [2:0] br_type; logic [15:0] GHR; logic T_NT; }
    _bp_io_prediction_bits;
  wire        _bp_io_flush_T = io_flush | _predecoder_io_revert.valid;
  BP bp (
    .clock               (clock),
    .reset               (reset),
    .io_flush            (_bp_io_flush_T),
    .io_predict_ready    (_bp_io_predict_ready),
    .io_predict_valid    (_PC_Q_io_enq_ready & _PC_gen_io_PC_next_valid),
    .io_predict_bits     (_PC_Q_io_deq_bits),
    .io_commit           (io_commit),
    .io_RAS_update       (_predecoder_io_RAS_update),
    .io_RAS_read         (_bp_io_RAS_read),
    .io_GHR              (_predecoder_io_GHR),
    .io_prediction_ready (_BTB_Q_io_enq_ready),
    .io_prediction_valid (_bp_io_prediction_valid),
    .io_prediction_bits  (_bp_io_prediction_bits)
  );
  predecoder predecoder (
    .clock                       (clock),
    .reset                       (reset),
    .io_flush                    (io_flush),
    .io_revert                   (_predecoder_io_revert),
    .io_prediction_ready         (_predecoder_io_prediction_ready),
    .io_prediction_valid         (_BTB_Q_io_deq_valid),
    .io_prediction_bits          (_BTB_Q_io_deq_bits),
    .io_fetch_packet_ready       (_predecoder_io_fetch_packet_ready),
    .io_fetch_packet_valid       (_instruction_Q_io_deq_valid),
    .io_fetch_packet_bits        (_instruction_Q_io_deq_bits),
    .io_RAS_read                 (_bp_io_RAS_read),
    .io_commit                   (io_commit),
    .io_predictions_ready        (io_predictions_ready),
    .io_predictions_valid        (io_predictions_valid),
    .io_predictions_bits         (io_predictions_bits),
    .io_final_fetch_packet_ready (io_fetch_packet_ready),
    .io_final_fetch_packet_valid (io_fetch_packet_valid),
    .io_final_fetch_packet_bits  (io_fetch_packet_bits),
    .io_GHR                      (_predecoder_io_GHR),
    .io_RAS_update               (_predecoder_io_RAS_update)
  );
  PC_gen PC_gen (
    .clock               (clock),
    .reset               (reset),
    .io_commit           (io_commit),
    .io_revert           (_predecoder_io_revert),
    .io_prediction_ready (/* unused */),
    .io_prediction_valid (_bp_io_prediction_valid),
    .io_prediction_bits  (_bp_io_prediction_bits),
    .io_RAS_read         (_bp_io_RAS_read),
    .io_PC_next_ready    (_PC_Q_io_enq_ready),
    .io_PC_next_valid    (_PC_gen_io_PC_next_valid),
    .io_PC_next_bits     (_PC_gen_io_PC_next_bits)
  );
  Queue16_fetch_packet instruction_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (io_memory_response_ready),
    .io_enq_valid (io_memory_response_valid),
    .io_enq_bits  (io_memory_response_bits),
    .io_deq_ready (_predecoder_io_fetch_packet_ready),
    .io_deq_valid (_instruction_Q_io_deq_valid),
    .io_deq_bits  (_instruction_Q_io_deq_bits),
    .io_count     (/* unused */),
    .io_flush     (_bp_io_flush_T)
  );
  Queue16_frontend_memory_request PC_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_PC_Q_io_enq_ready),
    .io_enq_valid (_PC_gen_io_PC_next_valid & _bp_io_predict_ready),
    .io_enq_bits  (_PC_gen_io_PC_next_bits),
    .io_deq_ready (io_memory_request_ready),
    .io_deq_valid (io_memory_request_valid),
    .io_deq_bits  (_PC_Q_io_deq_bits),
    .io_count     (/* unused */),
    .io_flush     (_bp_io_flush_T)
  );
  Queue16_prediction BTB_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_BTB_Q_io_enq_ready),
    .io_enq_valid (_bp_io_prediction_valid),
    .io_enq_bits  (_bp_io_prediction_bits),
    .io_deq_ready
      (_predecoder_io_prediction_ready & _predecoder_io_fetch_packet_ready
       & _instruction_Q_io_deq_valid),
    .io_deq_valid (_BTB_Q_io_deq_valid),
    .io_deq_bits  (_BTB_Q_io_deq_bits),
    .io_count     (/* unused */),
    .io_flush     (_bp_io_flush_T)
  );
  assign io_memory_request_bits = _PC_Q_io_deq_bits;
  assign io_revert = _predecoder_io_revert;
endmodule

