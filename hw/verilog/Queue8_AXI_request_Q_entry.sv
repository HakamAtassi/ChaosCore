// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue8_AXI_request_Q_entry(
  input          clock,
                 reset,
                 io_enq_valid,
                 io_enq_bits_write_valid,
  input  [31:0]  io_enq_bits_write_address,
  input  [255:0] io_enq_bits_write_data,
  input  [7:0]   io_enq_bits_write_ID,
  input  [6:0]   io_enq_bits_write_bytes,
  input          io_enq_bits_read_valid,
  input  [31:0]  io_enq_bits_read_address,
  input  [7:0]   io_enq_bits_read_ID,
  input  [6:0]   io_enq_bits_read_bytes,
  input          io_deq_ready,
  output         io_deq_valid,
                 io_deq_bits_write_valid,
  output [31:0]  io_deq_bits_write_address,
  output [255:0] io_deq_bits_write_data,
  output [7:0]   io_deq_bits_write_ID,
  output [6:0]   io_deq_bits_write_bytes,
  output         io_deq_bits_read_valid,
  output [31:0]  io_deq_bits_read_address,
  output [7:0]   io_deq_bits_read_ID,
  output [6:0]   io_deq_bits_read_bytes
);

  wire         io_enq_ready;
  wire [351:0] _ram_ext_R0_data;
  reg  [2:0]   enq_ptr_value;
  reg  [2:0]   deq_ptr_value;
  reg          maybe_full;
  wire         ptr_match = enq_ptr_value == deq_ptr_value;
  wire         empty = ptr_match & ~maybe_full;
  wire         do_enq = io_enq_ready & io_enq_valid;
  wire         do_deq = io_deq_ready & ~empty;
  assign io_enq_ready = ~(ptr_match & maybe_full);
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 3'h0;
      deq_ptr_value <= 3'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 3'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 3'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_8x352 ram_ext (
    .R0_addr (do_deq ? ((&deq_ptr_value) ? 3'h0 : deq_ptr_value + 3'h1) : deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({io_enq_bits_read_bytes,
        io_enq_bits_read_ID,
        io_enq_bits_read_address,
        io_enq_bits_read_valid,
        io_enq_bits_write_bytes,
        io_enq_bits_write_ID,
        io_enq_bits_write_data,
        io_enq_bits_write_address,
        io_enq_bits_write_valid})
  );
  assign io_deq_valid = ~empty;
  assign io_deq_bits_write_valid = _ram_ext_R0_data[0];
  assign io_deq_bits_write_address = _ram_ext_R0_data[32:1];
  assign io_deq_bits_write_data = _ram_ext_R0_data[288:33];
  assign io_deq_bits_write_ID = _ram_ext_R0_data[296:289];
  assign io_deq_bits_write_bytes = _ram_ext_R0_data[303:297];
  assign io_deq_bits_read_valid = _ram_ext_R0_data[304];
  assign io_deq_bits_read_address = _ram_ext_R0_data[336:305];
  assign io_deq_bits_read_ID = _ram_ext_R0_data[344:337];
  assign io_deq_bits_read_bytes = _ram_ext_R0_data[351:345];
endmodule

