// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue1_fetch_packet(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits_fetch_PC,
  input         io_enq_bits_valid_bits_0,
                io_enq_bits_valid_bits_1,
                io_enq_bits_valid_bits_2,
                io_enq_bits_valid_bits_3,
  input  [31:0] io_enq_bits_instructions_0_instruction,
                io_enq_bits_instructions_1_instruction,
                io_enq_bits_instructions_2_instruction,
                io_enq_bits_instructions_3_instruction,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits_fetch_PC,
  output        io_deq_bits_valid_bits_0,
                io_deq_bits_valid_bits_1,
                io_deq_bits_valid_bits_2,
                io_deq_bits_valid_bits_3,
  output [31:0] io_deq_bits_instructions_0_instruction,
  output [3:0]  io_deq_bits_instructions_0_packet_index,
  output [5:0]  io_deq_bits_instructions_0_ROB_index,
  output [31:0] io_deq_bits_instructions_1_instruction,
  output [3:0]  io_deq_bits_instructions_1_packet_index,
  output [5:0]  io_deq_bits_instructions_1_ROB_index,
  output [31:0] io_deq_bits_instructions_2_instruction,
  output [3:0]  io_deq_bits_instructions_2_packet_index,
  output [5:0]  io_deq_bits_instructions_2_ROB_index,
  output [31:0] io_deq_bits_instructions_3_instruction,
  output [3:0]  io_deq_bits_instructions_3_packet_index,
  output [5:0]  io_deq_bits_instructions_3_ROB_index,
  output        io_deq_bits_prediction_hit,
  output [31:0] io_deq_bits_prediction_target,
  output [2:0]  io_deq_bits_prediction_br_type,
  output        io_deq_bits_prediction_T_NT,
  output [15:0] io_deq_bits_GHR,
  output [6:0]  io_deq_bits_NEXT,
                io_deq_bits_TOS,
  input         io_flush
);

  reg  [270:0] ram;
  reg          full;
  wire         io_deq_valid_0 = io_enq_valid | full;
  wire         do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {77'h3,
         io_enq_bits_instructions_3_instruction,
         10'h2,
         io_enq_bits_instructions_2_instruction,
         10'h1,
         io_enq_bits_instructions_1_instruction,
         10'h0,
         io_enq_bits_instructions_0_instruction,
         io_enq_bits_valid_bits_3,
         io_enq_bits_valid_bits_2,
         io_enq_bits_valid_bits_1,
         io_enq_bits_valid_bits_0,
         io_enq_bits_fetch_PC};
    if (reset)
      full <= 1'h0;
    else
      full <=
        ~io_flush & (do_enq == (full & io_deq_ready & io_deq_valid_0) ? full : do_enq);
  end // always @(posedge)
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_fetch_PC = full ? ram[31:0] : io_enq_bits_fetch_PC;
  assign io_deq_bits_valid_bits_0 = full ? ram[32] : io_enq_bits_valid_bits_0;
  assign io_deq_bits_valid_bits_1 = full ? ram[33] : io_enq_bits_valid_bits_1;
  assign io_deq_bits_valid_bits_2 = full ? ram[34] : io_enq_bits_valid_bits_2;
  assign io_deq_bits_valid_bits_3 = full ? ram[35] : io_enq_bits_valid_bits_3;
  assign io_deq_bits_instructions_0_instruction =
    full ? ram[67:36] : io_enq_bits_instructions_0_instruction;
  assign io_deq_bits_instructions_0_packet_index = full ? ram[71:68] : 4'h0;
  assign io_deq_bits_instructions_0_ROB_index = full ? ram[77:72] : 6'h0;
  assign io_deq_bits_instructions_1_instruction =
    full ? ram[109:78] : io_enq_bits_instructions_1_instruction;
  assign io_deq_bits_instructions_1_packet_index = full ? ram[113:110] : 4'h1;
  assign io_deq_bits_instructions_1_ROB_index = full ? ram[119:114] : 6'h0;
  assign io_deq_bits_instructions_2_instruction =
    full ? ram[151:120] : io_enq_bits_instructions_2_instruction;
  assign io_deq_bits_instructions_2_packet_index = full ? ram[155:152] : 4'h2;
  assign io_deq_bits_instructions_2_ROB_index = full ? ram[161:156] : 6'h0;
  assign io_deq_bits_instructions_3_instruction =
    full ? ram[193:162] : io_enq_bits_instructions_3_instruction;
  assign io_deq_bits_instructions_3_packet_index = full ? ram[197:194] : 4'h3;
  assign io_deq_bits_instructions_3_ROB_index = full ? ram[203:198] : 6'h0;
  assign io_deq_bits_prediction_hit = full & ram[204];
  assign io_deq_bits_prediction_target = full ? ram[236:205] : 32'h0;
  assign io_deq_bits_prediction_br_type = full ? ram[239:237] : 3'h0;
  assign io_deq_bits_prediction_T_NT = full & ram[240];
  assign io_deq_bits_GHR = full ? ram[256:241] : 16'h0;
  assign io_deq_bits_NEXT = full ? ram[263:257] : 7'h0;
  assign io_deq_bits_TOS = full ? ram[270:264] : 7'h0;
endmodule

