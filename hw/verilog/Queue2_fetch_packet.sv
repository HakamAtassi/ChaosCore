// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue2_fetch_packet(
  input                                                                                                                                                                                                                                      clock,
                                                                                                                                                                                                                                             reset,
  output                                                                                                                                                                                                                                     io_enq_ready,
  input                                                                                                                                                                                                                                      io_enq_valid,
  input  struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; } io_enq_bits,
  input                                                                                                                                                                                                                                      io_deq_ready,
  output                                                                                                                                                                                                                                     io_deq_valid,
  output struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; } io_deq_bits,
  output [1:0]                                                                                                                                                                                                                               io_count,
  input                                                                                                                                                                                                                                      io_flush
);

  wire [6:0]   _GEN;
  wire [6:0]   _GEN_0;
  wire [15:0]  _GEN_1;
  wire [5:0]   _GEN_2;
  wire [3:0]   _GEN_3;
  wire [31:0]  _GEN_4;
  wire [5:0]   _GEN_5;
  wire [3:0]   _GEN_6;
  wire [31:0]  _GEN_7;
  wire [5:0]   _GEN_8;
  wire [3:0]   _GEN_9;
  wire [31:0]  _GEN_10;
  wire [5:0]   _GEN_11;
  wire [3:0]   _GEN_12;
  wire [31:0]  _GEN_13;
  wire         _GEN_14;
  wire         _GEN_15;
  wire         _GEN_16;
  wire         _GEN_17;
  wire [31:0]  _GEN_18;
  wire         _GEN_19;
  wire         _GEN_20;
  wire         _GEN_21;
  wire         _GEN_22;
  wire         _GEN_23;
  wire         _GEN_24;
  wire         _GEN_25;
  wire         _GEN_26;
  wire         _GEN_27;
  wire         _GEN_28;
  wire         _GEN_29;
  wire         _GEN_30;
  wire         _GEN_31;
  wire         _GEN_32;
  wire         _GEN_33;
  wire         _GEN_34;
  wire         _GEN_35;
  wire         _GEN_36;
  wire         _GEN_37;
  wire         _GEN_38;
  wire [233:0] _ram_ext_R0_data;
  wire
    struct packed {logic fetch_PC; logic [3:0] valid_bits; struct packed {logic instruction; logic packet_index; logic ROB_index; }[3:0] instructions; logic GHR; logic NEXT; logic TOS; }
    _GEN_39 = /*cast(bit)*/20'h0;
  wire
    struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    _GEN_40 = /*cast(bit)*/234'h0;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  assign _GEN_38 = do_enq | _GEN_39.fetch_PC;
  assign _GEN_37 = do_enq | _GEN_39.valid_bits[2'h0];
  assign _GEN_36 = do_enq | _GEN_39.valid_bits[2'h1];
  assign _GEN_35 = do_enq | _GEN_39.valid_bits[2'h2];
  assign _GEN_34 = do_enq | _GEN_39.valid_bits[2'h3];
  assign _GEN_33 = do_enq | _GEN_39.instructions[2'h0].instruction;
  assign _GEN_32 = do_enq | _GEN_39.instructions[2'h0].packet_index;
  assign _GEN_31 = do_enq | _GEN_39.instructions[2'h0].ROB_index;
  assign _GEN_30 = do_enq | _GEN_39.instructions[2'h1].instruction;
  assign _GEN_29 = do_enq | _GEN_39.instructions[2'h1].packet_index;
  assign _GEN_28 = do_enq | _GEN_39.instructions[2'h1].ROB_index;
  assign _GEN_27 = do_enq | _GEN_39.instructions[2'h2].instruction;
  assign _GEN_26 = do_enq | _GEN_39.instructions[2'h2].packet_index;
  assign _GEN_25 = do_enq | _GEN_39.instructions[2'h2].ROB_index;
  assign _GEN_24 = do_enq | _GEN_39.instructions[2'h3].instruction;
  assign _GEN_23 = do_enq | _GEN_39.instructions[2'h3].packet_index;
  assign _GEN_22 = do_enq | _GEN_39.instructions[2'h3].ROB_index;
  assign _GEN_21 = do_enq | _GEN_39.GHR;
  assign _GEN_20 = do_enq | _GEN_39.NEXT;
  assign _GEN_19 = do_enq | _GEN_39.TOS;
  assign _GEN_18 = do_enq ? io_enq_bits.fetch_PC : _GEN_40.fetch_PC;
  assign _GEN_17 = do_enq ? io_enq_bits.valid_bits[2'h0] : _GEN_40.valid_bits[2'h0];
  assign _GEN_16 = do_enq ? io_enq_bits.valid_bits[2'h1] : _GEN_40.valid_bits[2'h1];
  assign _GEN_15 = do_enq ? io_enq_bits.valid_bits[2'h2] : _GEN_40.valid_bits[2'h2];
  assign _GEN_14 = do_enq ? io_enq_bits.valid_bits[2'h3] : _GEN_40.valid_bits[2'h3];
  assign _GEN_13 =
    do_enq
      ? io_enq_bits.instructions[2'h0].instruction
      : _GEN_40.instructions[2'h0].instruction;
  assign _GEN_12 =
    do_enq
      ? io_enq_bits.instructions[2'h0].packet_index
      : _GEN_40.instructions[2'h0].packet_index;
  assign _GEN_11 =
    do_enq
      ? io_enq_bits.instructions[2'h0].ROB_index
      : _GEN_40.instructions[2'h0].ROB_index;
  assign _GEN_10 =
    do_enq
      ? io_enq_bits.instructions[2'h1].instruction
      : _GEN_40.instructions[2'h1].instruction;
  assign _GEN_9 =
    do_enq
      ? io_enq_bits.instructions[2'h1].packet_index
      : _GEN_40.instructions[2'h1].packet_index;
  assign _GEN_8 =
    do_enq
      ? io_enq_bits.instructions[2'h1].ROB_index
      : _GEN_40.instructions[2'h1].ROB_index;
  assign _GEN_7 =
    do_enq
      ? io_enq_bits.instructions[2'h2].instruction
      : _GEN_40.instructions[2'h2].instruction;
  assign _GEN_6 =
    do_enq
      ? io_enq_bits.instructions[2'h2].packet_index
      : _GEN_40.instructions[2'h2].packet_index;
  assign _GEN_5 =
    do_enq
      ? io_enq_bits.instructions[2'h2].ROB_index
      : _GEN_40.instructions[2'h2].ROB_index;
  assign _GEN_4 =
    do_enq
      ? io_enq_bits.instructions[2'h3].instruction
      : _GEN_40.instructions[2'h3].instruction;
  assign _GEN_3 =
    do_enq
      ? io_enq_bits.instructions[2'h3].packet_index
      : _GEN_40.instructions[2'h3].packet_index;
  assign _GEN_2 =
    do_enq
      ? io_enq_bits.instructions[2'h3].ROB_index
      : _GEN_40.instructions[2'h3].ROB_index;
  assign _GEN_1 = do_enq ? io_enq_bits.GHR : _GEN_40.GHR;
  assign _GEN_0 = do_enq ? io_enq_bits.NEXT : _GEN_40.NEXT;
  assign _GEN = do_enq ? io_enq_bits.TOS : _GEN_40.TOS;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      wrap <= ~io_flush & (do_enq ? wrap - 1'h1 : wrap);
      wrap_1 <= ~io_flush & (do_deq ? wrap_1 - 1'h1 : wrap_1);
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_2x234 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({_GEN,
        _GEN_0,
        _GEN_1,
        _GEN_2,
        _GEN_3,
        _GEN_4,
        _GEN_5,
        _GEN_6,
        _GEN_7,
        _GEN_8,
        _GEN_9,
        _GEN_10,
        _GEN_11,
        _GEN_12,
        _GEN_13,
        _GEN_14,
        _GEN_15,
        _GEN_16,
        _GEN_17,
        _GEN_18}),
    .W0_mask
      ({{7{_GEN_19}},
        {7{_GEN_20}},
        {16{_GEN_21}},
        {6{_GEN_22}},
        {4{_GEN_23}},
        {32{_GEN_24}},
        {6{_GEN_25}},
        {4{_GEN_26}},
        {32{_GEN_27}},
        {6{_GEN_28}},
        {4{_GEN_29}},
        {32{_GEN_30}},
        {6{_GEN_31}},
        {4{_GEN_32}},
        {32{_GEN_33}},
        _GEN_34,
        _GEN_35,
        _GEN_36,
        _GEN_37,
        {32{_GEN_38}}})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits = /*cast(bit)*/_ram_ext_R0_data;
  assign io_count = {maybe_full & ptr_match, wrap - wrap_1};
endmodule

