// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module aligner_uncompressed(
  output         io_mem_rsp_ready,
  input          io_mem_rsp_valid,
  input  [127:0] io_mem_rsp_bits_instruction_data,
  input  [31:0]  io_mem_rsp_bits_fetch_PC,
  input          io_aligned_fetch_packet_ready,
  output         io_aligned_fetch_packet_valid,
  output [31:0]  io_aligned_fetch_packet_bits_fetch_PC,
  output         io_aligned_fetch_packet_bits_valid_bits_0,
                 io_aligned_fetch_packet_bits_valid_bits_2,
  output [31:0]  io_aligned_fetch_packet_bits_instructions_0_instruction,
                 io_aligned_fetch_packet_bits_instructions_2_instruction
);

  wire [3:0] _validator_io_instruction_output;
  instruction_validator validator (
    .io_instruction_index  (io_mem_rsp_bits_fetch_PC[3:2]),
    .io_instruction_output (_validator_io_instruction_output)
  );
  assign io_mem_rsp_ready = io_aligned_fetch_packet_ready;
  assign io_aligned_fetch_packet_valid = io_mem_rsp_valid;
  assign io_aligned_fetch_packet_bits_fetch_PC = io_mem_rsp_bits_fetch_PC;
  assign io_aligned_fetch_packet_bits_valid_bits_0 =
    _validator_io_instruction_output[3] & io_mem_rsp_valid;
  assign io_aligned_fetch_packet_bits_valid_bits_2 =
    _validator_io_instruction_output[1] & io_mem_rsp_valid;
  assign io_aligned_fetch_packet_bits_instructions_0_instruction =
    io_mem_rsp_bits_instruction_data[31:0];
  assign io_aligned_fetch_packet_bits_instructions_2_instruction =
    io_mem_rsp_bits_instruction_data[95:64];
endmodule

