// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ROB_WB_mem(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeDataA_busy,
               io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeDataB_busy,
               io_writeEnableB,
  input  [5:0] io_addrC,
  input        io_writeDataC_busy,
               io_writeEnableC,
  input  [5:0] io_addrD,
  input        io_writeDataD_busy,
               io_writeEnableD,
  input  [5:0] io_addrE,
  input        io_writeDataE_busy,
               io_writeEnableE,
  input  [5:0] io_addrG,
  output       io_readDataG_busy
);

  mem_busy_64x1 mem_busy_ext (
    .R0_addr (io_addrG),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_readDataG_busy),
    .W0_addr (io_addrE),
    .W0_en   (io_writeEnableE),
    .W0_clk  (clock),
    .W0_data (io_writeDataE_busy),
    .W1_addr (io_addrD),
    .W1_en   (io_writeEnableD),
    .W1_clk  (clock),
    .W1_data (io_writeDataD_busy),
    .W2_addr (io_addrC),
    .W2_en   (io_writeEnableC),
    .W2_clk  (clock),
    .W2_data (io_writeDataC_busy),
    .W3_addr (io_addrB),
    .W3_en   (io_writeEnableB),
    .W3_clk  (clock),
    .W3_data (io_writeDataB_busy),
    .W4_addr (io_addrA),
    .W4_en   (io_writeEnableA),
    .W4_clk  (clock),
    .W4_data (io_writeDataA_busy)
  );
endmodule

