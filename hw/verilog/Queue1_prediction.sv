// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue1_prediction(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_hit,
  input  [31:0] io_enq_bits_target,
  input  [2:0]  io_enq_bits_br_type,
  input         io_enq_bits_br_mask_0,
                io_enq_bits_br_mask_1,
                io_enq_bits_br_mask_2,
                io_enq_bits_br_mask_3,
                io_deq_ready,
  output        io_deq_valid,
                io_deq_bits_hit,
  output [31:0] io_deq_bits_target,
  output [2:0]  io_deq_bits_br_type,
  output        io_deq_bits_br_mask_0,
                io_deq_bits_br_mask_1,
                io_deq_bits_br_mask_2,
                io_deq_bits_br_mask_3,
  input         io_flush
);

  reg  [39:0] ram;
  reg         full;
  wire        io_deq_valid_0 = io_enq_valid | full;
  wire        do_enq = ~(~full & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (do_enq)
      ram <=
        {io_enq_bits_br_mask_3,
         io_enq_bits_br_mask_2,
         io_enq_bits_br_mask_1,
         io_enq_bits_br_mask_0,
         io_enq_bits_br_type,
         io_enq_bits_target,
         io_enq_bits_hit};
    if (reset)
      full <= 1'h0;
    else
      full <=
        ~io_flush & (do_enq == (full & io_deq_ready & io_deq_valid_0) ? full : do_enq);
  end // always @(posedge)
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_hit = full ? ram[0] : io_enq_bits_hit;
  assign io_deq_bits_target = full ? ram[32:1] : io_enq_bits_target;
  assign io_deq_bits_br_type = full ? ram[35:33] : io_enq_bits_br_type;
  assign io_deq_bits_br_mask_0 = full ? ram[36] : io_enq_bits_br_mask_0;
  assign io_deq_bits_br_mask_1 = full ? ram[37] : io_enq_bits_br_mask_1;
  assign io_deq_bits_br_mask_2 = full ? ram[38] : io_enq_bits_br_mask_2;
  assign io_deq_bits_br_mask_3 = full ? ram[39] : io_enq_bits_br_mask_3;
endmodule

