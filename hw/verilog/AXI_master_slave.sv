// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module AXI_master_slave(
  input clock,
        reset
);

  wire        _axi_ram_s_axi_awready;
  wire        _axi_ram_s_axi_wready;
  wire [7:0]  _axi_ram_s_axi_bid;
  wire        _axi_ram_s_axi_bresp;
  wire        _axi_ram_s_axi_bvalid;
  wire        _axi_ram_s_axi_arready;
  wire [7:0]  _axi_ram_s_axi_rid;
  wire [31:0] _axi_ram_s_axi_rdata;
  wire [1:0]  _axi_ram_s_axi_rresp;
  wire        _axi_ram_s_axi_rlast;
  wire        _axi_ram_s_axi_rvalid;
  wire
    struct packed {logic [7:0] m_axi_awid; logic [31:0] m_axi_awaddr; logic [7:0] m_axi_awlen; logic [2:0] m_axi_awsize; logic [1:0] m_axi_awburst; logic m_axi_awlock; logic [3:0] m_axi_awcache; logic [2:0] m_axi_awprot; }
    _AXI_master_AXI_AW_bits;
  wire        _AXI_master_AXI_W_valid;
  wire
    struct packed {logic [31:0] m_axi_wdata; logic [3:0] m_axi_wstrb; logic m_axi_wlast; }
    _AXI_master_AXI_W_bits;
  wire        _AXI_master_AXI_B_ready;
  wire        _AXI_master_AXI_AR_valid;
  wire
    struct packed {logic [7:0] m_axi_arid; logic [31:0] m_axi_araddr; logic [7:0] m_axi_arlen; logic [2:0] m_axi_arsize; logic [1:0] m_axi_arburst; logic m_axi_arlock; logic [3:0] m_axi_arcache; logic [2:0] m_axi_arprot; }
    _AXI_master_AXI_AR_bits;
  wire        _AXI_master_AXI_R_ready;
  wire struct packed {logic [7:0] m_axi_bid; logic [1:0] m_axi_bresp; } _GEN =
    '{m_axi_bid: _axi_ram_s_axi_bid, m_axi_bresp: {1'h0, _axi_ram_s_axi_bresp}};
  wire
    struct packed {logic [7:0] m_axi_rid; logic [31:0] m_axi_rdata; logic [1:0] m_axi_rresp; logic m_axi_rlast; }
    _GEN_0 =
    '{m_axi_rid: _axi_ram_s_axi_rid,
      m_axi_rdata: _axi_ram_s_axi_rdata,
      m_axi_rresp: _axi_ram_s_axi_rresp,
      m_axi_rlast: _axi_ram_s_axi_rlast};
  AXI_master AXI_master (
    .clock        (clock),
    .reset        (reset),
    .AXI_AW_ready (_axi_ram_s_axi_awready),
    .AXI_AW_bits  (_AXI_master_AXI_AW_bits),
    .AXI_W_ready  (_axi_ram_s_axi_wready),
    .AXI_W_valid  (_AXI_master_AXI_W_valid),
    .AXI_W_bits   (_AXI_master_AXI_W_bits),
    .AXI_B_ready  (_AXI_master_AXI_B_ready),
    .AXI_B_valid  (_axi_ram_s_axi_bvalid),
    .AXI_B_bits   (_GEN),
    .AXI_AR_ready (_axi_ram_s_axi_arready),
    .AXI_AR_valid (_AXI_master_AXI_AR_valid),
    .AXI_AR_bits  (_AXI_master_AXI_AR_bits),
    .AXI_R_ready  (_AXI_master_AXI_R_ready),
    .AXI_R_valid  (_axi_ram_s_axi_rvalid),
    .AXI_R_bits   (_GEN_0)
  );
  axi_ram axi_ram (
    .clock         (clock),
    .reset         (reset),
    .s_axi_awid    (_AXI_master_AXI_AW_bits.m_axi_awid),
    .s_axi_awaddr  (_AXI_master_AXI_AW_bits.m_axi_awaddr),
    .s_axi_awlen   (_AXI_master_AXI_AW_bits.m_axi_awlen),
    .s_axi_awsize  (_AXI_master_AXI_AW_bits.m_axi_awsize),
    .s_axi_awburst (_AXI_master_AXI_AW_bits.m_axi_awburst),
    .s_axi_awlock  (_AXI_master_AXI_AW_bits.m_axi_awlock),
    .s_axi_awcache (_AXI_master_AXI_AW_bits.m_axi_awcache),
    .s_axi_awprot  (_AXI_master_AXI_AW_bits.m_axi_awprot),
    .s_axi_awvalid (1'h1),
    .s_axi_awready (_axi_ram_s_axi_awready),
    .s_axi_wdata   (_AXI_master_AXI_W_bits.m_axi_wdata),
    .s_axi_wstrb   (_AXI_master_AXI_W_bits.m_axi_wstrb),
    .s_axi_wlast   (_AXI_master_AXI_W_bits.m_axi_wlast),
    .s_axi_wvalid  (_AXI_master_AXI_W_valid),
    .s_axi_wready  (_axi_ram_s_axi_wready),
    .s_axi_bid     (_axi_ram_s_axi_bid),
    .s_axi_bresp   (_axi_ram_s_axi_bresp),
    .s_axi_bvalid  (_axi_ram_s_axi_bvalid),
    .s_axi_bready  (_AXI_master_AXI_B_ready),
    .s_axi_arid    (_AXI_master_AXI_AR_bits.m_axi_arid),
    .s_axi_araddr  (_AXI_master_AXI_AR_bits.m_axi_araddr),
    .s_axi_arlen   (_AXI_master_AXI_AR_bits.m_axi_arlen),
    .s_axi_arsize  (_AXI_master_AXI_AR_bits.m_axi_arsize),
    .s_axi_arburst (_AXI_master_AXI_AR_bits.m_axi_arburst),
    .s_axi_arlock  (_AXI_master_AXI_AR_bits.m_axi_arlock),
    .s_axi_arcache (_AXI_master_AXI_AR_bits.m_axi_arcache),
    .s_axi_arprot  (_AXI_master_AXI_AR_bits.m_axi_arprot),
    .s_axi_arvalid (_AXI_master_AXI_AR_valid),
    .s_axi_arready (_axi_ram_s_axi_arready),
    .s_axi_rid     (_axi_ram_s_axi_rid),
    .s_axi_rdata   (_axi_ram_s_axi_rdata),
    .s_axi_rresp   (_axi_ram_s_axi_rresp),
    .s_axi_rlast   (_axi_ram_s_axi_rlast),
    .s_axi_rvalid  (_axi_ram_s_axi_rvalid),
    .s_axi_rready  (_AXI_master_AXI_R_ready)
  );
endmodule

