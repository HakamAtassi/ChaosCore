// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ChaosCore_tile(
  input                                                                                                                                                                                                                                    clock,
                                                                                                                                                                                                                                           reset,
                                                                                                                                                                                                                                           io_instruction_cache_AXI_port_AXI_AW_ready,
  output                                                                                                                                                                                                                                   io_instruction_cache_AXI_port_AXI_AW_valid,
  output struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_instruction_cache_AXI_port_AXI_AW_bits,
  input                                                                                                                                                                                                                                    io_instruction_cache_AXI_port_AXI_W_ready,
  output                                                                                                                                                                                                                                   io_instruction_cache_AXI_port_AXI_W_valid,
  output struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_instruction_cache_AXI_port_AXI_W_bits,
  output                                                                                                                                                                                                                                   io_instruction_cache_AXI_port_AXI_B_ready,
  input                                                                                                                                                                                                                                    io_instruction_cache_AXI_port_AXI_B_valid,
  input  struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_instruction_cache_AXI_port_AXI_B_bits,
  input                                                                                                                                                                                                                                    io_instruction_cache_AXI_port_AXI_AR_ready,
  output                                                                                                                                                                                                                                   io_instruction_cache_AXI_port_AXI_AR_valid,
  output struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_instruction_cache_AXI_port_AXI_AR_bits,
  output                                                                                                                                                                                                                                   io_instruction_cache_AXI_port_AXI_R_ready,
  input                                                                                                                                                                                                                                    io_instruction_cache_AXI_port_AXI_R_valid,
  input  struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_instruction_cache_AXI_port_AXI_R_bits,
  input                                                                                                                                                                                                                                    io_data_cache_AXI_port_AXI_AW_ready,
  output                                                                                                                                                                                                                                   io_data_cache_AXI_port_AXI_AW_valid,
  output struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } io_data_cache_AXI_port_AXI_AW_bits,
  input                                                                                                                                                                                                                                    io_data_cache_AXI_port_AXI_W_ready,
  output                                                                                                                                                                                                                                   io_data_cache_AXI_port_AXI_W_valid,
  output struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 io_data_cache_AXI_port_AXI_W_bits,
  output                                                                                                                                                                                                                                   io_data_cache_AXI_port_AXI_B_ready,
  input                                                                                                                                                                                                                                    io_data_cache_AXI_port_AXI_B_valid,
  input  struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 io_data_cache_AXI_port_AXI_B_bits,
  input                                                                                                                                                                                                                                    io_data_cache_AXI_port_AXI_AR_ready,
  output                                                                                                                                                                                                                                   io_data_cache_AXI_port_AXI_AR_valid,
  output struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } io_data_cache_AXI_port_AXI_AR_bits,
  output                                                                                                                                                                                                                                   io_data_cache_AXI_port_AXI_R_ready,
  input                                                                                                                                                                                                                                    io_data_cache_AXI_port_AXI_R_valid,
  input  struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                io_data_cache_AXI_port_AXI_R_bits
);

  wire _data_cache_io_backend_memory_request_ready;
  wire _data_cache_io_backend_memory_response_valid;
  wire struct packed {logic [31:0] data; logic [3:0] MOB_index; }
    _data_cache_io_backend_memory_response_bits;
  wire _instruction_cache_io_CPU_request_ready;
  wire _instruction_cache_io_CPU_response_valid;
  wire
    struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    _instruction_cache_io_CPU_response_bits;
  wire
    struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }
    _GEN =
    '{addr: 32'h0, data: 32'h0, memory_type: 2'h0, access_width: 2'h0, MOB_index: 4'h0};
  ChaosCore ChaosCore (
    .clock                             (clock),
    .reset                             (reset),
    .io_commit                         (/* unused */),
    .io_flush                          (/* unused */),
    .io_revert                         (/* unused */),
    .io_frontend_memory_request_ready  (_instruction_cache_io_CPU_request_ready),
    .io_frontend_memory_request_valid  (/* unused */),
    .io_frontend_memory_request_bits   (/* unused */),
    .io_frontend_memory_response_ready (/* unused */),
    .io_frontend_memory_response_valid (_instruction_cache_io_CPU_response_valid),
    .io_frontend_memory_response_bits  (_instruction_cache_io_CPU_response_bits),
    .io_backend_memory_request_ready   (_data_cache_io_backend_memory_request_ready),
    .io_backend_memory_request_valid   (/* unused */),
    .io_backend_memory_request_bits    (/* unused */),
    .io_backend_memory_response_ready  (/* unused */),
    .io_backend_memory_response_valid  (_data_cache_io_backend_memory_response_valid),
    .io_backend_memory_response_bits   (_data_cache_io_backend_memory_response_bits)
  );
  L1_instruction_cache instruction_cache (
    .clock                 (clock),
    .reset                 (reset),
    .AXI_port_AXI_AW_ready (io_instruction_cache_AXI_port_AXI_AW_ready),
    .AXI_port_AXI_AW_bits  (io_instruction_cache_AXI_port_AXI_AW_bits),
    .AXI_port_AXI_W_ready  (io_instruction_cache_AXI_port_AXI_W_ready),
    .AXI_port_AXI_W_valid  (io_instruction_cache_AXI_port_AXI_W_valid),
    .AXI_port_AXI_W_bits   (io_instruction_cache_AXI_port_AXI_W_bits),
    .AXI_port_AXI_B_ready  (io_instruction_cache_AXI_port_AXI_B_ready),
    .AXI_port_AXI_B_valid  (io_instruction_cache_AXI_port_AXI_B_valid),
    .AXI_port_AXI_B_bits   (io_instruction_cache_AXI_port_AXI_B_bits),
    .AXI_port_AXI_AR_ready (io_instruction_cache_AXI_port_AXI_AR_ready),
    .AXI_port_AXI_AR_valid (io_instruction_cache_AXI_port_AXI_AR_valid),
    .AXI_port_AXI_AR_bits  (io_instruction_cache_AXI_port_AXI_AR_bits),
    .AXI_port_AXI_R_ready  (io_instruction_cache_AXI_port_AXI_R_ready),
    .AXI_port_AXI_R_valid  (io_instruction_cache_AXI_port_AXI_R_valid),
    .AXI_port_AXI_R_bits   (io_instruction_cache_AXI_port_AXI_R_bits),
    .io_CPU_request_ready  (_instruction_cache_io_CPU_request_ready),
    .io_CPU_response_ready (1'h0),
    .io_CPU_response_valid (_instruction_cache_io_CPU_response_valid),
    .io_CPU_response_bits  (_instruction_cache_io_CPU_response_bits)
  );
  L1_data_cache data_cache (
    .clock                            (clock),
    .reset                            (reset),
    .AXI_port_AXI_AW_ready            (io_data_cache_AXI_port_AXI_AW_ready),
    .AXI_port_AXI_AW_valid            (io_data_cache_AXI_port_AXI_AW_valid),
    .AXI_port_AXI_AW_bits             (io_data_cache_AXI_port_AXI_AW_bits),
    .AXI_port_AXI_W_ready             (io_data_cache_AXI_port_AXI_W_ready),
    .AXI_port_AXI_W_valid             (io_data_cache_AXI_port_AXI_W_valid),
    .AXI_port_AXI_W_bits              (io_data_cache_AXI_port_AXI_W_bits),
    .AXI_port_AXI_B_ready             (io_data_cache_AXI_port_AXI_B_ready),
    .AXI_port_AXI_B_valid             (io_data_cache_AXI_port_AXI_B_valid),
    .AXI_port_AXI_B_bits              (io_data_cache_AXI_port_AXI_B_bits),
    .AXI_port_AXI_AR_ready            (io_data_cache_AXI_port_AXI_AR_ready),
    .AXI_port_AXI_AR_valid            (io_data_cache_AXI_port_AXI_AR_valid),
    .AXI_port_AXI_AR_bits             (io_data_cache_AXI_port_AXI_AR_bits),
    .AXI_port_AXI_R_ready             (io_data_cache_AXI_port_AXI_R_ready),
    .AXI_port_AXI_R_valid             (io_data_cache_AXI_port_AXI_R_valid),
    .AXI_port_AXI_R_bits              (io_data_cache_AXI_port_AXI_R_bits),
    .io_backend_memory_request_ready  (_data_cache_io_backend_memory_request_ready),
    .io_backend_memory_request_valid  (1'h0),
    .io_backend_memory_request_bits   (_GEN),
    .io_backend_memory_response_ready (1'h0),
    .io_backend_memory_response_valid (_data_cache_io_backend_memory_response_valid),
    .io_backend_memory_response_bits  (_data_cache_io_backend_memory_response_bits)
  );
  assign io_instruction_cache_AXI_port_AXI_AW_valid = 1'h0;
endmodule

