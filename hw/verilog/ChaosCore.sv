// Generated by CIRCT firtool-1.76.0
module ChaosCore(
  input                                                                                                                                                                                                                                                                                                                                                                                                      clock,
                                                                                                                                                                                                                                                                                                                                                                                                             reset,
  output struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; } io_commit,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_flush,
  output struct packed {logic valid; struct packed {logic [31:0] PC; } bits; }                                                                                                                                                                                                                                                                                                                               io_revert,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_frontend_memory_response_ready,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_frontend_memory_response_valid,
  input  struct packed {logic [31:0] fetch_PC; logic [3:0] valid_bits; struct packed {logic [31:0] instruction; logic [3:0] packet_index; logic [5:0] ROB_index; }[3:0] instructions; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }                                                                                                                                                                 io_frontend_memory_response_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_frontend_memory_request_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_frontend_memory_request_valid,
  output struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; }                                                                                                                                                                                                                                                                                                                              io_frontend_memory_request_bits,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_backend_memory_response_ready,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_backend_memory_response_valid,
  input  struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }                                                                                                                                                                                                                                                                    io_backend_memory_response_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                      io_backend_memory_request_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                     io_backend_memory_request_valid,
  output struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }                                                                                                                                                                                                                                                                    io_backend_memory_request_bits
);

  wire [3:0]  needs_MEMRS;
  wire [3:0]  needs_INTRS;
  wire
    struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; }
    _BRU_io_commit;
  wire        _ROB_io_ROB_packet_ready;
  wire
    struct packed {logic row_valid; logic [31:0] fetch_PC; logic [5:0] ROB_index; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; logic [7:0] free_list_front_pointer; struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }[3:0] ROB_entries; logic [3:0] complete; logic [3:0] exception; }
    _ROB_io_ROB_output;
  wire [5:0]  _ROB_io_ROB_index;
  wire [31:0] _ROB_io_PC_file_exec_data;
  wire        _FTQ_io_predictions_ready;
  wire
    struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }
    _FTQ_io_FTQ;
  wire [3:0]  _FTQ_io_FTQ_index;
  wire [5:0]  _backend_io_PC_file_exec_addr;
  wire [3:0]  _backend_io_MEMRS_ready;
  wire [3:0]  _backend_io_INTRS_ready;
  wire [3:0]  _backend_io_MOB_ready;
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }[3:0]
    _backend_io_FU_outputs;
  wire        _frontend_io_predictions_valid;
  wire
    struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }
    _frontend_io_predictions_bits;
  wire        _frontend_io_renamed_decoded_fetch_packet_valid;
  wire
    struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; }
    _frontend_io_renamed_decoded_fetch_packet_bits;
  wire        flush = _BRU_io_commit.valid & _BRU_io_commit.bits.is_misprediction;
  wire [3:0]  _GEN = _frontend_io_renamed_decoded_fetch_packet_bits.valid_bits;
  assign needs_INTRS =
    {{_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS_type == 2'h0},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS_type == 2'h0},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS_type == 2'h0},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS_type == 2'h0}}
    & _GEN;
  assign needs_MEMRS =
    {{_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS_type == 2'h1},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS_type == 2'h1},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS_type == 2'h1},
     {_frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS_type == 2'h1}}
    & _GEN;
  wire        all_INT_RS_accepted =
    {1'h0, {1'h0, _backend_io_INTRS_ready[2'h0]} + {1'h0, _backend_io_INTRS_ready[2'h1]}}
    + {1'h0,
       {1'h0, _backend_io_INTRS_ready[2'h2]}
         + {1'h0,
            _backend_io_INTRS_ready[2'h3]}} >= {1'h0,
                                                {1'h0, needs_INTRS[2'h0]}
                                                  + {1'h0, needs_INTRS[2'h1]}}
    + {1'h0, {1'h0, needs_INTRS[2'h2]} + {1'h0, needs_INTRS[2'h3]}};
  wire [2:0]  _GEN_0 = {1'h0, {1'h0, needs_MEMRS[2'h0]} + {1'h0, needs_MEMRS[2'h1]}};
  wire [2:0]  _GEN_1 = {1'h0, {1'h0, needs_MEMRS[2'h2]} + {1'h0, needs_MEMRS[2'h3]}};
  wire        all_MEM_RS_accepted =
    {1'h0, {1'h0, _backend_io_MEMRS_ready[2'h0]} + {1'h0, _backend_io_MEMRS_ready[2'h1]}}
    + {1'h0,
       {1'h0, _backend_io_MEMRS_ready[2'h2]}
         + {1'h0, _backend_io_MEMRS_ready[2'h3]}} >= _GEN_0 + _GEN_1
    & {1'h0, {1'h0, _backend_io_MOB_ready[2'h0]} + {1'h0, _backend_io_MOB_ready[2'h1]}}
    + {1'h0,
       {1'h0, _backend_io_MOB_ready[2'h2]}
         + {1'h0, _backend_io_MOB_ready[2'h3]}} >= _GEN_0 + _GEN_1;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _GEN_2 =
    '{ready_bits:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].ready_bits,
      RDold:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RDold,
      RD: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RD,
      RD_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RD_valid,
      RS1: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS1,
      RS1_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS1_valid,
      RS2: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS2,
      RS2_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS2_valid,
      IMM: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].IMM,
      FUNCT3:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].FUNCT3,
      packet_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].packet_index,
      ROB_index: _ROB_io_ROB_index,
      MOB_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].MOB_index,
      FTQ_index: _FTQ_io_FTQ_index,
      instructionType:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].instructionType,
      portID:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].portID,
      RS_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].RS_type,
      needs_ALU:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].needs_ALU,
      needs_branch_unit:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].needs_branch_unit,
      needs_CSRs:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].needs_CSRs,
      SUBTRACT:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].SUBTRACT,
      MULTIPLY:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].MULTIPLY,
      IS_IMM:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].IS_IMM,
      memory_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].memory_type,
      access_width:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h0].access_width};
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _GEN_3 =
    '{ready_bits:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].ready_bits,
      RDold:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RDold,
      RD: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RD,
      RD_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RD_valid,
      RS1: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS1,
      RS1_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS1_valid,
      RS2: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS2,
      RS2_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS2_valid,
      IMM: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].IMM,
      FUNCT3:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].FUNCT3,
      packet_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].packet_index,
      ROB_index: _ROB_io_ROB_index,
      MOB_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].MOB_index,
      FTQ_index: _FTQ_io_FTQ_index,
      instructionType:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].instructionType,
      portID:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].portID,
      RS_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].RS_type,
      needs_ALU:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].needs_ALU,
      needs_branch_unit:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].needs_branch_unit,
      needs_CSRs:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].needs_CSRs,
      SUBTRACT:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].SUBTRACT,
      MULTIPLY:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].MULTIPLY,
      IS_IMM:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].IS_IMM,
      memory_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].memory_type,
      access_width:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h1].access_width};
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _GEN_4 =
    '{ready_bits:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].ready_bits,
      RDold:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RDold,
      RD: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RD,
      RD_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RD_valid,
      RS1: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS1,
      RS1_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS1_valid,
      RS2: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS2,
      RS2_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS2_valid,
      IMM: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].IMM,
      FUNCT3:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].FUNCT3,
      packet_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].packet_index,
      ROB_index: _ROB_io_ROB_index,
      MOB_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].MOB_index,
      FTQ_index: _FTQ_io_FTQ_index,
      instructionType:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].instructionType,
      portID:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].portID,
      RS_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].RS_type,
      needs_ALU:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].needs_ALU,
      needs_branch_unit:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].needs_branch_unit,
      needs_CSRs:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].needs_CSRs,
      SUBTRACT:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].SUBTRACT,
      MULTIPLY:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].MULTIPLY,
      IS_IMM:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].IS_IMM,
      memory_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].memory_type,
      access_width:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h2].access_width};
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _GEN_5 =
    '{ready_bits:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].ready_bits,
      RDold:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RDold,
      RD: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RD,
      RD_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RD_valid,
      RS1: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS1,
      RS1_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS1_valid,
      RS2: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS2,
      RS2_valid:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS2_valid,
      IMM: _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].IMM,
      FUNCT3:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].FUNCT3,
      packet_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].packet_index,
      ROB_index: _ROB_io_ROB_index,
      MOB_index:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].MOB_index,
      FTQ_index: _FTQ_io_FTQ_index,
      instructionType:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].instructionType,
      portID:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].portID,
      RS_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].RS_type,
      needs_ALU:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].needs_ALU,
      needs_branch_unit:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].needs_branch_unit,
      needs_CSRs:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].needs_CSRs,
      SUBTRACT:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].SUBTRACT,
      MULTIPLY:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].MULTIPLY,
      IS_IMM:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].IS_IMM,
      memory_type:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].memory_type,
      access_width:
        _frontend_io_renamed_decoded_fetch_packet_bits.decoded_instruction[2'h3].access_width};
  wire
    struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; }
    _GEN_6 =
    '{fetch_PC: _frontend_io_renamed_decoded_fetch_packet_bits.fetch_PC,
      decoded_instruction: ({{_GEN_5}, {_GEN_4}, {_GEN_3}, {_GEN_2}}),
      valid_bits: _frontend_io_renamed_decoded_fetch_packet_bits.valid_bits,
      GHR: _frontend_io_renamed_decoded_fetch_packet_bits.GHR,
      TOS: _frontend_io_renamed_decoded_fetch_packet_bits.TOS,
      NEXT: _frontend_io_renamed_decoded_fetch_packet_bits.NEXT,
      free_list_front_pointer:
        _frontend_io_renamed_decoded_fetch_packet_bits.free_list_front_pointer};
  frontend frontend (
    .clock                                 (clock),
    .reset                                 (reset),
    .io_flush                              (flush),
    .io_memory_request_ready               (io_frontend_memory_request_ready),
    .io_memory_request_valid               (io_frontend_memory_request_valid),
    .io_memory_request_bits                (io_frontend_memory_request_bits),
    .io_memory_response_ready              (io_frontend_memory_response_ready),
    .io_memory_response_valid              (io_frontend_memory_response_valid),
    .io_memory_response_bits               (io_frontend_memory_response_bits),
    .io_commit                             (_BRU_io_commit),
    .io_predictions_ready                  (_FTQ_io_predictions_ready),
    .io_predictions_valid                  (_frontend_io_predictions_valid),
    .io_predictions_bits                   (_frontend_io_predictions_bits),
    .io_renamed_decoded_fetch_packet_ready
      (_ROB_io_ROB_packet_ready & all_INT_RS_accepted & all_MEM_RS_accepted),
    .io_renamed_decoded_fetch_packet_valid
      (_frontend_io_renamed_decoded_fetch_packet_valid),
    .io_renamed_decoded_fetch_packet_bits
      (_frontend_io_renamed_decoded_fetch_packet_bits),
    .io_FU_outputs                         (_backend_io_FU_outputs),
    .io_revert                             (io_revert)
  );
  backend backend (
    .clock                            (clock),
    .reset                            (reset),
    .io_flush                         (flush),
    .io_backend_memory_response_ready (io_backend_memory_response_ready),
    .io_backend_memory_response_valid (io_backend_memory_response_valid),
    .io_backend_memory_response_bits  (io_backend_memory_response_bits),
    .io_backend_memory_request_ready  (io_backend_memory_request_ready),
    .io_backend_memory_request_valid  (io_backend_memory_request_valid),
    .io_backend_memory_request_bits   (io_backend_memory_request_bits),
    .io_commit                        (_BRU_io_commit),
    .io_PC_file_exec_addr             (_backend_io_PC_file_exec_addr),
    .io_PC_file_exec_data             (_ROB_io_PC_file_exec_data),
    .io_fetch_PC
      (_frontend_io_renamed_decoded_fetch_packet_bits.fetch_PC),
    .io_backend_packet_valid          (_frontend_io_renamed_decoded_fetch_packet_valid),
    .io_backend_packet_bits           (_GEN_6),
    .io_MEMRS_ready                   (_backend_io_MEMRS_ready),
    .io_INTRS_ready                   (_backend_io_INTRS_ready),
    .io_MOB_ready                     (_backend_io_MOB_ready),
    .io_FU_outputs                    (_backend_io_FU_outputs)
  );
  FTQ FTQ (
    .clock                (clock),
    .reset                (reset),
    .io_flush             (flush),
    .io_FU_outputs        (_backend_io_FU_outputs),
    .io_predictions_ready (_FTQ_io_predictions_ready),
    .io_predictions_valid (_frontend_io_predictions_valid),
    .io_predictions_bits  (_frontend_io_predictions_bits),
    .io_ROB_index         (_ROB_io_ROB_index),
    .io_commit            (_BRU_io_commit),
    .io_FTQ               (_FTQ_io_FTQ),
    .io_FTQ_index         (_FTQ_io_FTQ_index)
  );
  ROB ROB (
    .clock                (clock),
    .reset                (reset),
    .io_flush             (flush),
    .io_ROB_packet_ready  (_ROB_io_ROB_packet_ready),
    .io_ROB_packet_valid
      (_frontend_io_renamed_decoded_fetch_packet_valid & all_INT_RS_accepted
       & all_MEM_RS_accepted),
    .io_ROB_packet_bits   (_frontend_io_renamed_decoded_fetch_packet_bits),
    .io_FU_outputs        (_backend_io_FU_outputs),
    .io_ROB_output        (_ROB_io_ROB_output),
    .io_commit            (_BRU_io_commit),
    .io_ROB_index         (_ROB_io_ROB_index),
    .io_PC_file_exec_addr (_backend_io_PC_file_exec_addr),
    .io_PC_file_exec_data (_ROB_io_PC_file_exec_data)
  );
  BRU BRU (
    .io_FTQ        (_FTQ_io_FTQ),
    .io_ROB_output (_ROB_io_ROB_output),
    .io_commit     (_BRU_io_commit)
  );
  assign io_commit = _BRU_io_commit;
  assign io_flush = flush;
endmodule

