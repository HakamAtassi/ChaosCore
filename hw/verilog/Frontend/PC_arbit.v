// Generated by CIRCT firtool-1.62.0
module PC_arbit(
  input         clock,
                reset,
                io_commit_valid,
  input  [31:0] io_commit_fetch_PC,
  input         io_commit_T_NT,
  input  [5:0]  io_commit_ROB_index,
  input  [2:0]  io_commit_br_type,
  input  [1:0]  io_commit_fetch_packet_index,
  input         io_commit_is_misprediction,
  input  [31:0] io_commit_expected_PC,
  input  [15:0] io_commit_GHR,
  input  [6:0]  io_commit_TOS,
                io_commit_NEXT,
  input  [3:0]  io_commit_RAT_index,
  output        io_prediction_ready,
  input         io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [2:0]  io_prediction_bits_br_type,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [15:0] io_prediction_bits_GHR,
  input         io_prediction_bits_T_NT,
  output        io_revert_ready,
  input         io_revert_valid,
  input  [15:0] io_revert_bits_GHR,
  input  [31:0] io_revert_bits_PC,
  input  [6:0]  io_RAS_read_NEXT,
                io_RAS_read_TOS,
  input  [31:0] io_RAS_read_ret_addr,
  input         io_PC_next_ready,
  output        io_PC_next_valid,
  output [31:0] io_PC_next_bits
);

  wire [31:0] io_PC_next_bits_0;
  wire        misprediction;
  wire        use_revert_PC = io_revert_valid;
  reg  [31:0] PC;
  reg  [31:0] correction_address_reg;
  wire        correct_stage_active = misprediction | io_revert_valid;
  assign misprediction = io_commit_is_misprediction & io_commit_valid;
  wire        is_ret = io_prediction_bits_br_type == 3'h4;
  wire [31:0] correction_address =
    use_revert_PC
      ? io_revert_bits_PC
      : misprediction & io_commit_valid & io_commit_is_misprediction
          ? io_commit_expected_PC
          : 32'h0;
  reg         REG;
  assign io_PC_next_bits_0 =
    REG
      ? correction_address_reg
      : io_prediction_valid & io_prediction_bits_hit & ~is_ret & ~correct_stage_active
          ? io_prediction_bits_target
          : is_ret & ~correct_stage_active ? io_RAS_read_ret_addr : PC;
  wire        io_PC_next_valid_0 = ~correct_stage_active & io_PC_next_ready;
  always @(posedge clock) begin
    if (reset) begin
      PC <= 32'h0;
      correction_address_reg <= 32'h0;
    end
    else begin
      if (correct_stage_active)
        PC <= correction_address;
      else if (io_PC_next_valid_0)
        PC <= io_PC_next_bits_0 + {27'h0, 3'h4 - {1'h0, io_PC_next_bits_0[3:2]}, 2'h0};
      correction_address_reg <= correction_address;
    end
    REG <= correct_stage_active;
  end // always @(posedge)
  assign io_prediction_ready = 1'h1;
  assign io_revert_ready = 1'h1;
  assign io_PC_next_valid = io_PC_next_valid_0;
  assign io_PC_next_bits = io_PC_next_bits_0;
endmodule

