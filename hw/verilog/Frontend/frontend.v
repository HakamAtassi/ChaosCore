// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module mem_2x2(
  input        R0_addr,
               R0_en,
               R0_clk,
  output [1:0] R0_data,
  input        W0_addr,
               W0_en,
               W0_clk,
  input  [1:0] W0_data
);

  reg [1:0] Memory[0:1];
  reg       _R0_en_d0;
  reg       _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
endmodule

module SDPReadWriteSmem(
  input        clock,
               reset,
               io_rd_addr,
  output [1:0] io_data_out,
  input        io_wr_addr,
               io_wr_en,
  input  [1:0] io_data_in
);

  wire [1:0] _mem_ext_R0_data;
  reg        hazard_reg;
  reg  [1:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 2'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_2x2 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

// VCS coverage exclude_file
module ram_2x283(
  input          R0_addr,
                 R0_en,
                 R0_clk,
  output [282:0] R0_data,
  input          W0_addr,
                 W0_en,
                 W0_clk,
  input  [282:0] W0_data
);

  reg [282:0] Memory[0:1];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 283'bx;
endmodule

module ReadWriteSmem(
  input          clock,
                 io_wr_en,
                 io_addr,
  input  [282:0] io_data_in,
  output [282:0] io_data_out
);

  wire [282:0] _ram_ext_R0_data;
  reg  [282:0] dataOut;
  always @(posedge clock)
    dataOut <= _ram_ext_R0_data;
  ram_2x283 ram_ext (
    .R0_addr (io_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (io_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = dataOut;
endmodule

module instruction_validator(
  input  [1:0] io_instruction_index,
  output [3:0] io_instruction_output
);

  wire [3:0][3:0] _GEN = '{4'h1, 4'h3, 4'h7, 4'hF};
  assign io_instruction_output = _GEN[io_instruction_index];
endmodule

module L1_instruction_cache(
  input          clock,
                 reset,
  output         io_cpu_addr_ready,
  input          io_cpu_addr_valid,
  input  [31:0]  io_cpu_addr_bits,
  input          io_dram_data_valid,
  input  [255:0] io_dram_data_bits,
  input          io_kill,
  output         io_cache_data_valid,
  output [31:0]  io_cache_data_bits_fetch_PC,
  output         io_cache_data_bits_valid_bits_0,
                 io_cache_data_bits_valid_bits_1,
                 io_cache_data_bits_valid_bits_2,
                 io_cache_data_bits_valid_bits_3
);

  wire         miss;
  wire [1:0]   hit_oh;
  wire [29:0]  current_addr;
  wire [3:0]   _validator_io_instruction_output;
  wire [282:0] _data_memory_1_io_data_out;
  wire [282:0] _data_memory_0_io_data_out;
  wire [1:0]   _LRU_memory_io_data_out;
  reg  [1:0]   cache_state;
  reg  [31:0]  replay_addr;
  reg  [25:0]  replay_tag;
  reg          replay_valid;
  reg  [31:0]  fetch_PC_buf;
  reg  [25:0]  replay_tag_REG;
  assign current_addr =
    (|cache_state) | miss ? replay_addr[31:2] : io_cpu_addr_bits[31:2];
  wire [282:0] current_data = {1'h1, replay_tag, io_dram_data_bits};
  reg          LRU_memory_io_wr_addr_REG;
  wire [1:0]   allocate_way =
    _LRU_memory_io_data_out[1] ? {1'h0, ~(_LRU_memory_io_data_out[0])} : 2'h2;
  reg  [25:0]  hit_oh_vec_0_REG;
  reg  [25:0]  hit_oh_vec_1_REG;
  assign hit_oh =
    {_data_memory_1_io_data_out[281:256] == hit_oh_vec_1_REG
       & _data_memory_1_io_data_out[282],
     _data_memory_0_io_data_out[281:256] == hit_oh_vec_0_REG
       & _data_memory_0_io_data_out[282]};
  reg          hit_REG;
  reg          hit_REG_1;
  reg          hit_REG_2;
  reg          hit_REG_3;
  wire         hit = (|hit_oh) & (hit_REG | hit_REG_1) & ~hit_REG_2 & ~hit_REG_3;
  reg          miss_REG;
  reg          miss_REG_1;
  reg          miss_REG_2;
  reg          miss_REG_3;
  assign miss = ~(|hit_oh) & (miss_REG | miss_REG_1) & ~miss_REG_2 & ~miss_REG_3;
  reg          io_cache_data_bits_valid_bits_0_REG;
  reg          io_cache_data_bits_valid_bits_1_REG;
  reg          io_cache_data_bits_valid_bits_2_REG;
  reg          io_cache_data_bits_valid_bits_3_REG;
  always @(posedge clock) begin
    if (reset) begin
      cache_state <= 2'h0;
      replay_addr <= 32'h0;
      replay_tag <= 26'h0;
      replay_valid <= 1'h0;
      fetch_PC_buf <= 32'h0;
    end
    else begin
      automatic logic _GEN;
      automatic logic _GEN_0;
      _GEN = cache_state == 2'h1;
      _GEN_0 = cache_state == 2'h2;
      if (|cache_state) begin
        if (_GEN) begin
          if (io_kill)
            cache_state <= 2'h0;
          else if (io_dram_data_valid)
            cache_state <= 2'h2;
        end
        else if (_GEN_0)
          cache_state <= 2'h0;
      end
      else begin
        if (miss & ~io_kill)
          cache_state <= 2'h1;
        replay_tag <= replay_tag_REG;
      end
      if (io_cpu_addr_valid)
        replay_addr <= io_cpu_addr_bits;
      replay_valid <=
        (|cache_state) & (_GEN ? ~io_kill & io_dram_data_valid : ~_GEN_0 & replay_valid);
      if ((|cache_state) | miss) begin
      end
      else
        fetch_PC_buf <= io_cpu_addr_bits;
    end
    replay_tag_REG <= io_cpu_addr_bits[31:6];
    LRU_memory_io_wr_addr_REG <= current_addr[3];
    hit_oh_vec_0_REG <= current_addr[29:4];
    hit_oh_vec_1_REG <= current_addr[29:4];
    hit_REG <= io_cpu_addr_valid;
    hit_REG_1 <= replay_valid;
    hit_REG_2 <= io_kill;
    hit_REG_3 <= reset;
    miss_REG <= io_cpu_addr_valid;
    miss_REG_1 <= replay_valid;
    miss_REG_2 <= io_kill;
    miss_REG_3 <= reset;
    io_cache_data_bits_valid_bits_0_REG <= _validator_io_instruction_output[3];
    io_cache_data_bits_valid_bits_1_REG <= _validator_io_instruction_output[2];
    io_cache_data_bits_valid_bits_2_REG <= _validator_io_instruction_output[1];
    io_cache_data_bits_valid_bits_3_REG <= _validator_io_instruction_output[0];
  end // always @(posedge)
  SDPReadWriteSmem LRU_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (current_addr[3]),
    .io_data_out (_LRU_memory_io_data_out),
    .io_wr_addr  (LRU_memory_io_wr_addr_REG),
    .io_wr_en    (hit),
    .io_data_in
      ({2{(_LRU_memory_io_data_out | hit_oh) != 2'h3}} & _LRU_memory_io_data_out | hit_oh)
  );
  ReadWriteSmem data_memory_0 (
    .clock       (clock),
    .io_wr_en    (io_dram_data_valid & allocate_way[0]),
    .io_addr     (current_addr[3]),
    .io_data_in  (current_data),
    .io_data_out (_data_memory_0_io_data_out)
  );
  ReadWriteSmem data_memory_1 (
    .clock       (clock),
    .io_wr_en    (io_dram_data_valid & allocate_way[1]),
    .io_addr     (current_addr[3]),
    .io_data_in  (current_data),
    .io_data_out (_data_memory_1_io_data_out)
  );
  instruction_validator validator (
    .io_instruction_index  (current_addr[1:0]),
    .io_instruction_output (_validator_io_instruction_output)
  );
  assign io_cpu_addr_ready = ~(|cache_state) & ~miss;
  assign io_cache_data_valid = hit & ~io_kill;
  assign io_cache_data_bits_fetch_PC = fetch_PC_buf;
  assign io_cache_data_bits_valid_bits_0 =
    io_cache_data_bits_valid_bits_0_REG & hit & ~io_kill;
  assign io_cache_data_bits_valid_bits_1 =
    io_cache_data_bits_valid_bits_1_REG & hit & ~io_kill;
  assign io_cache_data_bits_valid_bits_2 =
    io_cache_data_bits_valid_bits_2_REG & hit & ~io_kill;
  assign io_cache_data_bits_valid_bits_3 =
    io_cache_data_bits_valid_bits_3_REG & hit & ~io_kill;
endmodule

// VCS coverage exclude_file
module mem_65536x2(
  input  [15:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [1:0]  R0_data,
  input  [15:0] R1_addr,
  input         R1_en,
                R1_clk,
  output [1:0]  R1_data,
  input  [15:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [1:0]  W0_data
);

  reg [1:0]  Memory[0:65535];
  reg        _R0_en_d0;
  reg [15:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [15:0] _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 2'bx;
endmodule

module PHT_memory(
  input         clock,
  input  [15:0] io_addrA,
  output [15:0] io_readDataA,
  input  [15:0] io_addrB,
  output [15:0] io_readDataB,
  input  [15:0] io_addrC,
  input  [1:0]  io_writeDataC,
  input         io_writeEnableC
);

  wire [1:0] _mem_ext_R0_data;
  wire [1:0] _mem_ext_R1_data;
  mem_65536x2 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_addrA),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_addrC),
    .W0_en   (io_writeEnableC),
    .W0_clk  (clock),
    .W0_data (io_writeDataC)
  );
  assign io_readDataA = {14'h0, _mem_ext_R1_data};
  assign io_readDataB = {14'h0, _mem_ext_R0_data};
endmodule

module gshare(
  input         clock,
  input  [15:0] io_predict_GHR,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_T_NT,
                io_valid,
  input  [15:0] io_commit_GHR,
  input  [31:0] io_commit_PC,
  input         io_commit_valid,
                io_commit_branch_direction
);

  wire [15:0] _PHT_io_readDataA;
  wire [15:0] _PHT_io_readDataB;
  wire [15:0] hashed_predict_addr = io_predict_PC[15:0] ^ io_predict_GHR;
  wire [15:0] hashed_commit_addr = io_commit_PC[15:0] ^ io_commit_GHR;
  reg         io_valid_REG;
  reg  [15:0] PHT_io_addrC_REG;
  reg         PHT_io_writeEnableC_REG;
  reg         REG;
  always @(posedge clock) begin
    io_valid_REG <= io_predict_valid;
    PHT_io_addrC_REG <= hashed_commit_addr;
    PHT_io_writeEnableC_REG <= io_commit_valid;
    REG <= io_commit_branch_direction;
  end // always @(posedge)
  PHT_memory PHT (
    .clock           (clock),
    .io_addrA        (hashed_predict_addr),
    .io_readDataA    (_PHT_io_readDataA),
    .io_addrB        (hashed_commit_addr),
    .io_readDataB    (_PHT_io_readDataB),
    .io_addrC        (PHT_io_addrC_REG),
    .io_writeDataC
      (REG
         ? (_PHT_io_readDataB[1:0] != 2'h3
              ? _PHT_io_readDataB[1:0] + 2'h1
              : _PHT_io_readDataB[1:0])
         : (|(_PHT_io_readDataB[1:0]))
             ? _PHT_io_readDataB[1:0] - 2'h1
             : _PHT_io_readDataB[1:0]),
    .io_writeEnableC (PHT_io_writeEnableC_REG)
  );
  assign io_T_NT = _PHT_io_readDataA[1];
  assign io_valid = io_valid_REG;
endmodule

// VCS coverage exclude_file
module mem_4096x55(
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [54:0] R0_data,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [54:0] W0_data
);

  reg [54:0] Memory[0:4095];
  reg        _R0_en_d0;
  reg [11:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 55'bx;
endmodule

module SDPReadWriteSmem_1(
  input         clock,
                reset,
  input  [11:0] io_rd_addr,
  output [54:0] io_data_out,
  input  [11:0] io_wr_addr,
  input         io_wr_en,
  input  [54:0] io_data_in
);

  wire [54:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [54:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 55'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_4096x55 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module hash_BTB(
  input         clock,
                reset,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_BTB_valid,
  output [31:0] io_BTB_target,
  output [1:0]  io_BTB_type,
  output [3:0]  io_BTB_br_mask,
  output        io_BTB_hit,
  input  [31:0] io_commit_PC,
                io_commit_target,
  input  [1:0]  io_commit_br_type,
  input  [3:0]  io_commit_br_mask,
  input         io_commit_valid
);

  wire [54:0] _BTB_memory_io_data_out;
  wire [15:0] commit_input_tag = io_commit_PC[31:16];
  wire [15:0] BTB_tag_output = _BTB_memory_io_data_out[53:38];
  reg         io_BTB_valid_REG;
  reg  [15:0] io_BTB_hit_REG;
  always @(posedge clock) begin
    io_BTB_valid_REG <= io_predict_valid;
    io_BTB_hit_REG <= io_predict_PC[31:16];
  end // always @(posedge)
  SDPReadWriteSmem_1 BTB_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (io_predict_PC[15:4]),
    .io_data_out (_BTB_memory_io_data_out),
    .io_wr_addr  (io_commit_PC[15:4]),
    .io_wr_en    (io_commit_valid),
    .io_data_in
      ({1'h1, commit_input_tag, io_commit_target, io_commit_br_type, io_commit_br_mask})
  );
  assign io_BTB_valid = io_BTB_valid_REG;
  assign io_BTB_target = _BTB_memory_io_data_out[37:6];
  assign io_BTB_type = _BTB_memory_io_data_out[5:4];
  assign io_BTB_br_mask = _BTB_memory_io_data_out[3:0];
  assign io_BTB_hit = io_BTB_hit_REG == BTB_tag_output & _BTB_memory_io_data_out[54];
endmodule

// VCS coverage exclude_file
module mem_128x39(
  input  [6:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [38:0] R0_data,
  input  [6:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [38:0] W0_data
);

  reg [38:0] Memory[0:127];
  reg        _R0_en_d0;
  reg [6:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 39'bx;
endmodule

module SDPReadWriteSmem_2(
  input         clock,
                reset,
  input  [6:0]  io_rd_addr,
  output [38:0] io_data_out,
  input  [6:0]  io_wr_addr,
  input         io_wr_en,
  input  [38:0] io_data_in
);

  wire [38:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [38:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 39'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_128x39 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module RAS(
  input         clock,
                reset,
  input  [31:0] io_wr_addr,
  input         io_wr_valid,
                io_rd_valid,
  input  [6:0]  io_revert_NEXT,
                io_revert_TOS,
  input         io_revert_valid,
  output [31:0] io_ret_addr
);

  wire [6:0]  NOS;
  wire [38:0] _RAS_memory_io_data_out;
  reg  [6:0]  NEXT;
  reg  [6:0]  TOS;
  assign NOS = _RAS_memory_io_data_out[38:32];
  always @(posedge clock) begin
    if (reset) begin
      NEXT <= 7'h0;
      TOS <= 7'h0;
    end
    else if (io_revert_valid) begin
      NEXT <= io_revert_NEXT;
      TOS <= io_revert_TOS;
    end
    else if (io_wr_valid) begin
      NEXT <= NEXT + 7'h1;
      TOS <= NEXT;
    end
    else if (io_rd_valid)
      TOS <= NOS;
  end // always @(posedge)
  SDPReadWriteSmem_2 RAS_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr
      (io_wr_valid ? NEXT : io_rd_valid ? NOS : io_revert_valid ? io_revert_TOS : TOS),
    .io_data_out (_RAS_memory_io_data_out),
    .io_wr_addr  (NEXT),
    .io_wr_en    (io_wr_valid),
    .io_data_in  ({TOS, io_wr_addr})
  );
  assign io_ret_addr = _RAS_memory_io_data_out[31:0];
endmodule

module BP(
  input         clock,
                reset,
  output        io_predict_ready,
  input         io_predict_valid,
  input  [31:0] io_predict_bits,
  input         io_commit_valid,
  input  [31:0] io_commit_bits_PC,
  input  [15:0] io_commit_bits_GHR,
  input         io_commit_bits_T_NT,
  input  [31:0] io_commit_bits_target,
  input  [1:0]  io_commit_bits_br_type,
  input  [3:0]  io_commit_bits_br_mask,
  input         io_commit_bits_misprediction,
  input  [6:0]  io_commit_bits_TOS,
                io_commit_bits_NEXT,
  input  [31:0] io_RAS_update_call_addr,
  input         io_RAS_update_call,
                io_RAS_update_ret,
  output [31:0] io_RAS_read_ret_addr,
  input         io_revert_valid,
  input  [15:0] io_revert_bits_GHR,
  input         io_prediction_ready,
  output        io_prediction_valid,
                io_prediction_bits_hit,
  output [31:0] io_prediction_bits_target,
  output [1:0]  io_prediction_bits_br_type,
  output [3:0]  io_prediction_bits_br_mask,
  output [15:0] io_prediction_bits_GHR,
  output        io_prediction_bits_T_NT
);

  wire        _BTB_io_BTB_valid;
  wire [1:0]  _BTB_io_BTB_type;
  wire        _BTB_io_BTB_hit;
  wire        _gshare_io_T_NT;
  wire        _gshare_io_valid;
  wire        revert = io_revert_valid;
  wire        otherwise = 1'h0;
  reg  [15:0] GHR_reg;
  wire        misprediction = io_commit_valid & io_commit_bits_misprediction;
  wire        GHR_update =
    _gshare_io_valid & _BTB_io_BTB_valid & _BTB_io_BTB_hit & _BTB_io_BTB_type == 2'h0;
  wire [15:0] _GEN = {GHR_reg[14:0], _gshare_io_T_NT};
  wire        update_PHT = io_commit_bits_br_type == 2'h0 & io_commit_valid;
  always @(posedge clock) begin
    if (reset)
      GHR_reg <= 16'h0;
    else if (misprediction)
      GHR_reg <= io_commit_bits_GHR;
    else if (revert)
      GHR_reg <= io_revert_bits_GHR;
    else if (GHR_update)
      GHR_reg <= _GEN;
  end // always @(posedge)
  gshare gshare (
    .clock                      (clock),
    .io_predict_GHR
      (misprediction
         ? io_commit_bits_GHR
         : revert ? io_revert_bits_GHR : GHR_update ? _GEN : GHR_reg),
    .io_predict_PC              (io_predict_bits),
    .io_predict_valid           (io_predict_valid),
    .io_T_NT                    (_gshare_io_T_NT),
    .io_valid                   (_gshare_io_valid),
    .io_commit_GHR              (io_commit_bits_GHR),
    .io_commit_PC               (io_commit_bits_PC),
    .io_commit_valid            (update_PHT),
    .io_commit_branch_direction (io_commit_bits_T_NT)
  );
  hash_BTB BTB (
    .clock             (clock),
    .reset             (reset),
    .io_predict_PC     (io_predict_bits),
    .io_predict_valid  (io_predict_valid),
    .io_BTB_valid      (_BTB_io_BTB_valid),
    .io_BTB_target     (io_prediction_bits_target),
    .io_BTB_type       (_BTB_io_BTB_type),
    .io_BTB_br_mask    (io_prediction_bits_br_mask),
    .io_BTB_hit        (_BTB_io_BTB_hit),
    .io_commit_PC      (io_commit_bits_PC),
    .io_commit_target  (io_commit_bits_target),
    .io_commit_br_type (io_commit_bits_br_type),
    .io_commit_br_mask (io_commit_bits_br_mask),
    .io_commit_valid   (io_commit_bits_T_NT & io_commit_valid)
  );
  RAS RAS (
    .clock           (clock),
    .reset           (reset),
    .io_wr_addr      (io_RAS_update_call_addr),
    .io_wr_valid     (io_RAS_update_call & ~misprediction),
    .io_rd_valid     (io_RAS_update_ret & ~misprediction),
    .io_revert_NEXT  (io_commit_bits_NEXT),
    .io_revert_TOS   (io_commit_bits_TOS),
    .io_revert_valid (misprediction),
    .io_ret_addr     (io_RAS_read_ret_addr)
  );
  assign io_predict_ready = io_prediction_ready & ~(misprediction | revert);
  assign io_prediction_valid = _BTB_io_BTB_valid & _gshare_io_valid;
  assign io_prediction_bits_hit = _BTB_io_BTB_hit;
  assign io_prediction_bits_br_type = _BTB_io_BTB_type;
  assign io_prediction_bits_GHR = GHR_reg;
  assign io_prediction_bits_T_NT = _gshare_io_T_NT;
endmodule

module branch_decoder(
  input  [31:0] io_fetch_PC,
                io_instruction,
                io_prediction_bits_target,
                io_RAS_read_ret_addr,
  output        io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_1(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[1])
          : BR & io_valid & io_prediction_bits_br_mask[1];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'h4;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_2(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[2])
          : BR & io_valid & io_prediction_bits_br_mask[2];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'h8;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_3(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[3])
          : BR & io_valid & io_prediction_bits_br_mask[3];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'hC;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module decode_validate(
  input         clock,
                reset,
                io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [15:0] io_prediction_bits_GHR,
  input         io_fetch_packet_valid,
  input  [31:0] io_fetch_packet_bits_fetch_PC,
  input         io_fetch_packet_bits_valid_bits_1,
                io_fetch_packet_bits_valid_bits_2,
                io_fetch_packet_bits_valid_bits_3,
  input  [31:0] io_fetch_packet_bits_instructions_0_instruction,
                io_fetch_packet_bits_instructions_1_instruction,
                io_fetch_packet_bits_instructions_2_instruction,
                io_fetch_packet_bits_instructions_3_instruction,
                io_RAS_read_ret_addr,
  output        io_revert_valid,
  output [15:0] io_revert_bits_GHR,
  output [31:0] io_revert_bits_PC,
                io_final_fetch_packet_bits_instructions_0_instruction,
                io_final_fetch_packet_bits_instructions_1_instruction,
                io_final_fetch_packet_bits_instructions_2_instruction,
                io_final_fetch_packet_bits_instructions_3_instruction,
                io_RAS_update_call_addr,
  output        io_RAS_update_call,
                io_RAS_update_ret
);

  wire [31:0] PC_expected;
  wire        _decoders_3_io_T_NT;
  wire        _decoders_3_io_metadata_JAL;
  wire        _decoders_3_io_metadata_JALR;
  wire        _decoders_3_io_metadata_BR;
  wire        _decoders_3_io_metadata_Call;
  wire        _decoders_3_io_metadata_Ret;
  wire [31:0] _decoders_3_io_metadata_Imm;
  wire [31:0] _decoders_3_io_metadata_instruction_PC;
  wire [31:0] _decoders_3_io_metadata_RAS;
  wire [31:0] _decoders_3_io_metadata_BTB_target;
  wire        _decoders_2_io_T_NT;
  wire        _decoders_2_io_metadata_JAL;
  wire        _decoders_2_io_metadata_JALR;
  wire        _decoders_2_io_metadata_BR;
  wire        _decoders_2_io_metadata_Call;
  wire        _decoders_2_io_metadata_Ret;
  wire [31:0] _decoders_2_io_metadata_Imm;
  wire [31:0] _decoders_2_io_metadata_instruction_PC;
  wire [31:0] _decoders_2_io_metadata_RAS;
  wire [31:0] _decoders_2_io_metadata_BTB_target;
  wire        _decoders_1_io_T_NT;
  wire        _decoders_1_io_metadata_JAL;
  wire        _decoders_1_io_metadata_JALR;
  wire        _decoders_1_io_metadata_BR;
  wire        _decoders_1_io_metadata_Call;
  wire        _decoders_1_io_metadata_Ret;
  wire [31:0] _decoders_1_io_metadata_Imm;
  wire [31:0] _decoders_1_io_metadata_instruction_PC;
  wire [31:0] _decoders_1_io_metadata_RAS;
  wire [31:0] _decoders_1_io_metadata_BTB_target;
  wire        _decoders_0_io_metadata_JAL;
  wire        _decoders_0_io_metadata_JALR;
  wire        _decoders_0_io_metadata_BR;
  wire        _decoders_0_io_metadata_Call;
  wire        _decoders_0_io_metadata_Ret;
  wire [31:0] _decoders_0_io_metadata_Imm;
  wire [31:0] _decoders_0_io_metadata_instruction_PC;
  wire [31:0] _decoders_0_io_metadata_RAS;
  wire [31:0] _decoders_0_io_metadata_BTB_target;
  reg         metadata_reg_0_JAL;
  reg         metadata_reg_0_JALR;
  reg         metadata_reg_0_BR;
  reg         metadata_reg_0_Call;
  reg         metadata_reg_0_Ret;
  reg  [31:0] metadata_reg_0_Imm;
  reg  [31:0] metadata_reg_0_instruction_PC;
  reg  [31:0] metadata_reg_0_RAS;
  reg  [31:0] metadata_reg_0_BTB_target;
  reg         metadata_reg_1_JAL;
  reg         metadata_reg_1_JALR;
  reg         metadata_reg_1_BR;
  reg         metadata_reg_1_Call;
  reg         metadata_reg_1_Ret;
  reg  [31:0] metadata_reg_1_Imm;
  reg  [31:0] metadata_reg_1_instruction_PC;
  reg  [31:0] metadata_reg_1_RAS;
  reg  [31:0] metadata_reg_1_BTB_target;
  reg         metadata_reg_2_JAL;
  reg         metadata_reg_2_JALR;
  reg         metadata_reg_2_BR;
  reg         metadata_reg_2_Call;
  reg         metadata_reg_2_Ret;
  reg  [31:0] metadata_reg_2_Imm;
  reg  [31:0] metadata_reg_2_instruction_PC;
  reg  [31:0] metadata_reg_2_RAS;
  reg  [31:0] metadata_reg_2_BTB_target;
  reg         metadata_reg_3_JAL;
  reg         metadata_reg_3_JALR;
  reg         metadata_reg_3_BR;
  reg         metadata_reg_3_Call;
  reg         metadata_reg_3_Ret;
  reg  [31:0] metadata_reg_3_Imm;
  reg  [31:0] metadata_reg_3_instruction_PC;
  reg  [31:0] metadata_reg_3_RAS;
  reg  [31:0] metadata_reg_3_BTB_target;
  reg         T_NT_reg_1;
  reg         T_NT_reg_2;
  reg         T_NT_reg_3;
  reg  [15:0] GHR_reg;
  wire        use_RAS =
    T_NT_reg_3
      ? metadata_reg_3_Ret
      : T_NT_reg_2
          ? metadata_reg_2_Ret
          : T_NT_reg_1 ? metadata_reg_1_Ret : metadata_reg_0_Ret;
  wire [31:0] metadata_out_Imm =
    T_NT_reg_3
      ? metadata_reg_3_Imm
      : T_NT_reg_2
          ? metadata_reg_2_Imm
          : T_NT_reg_1 ? metadata_reg_1_Imm : metadata_reg_0_Imm;
  wire [31:0] metadata_out_instruction_PC =
    T_NT_reg_3
      ? metadata_reg_3_instruction_PC
      : T_NT_reg_2
          ? metadata_reg_2_instruction_PC
          : T_NT_reg_1 ? metadata_reg_1_instruction_PC : metadata_reg_0_instruction_PC;
  reg  [31:0] PC_next_reg;
  wire        PC_mismatch =
    PC_expected != io_fetch_packet_bits_fetch_PC & io_fetch_packet_valid
    & io_prediction_valid;
  wire        use_BTB =
    (T_NT_reg_3
       ? metadata_reg_3_JALR
       : T_NT_reg_2
           ? metadata_reg_2_JALR
           : T_NT_reg_1 ? metadata_reg_1_JALR : metadata_reg_0_JALR) & ~use_RAS;
  wire        use_computed =
    (T_NT_reg_3
       ? metadata_reg_3_BR
       : T_NT_reg_2
           ? metadata_reg_2_BR
           : T_NT_reg_1 ? metadata_reg_1_BR : metadata_reg_0_BR)
    | (T_NT_reg_3
         ? metadata_reg_3_JAL
         : T_NT_reg_2
             ? metadata_reg_2_JAL
             : T_NT_reg_1 ? metadata_reg_1_JAL : metadata_reg_0_JAL);
  reg  [31:0] PC_next_REG;
  wire [31:0] PC_next =
    use_BTB
      ? (T_NT_reg_3
           ? metadata_reg_3_BTB_target
           : T_NT_reg_2
               ? metadata_reg_2_BTB_target
               : T_NT_reg_1 ? metadata_reg_1_BTB_target : metadata_reg_0_BTB_target)
      : use_RAS
          ? (T_NT_reg_3
               ? metadata_reg_3_RAS
               : T_NT_reg_2
                   ? metadata_reg_2_RAS
                   : T_NT_reg_1 ? metadata_reg_1_RAS : metadata_reg_0_RAS)
          : use_computed ? metadata_out_instruction_PC + metadata_out_Imm : PC_next_REG;
  reg         PC_next_reg_REG;
  reg         PC_expected_REG;
  assign PC_expected = PC_expected_REG ? PC_next : PC_next_reg;
  reg  [31:0] io_final_fetch_packet_bits_instructions_0_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_1_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_2_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_3_REG_instruction;
  always @(posedge clock) begin
    automatic logic stage_1_valid = io_fetch_packet_valid & ~PC_mismatch;
    metadata_reg_0_JAL <= _decoders_0_io_metadata_JAL;
    metadata_reg_0_JALR <= _decoders_0_io_metadata_JALR;
    metadata_reg_0_BR <= _decoders_0_io_metadata_BR;
    metadata_reg_0_Call <= _decoders_0_io_metadata_Call;
    metadata_reg_0_Ret <= _decoders_0_io_metadata_Ret;
    metadata_reg_0_Imm <= _decoders_0_io_metadata_Imm;
    metadata_reg_0_instruction_PC <= _decoders_0_io_metadata_instruction_PC;
    metadata_reg_0_RAS <= _decoders_0_io_metadata_RAS;
    metadata_reg_0_BTB_target <= _decoders_0_io_metadata_BTB_target;
    metadata_reg_1_JAL <= _decoders_1_io_metadata_JAL;
    metadata_reg_1_JALR <= _decoders_1_io_metadata_JALR;
    metadata_reg_1_BR <= _decoders_1_io_metadata_BR;
    metadata_reg_1_Call <= _decoders_1_io_metadata_Call;
    metadata_reg_1_Ret <= _decoders_1_io_metadata_Ret;
    metadata_reg_1_Imm <= _decoders_1_io_metadata_Imm;
    metadata_reg_1_instruction_PC <= _decoders_1_io_metadata_instruction_PC;
    metadata_reg_1_RAS <= _decoders_1_io_metadata_RAS;
    metadata_reg_1_BTB_target <= _decoders_1_io_metadata_BTB_target;
    metadata_reg_2_JAL <= _decoders_2_io_metadata_JAL;
    metadata_reg_2_JALR <= _decoders_2_io_metadata_JALR;
    metadata_reg_2_BR <= _decoders_2_io_metadata_BR;
    metadata_reg_2_Call <= _decoders_2_io_metadata_Call;
    metadata_reg_2_Ret <= _decoders_2_io_metadata_Ret;
    metadata_reg_2_Imm <= _decoders_2_io_metadata_Imm;
    metadata_reg_2_instruction_PC <= _decoders_2_io_metadata_instruction_PC;
    metadata_reg_2_RAS <= _decoders_2_io_metadata_RAS;
    metadata_reg_2_BTB_target <= _decoders_2_io_metadata_BTB_target;
    metadata_reg_3_JAL <= _decoders_3_io_metadata_JAL;
    metadata_reg_3_JALR <= _decoders_3_io_metadata_JALR;
    metadata_reg_3_BR <= _decoders_3_io_metadata_BR;
    metadata_reg_3_Call <= _decoders_3_io_metadata_Call;
    metadata_reg_3_Ret <= _decoders_3_io_metadata_Ret;
    metadata_reg_3_Imm <= _decoders_3_io_metadata_Imm;
    metadata_reg_3_instruction_PC <= _decoders_3_io_metadata_instruction_PC;
    metadata_reg_3_RAS <= _decoders_3_io_metadata_RAS;
    metadata_reg_3_BTB_target <= _decoders_3_io_metadata_BTB_target;
    T_NT_reg_1 <= _decoders_1_io_T_NT;
    T_NT_reg_2 <= _decoders_2_io_T_NT;
    T_NT_reg_3 <= _decoders_3_io_T_NT;
    GHR_reg <= io_prediction_bits_GHR;
    PC_next_REG <= io_fetch_packet_bits_fetch_PC + 32'h10;
    PC_next_reg_REG <= stage_1_valid;
    PC_expected_REG <= stage_1_valid;
    io_final_fetch_packet_bits_instructions_0_REG_instruction <=
      io_fetch_packet_bits_instructions_0_instruction;
    io_final_fetch_packet_bits_instructions_1_REG_instruction <=
      io_fetch_packet_bits_instructions_1_instruction;
    io_final_fetch_packet_bits_instructions_2_REG_instruction <=
      io_fetch_packet_bits_instructions_2_instruction;
    io_final_fetch_packet_bits_instructions_3_REG_instruction <=
      io_fetch_packet_bits_instructions_3_instruction;
    if (reset)
      PC_next_reg <= 32'h0;
    else if (PC_next_reg_REG)
      PC_next_reg <= PC_next;
  end // always @(posedge)
  branch_decoder decoders_0 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_0_instruction),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_metadata_JAL            (_decoders_0_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_0_io_metadata_JALR),
    .io_metadata_BR             (_decoders_0_io_metadata_BR),
    .io_metadata_Call           (_decoders_0_io_metadata_Call),
    .io_metadata_Ret            (_decoders_0_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_0_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_0_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_0_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_0_io_metadata_BTB_target)
  );
  branch_decoder_1 decoders_1 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_1_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_1),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_1_io_T_NT),
    .io_metadata_JAL            (_decoders_1_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_1_io_metadata_JALR),
    .io_metadata_BR             (_decoders_1_io_metadata_BR),
    .io_metadata_Call           (_decoders_1_io_metadata_Call),
    .io_metadata_Ret            (_decoders_1_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_1_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_1_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_1_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_1_io_metadata_BTB_target)
  );
  branch_decoder_2 decoders_2 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_2_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_2),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_2_io_T_NT),
    .io_metadata_JAL            (_decoders_2_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_2_io_metadata_JALR),
    .io_metadata_BR             (_decoders_2_io_metadata_BR),
    .io_metadata_Call           (_decoders_2_io_metadata_Call),
    .io_metadata_Ret            (_decoders_2_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_2_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_2_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_2_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_2_io_metadata_BTB_target)
  );
  branch_decoder_3 decoders_3 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_3_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_3),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_3_io_T_NT),
    .io_metadata_JAL            (_decoders_3_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_3_io_metadata_JALR),
    .io_metadata_BR             (_decoders_3_io_metadata_BR),
    .io_metadata_Call           (_decoders_3_io_metadata_Call),
    .io_metadata_Ret            (_decoders_3_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_3_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_3_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_3_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_3_io_metadata_BTB_target)
  );
  assign io_revert_valid = PC_mismatch;
  assign io_revert_bits_GHR = GHR_reg;
  assign io_revert_bits_PC = PC_expected;
  assign io_final_fetch_packet_bits_instructions_0_instruction =
    io_final_fetch_packet_bits_instructions_0_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_1_instruction =
    io_final_fetch_packet_bits_instructions_1_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_2_instruction =
    io_final_fetch_packet_bits_instructions_2_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_3_instruction =
    io_final_fetch_packet_bits_instructions_3_REG_instruction;
  assign io_RAS_update_call_addr = metadata_out_instruction_PC;
  assign io_RAS_update_call =
    T_NT_reg_3
      ? metadata_reg_3_Call
      : T_NT_reg_2
          ? metadata_reg_2_Call
          : T_NT_reg_1 ? metadata_reg_1_Call : metadata_reg_0_Call;
  assign io_RAS_update_ret = use_RAS;
endmodule

module PC_arbit(
  input         clock,
                reset,
                io_commit_valid,
                io_commit_bits_misprediction,
  input  [31:0] io_commit_bits_misprediction_PC,
  input         io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [1:0]  io_prediction_bits_br_type,
  input         io_revert_valid,
  input  [31:0] io_revert_bits_PC,
                io_RAS_read_ret_addr,
  input         io_PC_next_ready,
  output        io_PC_next_valid,
  output [31:0] io_PC_next_bits
);

  wire [31:0] io_PC_next_bits_0;
  wire        misprediction;
  reg  [31:0] PC;
  reg  [31:0] correction_address_reg;
  wire        correct_stage_active = misprediction | io_revert_valid;
  assign misprediction = io_commit_valid & io_commit_bits_misprediction;
  wire        is_ret = io_prediction_bits_br_type == 2'h2;
  wire        use_BTB =
    io_prediction_valid & io_prediction_bits_hit & ~is_ret & ~correct_stage_active;
  wire        use_RAS = is_ret & ~correct_stage_active;
  wire [4:0]  PC_increment = {3'h4 - {1'h0, io_PC_next_bits_0[3:2]}, 2'h0};
  reg         REG;
  assign io_PC_next_bits_0 =
    REG
      ? correction_address_reg
      : use_BTB ? io_prediction_bits_target : use_RAS ? io_RAS_read_ret_addr : PC;
  wire        io_PC_next_valid_0 = ~correct_stage_active & io_PC_next_ready;
  always @(posedge clock) begin
    if (reset) begin
      PC <= 32'h0;
      correction_address_reg <= 32'h0;
    end
    else begin
      automatic logic [31:0] correction_address;
      correction_address =
        io_revert_valid
          ? io_revert_bits_PC
          : misprediction ? io_commit_bits_misprediction_PC : 32'h0;
      if (correct_stage_active)
        PC <= correction_address;
      else if (io_PC_next_valid_0)
        PC <= io_PC_next_bits_0 + {27'h0, PC_increment};
      correction_address_reg <= correction_address;
    end
    REG <= correct_stage_active;
  end // always @(posedge)
  assign io_PC_next_valid = io_PC_next_valid_0;
  assign io_PC_next_bits = io_PC_next_bits_0;
endmodule

// VCS coverage exclude_file
module ram_16x163(
  input  [3:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [162:0] R0_data,
  input  [3:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [162:0] W0_data
);

  reg [162:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 163'bx;
endmodule

module Queue16_fetch_packet(
  input         clock,
                reset,
                io_enq_valid,
  input  [31:0] io_enq_bits_fetch_PC,
  input         io_enq_bits_valid_bits_0,
                io_enq_bits_valid_bits_1,
                io_enq_bits_valid_bits_2,
                io_enq_bits_valid_bits_3,
  output        io_deq_valid,
  output [31:0] io_deq_bits_fetch_PC,
  output        io_deq_bits_valid_bits_1,
                io_deq_bits_valid_bits_2,
                io_deq_bits_valid_bits_3,
  output [31:0] io_deq_bits_instructions_0_instruction,
                io_deq_bits_instructions_1_instruction,
                io_deq_bits_instructions_2_instruction,
                io_deq_bits_instructions_3_instruction
);

  wire         io_enq_ready;
  wire [162:0] _ram_ext_R0_data;
  reg  [3:0]   enq_ptr_value;
  reg          maybe_full;
  wire         ptr_match = enq_ptr_value == 4'h0;
  wire         do_enq = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~(ptr_match & maybe_full);
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else if (do_enq) begin
      enq_ptr_value <= enq_ptr_value + 4'h1;
      maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x163 ram_ext (
    .R0_addr (4'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({128'h0,
        io_enq_bits_valid_bits_3,
        io_enq_bits_valid_bits_2,
        io_enq_bits_valid_bits_1,
        io_enq_bits_fetch_PC})
  );
  assign io_deq_valid = ~(ptr_match & ~maybe_full);
  assign io_deq_bits_fetch_PC = _ram_ext_R0_data[31:0];
  assign io_deq_bits_valid_bits_1 = _ram_ext_R0_data[32];
  assign io_deq_bits_valid_bits_2 = _ram_ext_R0_data[33];
  assign io_deq_bits_valid_bits_3 = _ram_ext_R0_data[34];
  assign io_deq_bits_instructions_0_instruction = _ram_ext_R0_data[66:35];
  assign io_deq_bits_instructions_1_instruction = _ram_ext_R0_data[98:67];
  assign io_deq_bits_instructions_2_instruction = _ram_ext_R0_data[130:99];
  assign io_deq_bits_instructions_3_instruction = _ram_ext_R0_data[162:131];
endmodule

module Q(
  input         clock,
                reset,
  input  [31:0] io_data_in_fetch_PC,
  input         io_data_in_valid_bits_0,
                io_data_in_valid_bits_1,
                io_data_in_valid_bits_2,
                io_data_in_valid_bits_3,
                io_wr_en,
                io_clear,
  output [31:0] io_data_out_fetch_PC,
  output        io_data_out_valid_bits_1,
                io_data_out_valid_bits_2,
                io_data_out_valid_bits_3,
  output [31:0] io_data_out_instructions_0_instruction,
                io_data_out_instructions_1_instruction,
                io_data_out_instructions_2_instruction,
                io_data_out_instructions_3_instruction,
  output        io_empty
);

  wire _queue_io_deq_valid;
  Queue16_fetch_packet queue (
    .clock                                  (clock),
    .reset                                  (io_clear | reset),
    .io_enq_valid                           (io_wr_en),
    .io_enq_bits_fetch_PC                   (io_data_in_fetch_PC),
    .io_enq_bits_valid_bits_0               (io_data_in_valid_bits_0),
    .io_enq_bits_valid_bits_1               (io_data_in_valid_bits_1),
    .io_enq_bits_valid_bits_2               (io_data_in_valid_bits_2),
    .io_enq_bits_valid_bits_3               (io_data_in_valid_bits_3),
    .io_deq_valid                           (_queue_io_deq_valid),
    .io_deq_bits_fetch_PC                   (io_data_out_fetch_PC),
    .io_deq_bits_valid_bits_1               (io_data_out_valid_bits_1),
    .io_deq_bits_valid_bits_2               (io_data_out_valid_bits_2),
    .io_deq_bits_valid_bits_3               (io_data_out_valid_bits_3),
    .io_deq_bits_instructions_0_instruction (io_data_out_instructions_0_instruction),
    .io_deq_bits_instructions_1_instruction (io_data_out_instructions_1_instruction),
    .io_deq_bits_instructions_2_instruction (io_data_out_instructions_2_instruction),
    .io_deq_bits_instructions_3_instruction (io_data_out_instructions_3_instruction)
  );
  assign io_empty = ~_queue_io_deq_valid;
endmodule

// VCS coverage exclude_file
module ram_16x32(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
endmodule

module Queue16_UInt32(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits
);

  reg  [3:0] enq_ptr_value;
  reg  [3:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x32 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Q_1(
  input         clock,
                reset,
  input  [31:0] io_data_in,
  input         io_wr_en,
                io_rd_en,
                io_clear,
  output [31:0] io_data_out,
  output        io_full,
                io_empty
);

  wire _queue_io_enq_ready;
  wire _queue_io_deq_valid;
  Queue16_UInt32 queue (
    .clock        (clock),
    .reset        (io_clear | reset),
    .io_enq_ready (_queue_io_enq_ready),
    .io_enq_valid (io_wr_en),
    .io_enq_bits  (io_data_in),
    .io_deq_ready (io_rd_en),
    .io_deq_valid (_queue_io_deq_valid),
    .io_deq_bits  (io_data_out)
  );
  assign io_full = ~_queue_io_enq_ready;
  assign io_empty = ~_queue_io_deq_valid;
endmodule

// VCS coverage exclude_file
module ram_16x53(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [52:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [52:0] W0_data
);

  reg [52:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 53'bx;
endmodule

module Queue16_prediction(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
                io_enq_bits_hit,
  input  [31:0] io_enq_bits_target,
  input  [1:0]  io_enq_bits_br_type,
  input  [3:0]  io_enq_bits_br_mask,
  input  [15:0] io_enq_bits_GHR,
  input         io_enq_bits_T_NT,
  output        io_deq_valid,
                io_deq_bits_hit,
  output [31:0] io_deq_bits_target,
  output [3:0]  io_deq_bits_br_mask,
  output [15:0] io_deq_bits_GHR
);

  wire [52:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == 4'h0;
  wire        full = ptr_match & maybe_full;
  wire        do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else if (do_enq) begin
      enq_ptr_value <= enq_ptr_value + 4'h1;
      maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x53 ram_ext (
    .R0_addr (4'h0),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_GHR, io_enq_bits_br_mask, io_enq_bits_target, io_enq_bits_hit})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~(ptr_match & ~maybe_full);
  assign io_deq_bits_hit = _ram_ext_R0_data[0];
  assign io_deq_bits_target = _ram_ext_R0_data[32:1];
  assign io_deq_bits_br_mask = _ram_ext_R0_data[36:33];
  assign io_deq_bits_GHR = _ram_ext_R0_data[52:37];
endmodule

module Q_2(
  input         clock,
                reset,
                io_data_in_hit,
  input  [31:0] io_data_in_target,
  input  [1:0]  io_data_in_br_type,
  input  [3:0]  io_data_in_br_mask,
  input  [15:0] io_data_in_GHR,
  input         io_data_in_T_NT,
                io_wr_en,
                io_clear,
  output        io_data_out_hit,
  output [31:0] io_data_out_target,
  output [3:0]  io_data_out_br_mask,
  output [15:0] io_data_out_GHR,
  output        io_full,
                io_empty
);

  wire _queue_io_enq_ready;
  wire _queue_io_deq_valid;
  Queue16_prediction queue (
    .clock               (clock),
    .reset               (io_clear | reset),
    .io_enq_ready        (_queue_io_enq_ready),
    .io_enq_valid        (io_wr_en),
    .io_enq_bits_hit     (io_data_in_hit),
    .io_enq_bits_target  (io_data_in_target),
    .io_enq_bits_br_type (io_data_in_br_type),
    .io_enq_bits_br_mask (io_data_in_br_mask),
    .io_enq_bits_GHR     (io_data_in_GHR),
    .io_enq_bits_T_NT    (io_data_in_T_NT),
    .io_deq_valid        (_queue_io_deq_valid),
    .io_deq_bits_hit     (io_data_out_hit),
    .io_deq_bits_target  (io_data_out_target),
    .io_deq_bits_br_mask (io_data_out_br_mask),
    .io_deq_bits_GHR     (io_data_out_GHR)
  );
  assign io_full = ~_queue_io_enq_ready;
  assign io_empty = ~_queue_io_deq_valid;
endmodule

module instruction_fetch(
  input          clock,
                 reset,
                 io_dram_data_valid,
  input  [255:0] io_dram_data_bits,
  input          io_commit_valid,
  input  [31:0]  io_commit_bits_PC,
  input  [15:0]  io_commit_bits_GHR,
  input          io_commit_bits_T_NT,
  input  [31:0]  io_commit_bits_target,
  input  [1:0]   io_commit_bits_br_type,
  input  [3:0]   io_commit_bits_br_mask,
  input          io_commit_bits_misprediction,
  input  [6:0]   io_commit_bits_TOS,
                 io_commit_bits_NEXT,
  input  [31:0]  io_commit_bits_misprediction_PC,
  output [31:0]  io_fetch_packet_bits_instructions_0_instruction,
                 io_fetch_packet_bits_instructions_1_instruction,
                 io_fetch_packet_bits_instructions_2_instruction,
                 io_fetch_packet_bits_instructions_3_instruction
);

  wire        _BTB_Q_io_data_out_hit;
  wire [31:0] _BTB_Q_io_data_out_target;
  wire [3:0]  _BTB_Q_io_data_out_br_mask;
  wire [15:0] _BTB_Q_io_data_out_GHR;
  wire        _BTB_Q_io_full;
  wire        _BTB_Q_io_empty;
  wire [31:0] _PC_Q_io_data_out;
  wire        _PC_Q_io_full;
  wire        _PC_Q_io_empty;
  wire [31:0] _instruction_Q_io_data_out_fetch_PC;
  wire        _instruction_Q_io_data_out_valid_bits_1;
  wire        _instruction_Q_io_data_out_valid_bits_2;
  wire        _instruction_Q_io_data_out_valid_bits_3;
  wire [31:0] _instruction_Q_io_data_out_instructions_0_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_1_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_2_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_3_instruction;
  wire        _instruction_Q_io_empty;
  wire        _PC_gen_io_PC_next_valid;
  wire [31:0] _PC_gen_io_PC_next_bits;
  wire        _predecoder_io_revert_valid;
  wire [15:0] _predecoder_io_revert_bits_GHR;
  wire [31:0] _predecoder_io_revert_bits_PC;
  wire [31:0] _predecoder_io_RAS_update_call_addr;
  wire        _predecoder_io_RAS_update_call;
  wire        _predecoder_io_RAS_update_ret;
  wire        _bp_io_predict_ready;
  wire [31:0] _bp_io_RAS_read_ret_addr;
  wire        _bp_io_prediction_valid;
  wire        _bp_io_prediction_bits_hit;
  wire [31:0] _bp_io_prediction_bits_target;
  wire [1:0]  _bp_io_prediction_bits_br_type;
  wire [3:0]  _bp_io_prediction_bits_br_mask;
  wire [15:0] _bp_io_prediction_bits_GHR;
  wire        _bp_io_prediction_bits_T_NT;
  wire        _instruction_cache_io_cpu_addr_ready;
  wire        _instruction_cache_io_cache_data_valid;
  wire [31:0] _instruction_cache_io_cache_data_bits_fetch_PC;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_0;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_1;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_2;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_3;
  wire        clear = io_commit_bits_misprediction | _predecoder_io_revert_valid;
  L1_instruction_cache instruction_cache (
    .clock                           (clock),
    .reset                           (reset),
    .io_cpu_addr_ready               (_instruction_cache_io_cpu_addr_ready),
    .io_cpu_addr_valid               (~_PC_Q_io_empty),
    .io_cpu_addr_bits                (_PC_Q_io_data_out),
    .io_dram_data_valid              (io_dram_data_valid),
    .io_dram_data_bits               (io_dram_data_bits),
    .io_kill                         (clear),
    .io_cache_data_valid             (_instruction_cache_io_cache_data_valid),
    .io_cache_data_bits_fetch_PC     (_instruction_cache_io_cache_data_bits_fetch_PC),
    .io_cache_data_bits_valid_bits_0 (_instruction_cache_io_cache_data_bits_valid_bits_0),
    .io_cache_data_bits_valid_bits_1 (_instruction_cache_io_cache_data_bits_valid_bits_1),
    .io_cache_data_bits_valid_bits_2 (_instruction_cache_io_cache_data_bits_valid_bits_2),
    .io_cache_data_bits_valid_bits_3 (_instruction_cache_io_cache_data_bits_valid_bits_3)
  );
  BP bp (
    .clock                        (clock),
    .reset                        (reset),
    .io_predict_ready             (_bp_io_predict_ready),
    .io_predict_valid             (_PC_gen_io_PC_next_valid),
    .io_predict_bits              (_PC_gen_io_PC_next_bits),
    .io_commit_valid              (io_commit_valid),
    .io_commit_bits_PC            (io_commit_bits_PC),
    .io_commit_bits_GHR           (io_commit_bits_GHR),
    .io_commit_bits_T_NT          (io_commit_bits_T_NT),
    .io_commit_bits_target        (io_commit_bits_target),
    .io_commit_bits_br_type       (io_commit_bits_br_type),
    .io_commit_bits_br_mask       (io_commit_bits_br_mask),
    .io_commit_bits_misprediction (io_commit_bits_misprediction),
    .io_commit_bits_TOS           (io_commit_bits_TOS),
    .io_commit_bits_NEXT          (io_commit_bits_NEXT),
    .io_RAS_update_call_addr      (_predecoder_io_RAS_update_call_addr),
    .io_RAS_update_call           (_predecoder_io_RAS_update_call),
    .io_RAS_update_ret            (_predecoder_io_RAS_update_ret),
    .io_RAS_read_ret_addr         (_bp_io_RAS_read_ret_addr),
    .io_revert_valid              (_predecoder_io_revert_valid),
    .io_revert_bits_GHR           (_predecoder_io_revert_bits_GHR),
    .io_prediction_ready          (~_BTB_Q_io_full),
    .io_prediction_valid          (_bp_io_prediction_valid),
    .io_prediction_bits_hit       (_bp_io_prediction_bits_hit),
    .io_prediction_bits_target    (_bp_io_prediction_bits_target),
    .io_prediction_bits_br_type   (_bp_io_prediction_bits_br_type),
    .io_prediction_bits_br_mask   (_bp_io_prediction_bits_br_mask),
    .io_prediction_bits_GHR       (_bp_io_prediction_bits_GHR),
    .io_prediction_bits_T_NT      (_bp_io_prediction_bits_T_NT)
  );
  decode_validate predecoder (
    .clock                                                 (clock),
    .reset                                                 (reset),
    .io_prediction_valid                                   (~_BTB_Q_io_empty),
    .io_prediction_bits_hit                                (_BTB_Q_io_data_out_hit),
    .io_prediction_bits_target                             (_BTB_Q_io_data_out_target),
    .io_prediction_bits_br_mask                            (_BTB_Q_io_data_out_br_mask),
    .io_prediction_bits_GHR                                (_BTB_Q_io_data_out_GHR),
    .io_fetch_packet_valid                                 (~_instruction_Q_io_empty),
    .io_fetch_packet_bits_fetch_PC
      (_instruction_Q_io_data_out_fetch_PC),
    .io_fetch_packet_bits_valid_bits_1
      (_instruction_Q_io_data_out_valid_bits_1),
    .io_fetch_packet_bits_valid_bits_2
      (_instruction_Q_io_data_out_valid_bits_2),
    .io_fetch_packet_bits_valid_bits_3
      (_instruction_Q_io_data_out_valid_bits_3),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_Q_io_data_out_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_Q_io_data_out_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_Q_io_data_out_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_Q_io_data_out_instructions_3_instruction),
    .io_RAS_read_ret_addr                                  (_bp_io_RAS_read_ret_addr),
    .io_revert_valid                                       (_predecoder_io_revert_valid),
    .io_revert_bits_GHR
      (_predecoder_io_revert_bits_GHR),
    .io_revert_bits_PC
      (_predecoder_io_revert_bits_PC),
    .io_final_fetch_packet_bits_instructions_0_instruction
      (io_fetch_packet_bits_instructions_0_instruction),
    .io_final_fetch_packet_bits_instructions_1_instruction
      (io_fetch_packet_bits_instructions_1_instruction),
    .io_final_fetch_packet_bits_instructions_2_instruction
      (io_fetch_packet_bits_instructions_2_instruction),
    .io_final_fetch_packet_bits_instructions_3_instruction
      (io_fetch_packet_bits_instructions_3_instruction),
    .io_RAS_update_call_addr
      (_predecoder_io_RAS_update_call_addr),
    .io_RAS_update_call
      (_predecoder_io_RAS_update_call),
    .io_RAS_update_ret                                     (_predecoder_io_RAS_update_ret)
  );
  PC_arbit PC_gen (
    .clock                           (clock),
    .reset                           (reset),
    .io_commit_valid                 (io_commit_valid),
    .io_commit_bits_misprediction    (io_commit_bits_misprediction),
    .io_commit_bits_misprediction_PC (io_commit_bits_misprediction_PC),
    .io_prediction_valid             (_bp_io_prediction_valid),
    .io_prediction_bits_hit          (_bp_io_prediction_bits_hit),
    .io_prediction_bits_target       (_bp_io_prediction_bits_target),
    .io_prediction_bits_br_type      (_bp_io_prediction_bits_br_type),
    .io_revert_valid                 (_predecoder_io_revert_valid),
    .io_revert_bits_PC               (_predecoder_io_revert_bits_PC),
    .io_RAS_read_ret_addr            (_bp_io_RAS_read_ret_addr),
    .io_PC_next_ready                (~_PC_Q_io_full & _bp_io_predict_ready),
    .io_PC_next_valid                (_PC_gen_io_PC_next_valid),
    .io_PC_next_bits                 (_PC_gen_io_PC_next_bits)
  );
  Q instruction_Q (
    .clock                                  (clock),
    .reset                                  (reset),
    .io_data_in_fetch_PC
      (_instruction_cache_io_cache_data_bits_fetch_PC),
    .io_data_in_valid_bits_0
      (_instruction_cache_io_cache_data_bits_valid_bits_0),
    .io_data_in_valid_bits_1
      (_instruction_cache_io_cache_data_bits_valid_bits_1),
    .io_data_in_valid_bits_2
      (_instruction_cache_io_cache_data_bits_valid_bits_2),
    .io_data_in_valid_bits_3
      (_instruction_cache_io_cache_data_bits_valid_bits_3),
    .io_wr_en                               (_instruction_cache_io_cache_data_valid),
    .io_clear                               (clear),
    .io_data_out_fetch_PC                   (_instruction_Q_io_data_out_fetch_PC),
    .io_data_out_valid_bits_1               (_instruction_Q_io_data_out_valid_bits_1),
    .io_data_out_valid_bits_2               (_instruction_Q_io_data_out_valid_bits_2),
    .io_data_out_valid_bits_3               (_instruction_Q_io_data_out_valid_bits_3),
    .io_data_out_instructions_0_instruction
      (_instruction_Q_io_data_out_instructions_0_instruction),
    .io_data_out_instructions_1_instruction
      (_instruction_Q_io_data_out_instructions_1_instruction),
    .io_data_out_instructions_2_instruction
      (_instruction_Q_io_data_out_instructions_2_instruction),
    .io_data_out_instructions_3_instruction
      (_instruction_Q_io_data_out_instructions_3_instruction),
    .io_empty                               (_instruction_Q_io_empty)
  );
  Q_1 PC_Q (
    .clock       (clock),
    .reset       (reset),
    .io_data_in  (_PC_gen_io_PC_next_bits),
    .io_wr_en    (_PC_gen_io_PC_next_valid),
    .io_rd_en    (_instruction_cache_io_cpu_addr_ready),
    .io_clear    (clear),
    .io_data_out (_PC_Q_io_data_out),
    .io_full     (_PC_Q_io_full),
    .io_empty    (_PC_Q_io_empty)
  );
  Q_2 BTB_Q (
    .clock               (clock),
    .reset               (reset),
    .io_data_in_hit      (_bp_io_prediction_bits_hit),
    .io_data_in_target   (_bp_io_prediction_bits_target),
    .io_data_in_br_type  (_bp_io_prediction_bits_br_type),
    .io_data_in_br_mask  (_bp_io_prediction_bits_br_mask),
    .io_data_in_GHR      (_bp_io_prediction_bits_GHR),
    .io_data_in_T_NT     (_bp_io_prediction_bits_T_NT),
    .io_wr_en            (_bp_io_prediction_valid),
    .io_clear            (clear),
    .io_data_out_hit     (_BTB_Q_io_data_out_hit),
    .io_data_out_target  (_BTB_Q_io_data_out_target),
    .io_data_out_br_mask (_BTB_Q_io_data_out_br_mask),
    .io_data_out_GHR     (_BTB_Q_io_data_out_GHR),
    .io_full             (_BTB_Q_io_full),
    .io_empty            (_BTB_Q_io_empty)
  );
endmodule

module decoder(
  input         clock,
                reset,
  input  [31:0] io_instruction_instruction,
  output [5:0]  io_decoded_instruction_RD,
  output        io_decoded_instruction_RD_valid,
  output [5:0]  io_decoded_instruction_RS1,
                io_decoded_instruction_RS2
);

  wire IS_LOAD = io_instruction_instruction[6:2] == 5'h0;
  wire IMMEDIATE = io_instruction_instruction[6:2] == 5'h4;
  wire _io_decoded_instruction_RD_valid_T_11 = io_instruction_instruction[6:2] == 5'h5;
  wire _is_INT_T = io_instruction_instruction[6:2] == 5'hC;
  wire _io_decoded_instruction_RD_valid_T_9 = io_instruction_instruction[6:2] == 5'hD;
  wire _is_INT_T_7 = io_instruction_instruction[6:2] == 5'h19;
  wire _is_INT_T_5 = io_instruction_instruction[6:2] == 5'h1B;
  wire _io_decoded_instruction_RD_valid_T_13 = io_instruction_instruction[6:2] == 5'h1C;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(IS_LOAD | io_instruction_instruction[6:2] == 5'h1
              | io_instruction_instruction[6:2] == 5'h2
              | io_instruction_instruction[6:2] == 5'h3 | IMMEDIATE
              | _io_decoded_instruction_RD_valid_T_11
              | io_instruction_instruction[6:2] == 5'h6
              | io_instruction_instruction[6:2] == 5'h8
              | io_instruction_instruction[6:2] == 5'h9
              | io_instruction_instruction[6:2] == 5'hA
              | io_instruction_instruction[6:2] == 5'hB | _is_INT_T
              | _io_decoded_instruction_RD_valid_T_9
              | io_instruction_instruction[6:2] == 5'hE
              | io_instruction_instruction[6:2] == 5'h10
              | io_instruction_instruction[6:2] == 5'h11
              | io_instruction_instruction[6:2] == 5'h12
              | io_instruction_instruction[6:2] == 5'h13
              | io_instruction_instruction[6:2] == 5'h14
              | io_instruction_instruction[6:2] == 5'h16
              | io_instruction_instruction[6:2] == 5'h18 | _is_INT_T_7 | _is_INT_T_5
              | _io_decoded_instruction_RD_valid_T_13
              | io_instruction_instruction[6:2] == 5'h1E)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Enum state must be valid, got %d!\n    at decoder.scala:66 assert(valid, \"Enum state must be valid, got %%%%d!\", opcode(6,2))\n",
                 io_instruction_instruction[6:2]);
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  assign io_decoded_instruction_RD = {1'h0, io_instruction_instruction[11:7]};
  assign io_decoded_instruction_RD_valid =
    _is_INT_T | IMMEDIATE | IS_LOAD | _is_INT_T_5 | _is_INT_T_7
    | _io_decoded_instruction_RD_valid_T_9 | _io_decoded_instruction_RD_valid_T_11
    | _io_decoded_instruction_RD_valid_T_13;
  assign io_decoded_instruction_RS1 = {1'h0, io_instruction_instruction[19:15]};
  assign io_decoded_instruction_RS2 = {1'h0, io_instruction_instruction[24:20]};
endmodule

module fetch_packet_decoder(
  input         clock,
                reset,
  input  [31:0] io_fetch_packet_bits_instructions_0_instruction,
                io_fetch_packet_bits_instructions_1_instruction,
                io_fetch_packet_bits_instructions_2_instruction,
                io_fetch_packet_bits_instructions_3_instruction,
  output [5:0]  io_decoded_fetch_packet_bits_0_RD,
  output        io_decoded_fetch_packet_bits_0_RD_valid,
  output [5:0]  io_decoded_fetch_packet_bits_0_RS1,
                io_decoded_fetch_packet_bits_0_RS2,
                io_decoded_fetch_packet_bits_1_RD,
  output        io_decoded_fetch_packet_bits_1_RD_valid,
  output [5:0]  io_decoded_fetch_packet_bits_1_RS1,
                io_decoded_fetch_packet_bits_1_RS2,
                io_decoded_fetch_packet_bits_2_RD,
  output        io_decoded_fetch_packet_bits_2_RD_valid,
  output [5:0]  io_decoded_fetch_packet_bits_2_RS1,
                io_decoded_fetch_packet_bits_2_RS2,
                io_decoded_fetch_packet_bits_3_RD,
  output        io_decoded_fetch_packet_bits_3_RD_valid,
  output [5:0]  io_decoded_fetch_packet_bits_3_RS1,
                io_decoded_fetch_packet_bits_3_RS2
);

  wire [5:0] _decoders_3_io_decoded_instruction_RD;
  wire       _decoders_3_io_decoded_instruction_RD_valid;
  wire [5:0] _decoders_3_io_decoded_instruction_RS1;
  wire [5:0] _decoders_3_io_decoded_instruction_RS2;
  wire [5:0] _decoders_2_io_decoded_instruction_RD;
  wire       _decoders_2_io_decoded_instruction_RD_valid;
  wire [5:0] _decoders_2_io_decoded_instruction_RS1;
  wire [5:0] _decoders_2_io_decoded_instruction_RS2;
  wire [5:0] _decoders_1_io_decoded_instruction_RD;
  wire       _decoders_1_io_decoded_instruction_RD_valid;
  wire [5:0] _decoders_1_io_decoded_instruction_RS1;
  wire [5:0] _decoders_1_io_decoded_instruction_RS2;
  wire [5:0] _decoders_0_io_decoded_instruction_RD;
  wire       _decoders_0_io_decoded_instruction_RD_valid;
  wire [5:0] _decoders_0_io_decoded_instruction_RS1;
  wire [5:0] _decoders_0_io_decoded_instruction_RS2;
  reg  [5:0] io_decoded_fetch_packet_bits_0_REG_RD;
  reg        io_decoded_fetch_packet_bits_0_REG_RD_valid;
  reg  [5:0] io_decoded_fetch_packet_bits_0_REG_RS1;
  reg  [5:0] io_decoded_fetch_packet_bits_0_REG_RS2;
  reg  [5:0] io_decoded_fetch_packet_bits_1_REG_RD;
  reg        io_decoded_fetch_packet_bits_1_REG_RD_valid;
  reg  [5:0] io_decoded_fetch_packet_bits_1_REG_RS1;
  reg  [5:0] io_decoded_fetch_packet_bits_1_REG_RS2;
  reg  [5:0] io_decoded_fetch_packet_bits_2_REG_RD;
  reg        io_decoded_fetch_packet_bits_2_REG_RD_valid;
  reg  [5:0] io_decoded_fetch_packet_bits_2_REG_RS1;
  reg  [5:0] io_decoded_fetch_packet_bits_2_REG_RS2;
  reg  [5:0] io_decoded_fetch_packet_bits_3_REG_RD;
  reg        io_decoded_fetch_packet_bits_3_REG_RD_valid;
  reg  [5:0] io_decoded_fetch_packet_bits_3_REG_RS1;
  reg  [5:0] io_decoded_fetch_packet_bits_3_REG_RS2;
  always @(posedge clock) begin
    io_decoded_fetch_packet_bits_0_REG_RD <= _decoders_0_io_decoded_instruction_RD;
    io_decoded_fetch_packet_bits_0_REG_RD_valid <=
      _decoders_0_io_decoded_instruction_RD_valid;
    io_decoded_fetch_packet_bits_0_REG_RS1 <= _decoders_0_io_decoded_instruction_RS1;
    io_decoded_fetch_packet_bits_0_REG_RS2 <= _decoders_0_io_decoded_instruction_RS2;
    io_decoded_fetch_packet_bits_1_REG_RD <= _decoders_1_io_decoded_instruction_RD;
    io_decoded_fetch_packet_bits_1_REG_RD_valid <=
      _decoders_1_io_decoded_instruction_RD_valid;
    io_decoded_fetch_packet_bits_1_REG_RS1 <= _decoders_1_io_decoded_instruction_RS1;
    io_decoded_fetch_packet_bits_1_REG_RS2 <= _decoders_1_io_decoded_instruction_RS2;
    io_decoded_fetch_packet_bits_2_REG_RD <= _decoders_2_io_decoded_instruction_RD;
    io_decoded_fetch_packet_bits_2_REG_RD_valid <=
      _decoders_2_io_decoded_instruction_RD_valid;
    io_decoded_fetch_packet_bits_2_REG_RS1 <= _decoders_2_io_decoded_instruction_RS1;
    io_decoded_fetch_packet_bits_2_REG_RS2 <= _decoders_2_io_decoded_instruction_RS2;
    io_decoded_fetch_packet_bits_3_REG_RD <= _decoders_3_io_decoded_instruction_RD;
    io_decoded_fetch_packet_bits_3_REG_RD_valid <=
      _decoders_3_io_decoded_instruction_RD_valid;
    io_decoded_fetch_packet_bits_3_REG_RS1 <= _decoders_3_io_decoded_instruction_RS1;
    io_decoded_fetch_packet_bits_3_REG_RS2 <= _decoders_3_io_decoded_instruction_RS2;
  end // always @(posedge)
  decoder decoders_0 (
    .clock                           (clock),
    .reset                           (reset),
    .io_instruction_instruction      (io_fetch_packet_bits_instructions_0_instruction),
    .io_decoded_instruction_RD       (_decoders_0_io_decoded_instruction_RD),
    .io_decoded_instruction_RD_valid (_decoders_0_io_decoded_instruction_RD_valid),
    .io_decoded_instruction_RS1      (_decoders_0_io_decoded_instruction_RS1),
    .io_decoded_instruction_RS2      (_decoders_0_io_decoded_instruction_RS2)
  );
  decoder decoders_1 (
    .clock                           (clock),
    .reset                           (reset),
    .io_instruction_instruction      (io_fetch_packet_bits_instructions_1_instruction),
    .io_decoded_instruction_RD       (_decoders_1_io_decoded_instruction_RD),
    .io_decoded_instruction_RD_valid (_decoders_1_io_decoded_instruction_RD_valid),
    .io_decoded_instruction_RS1      (_decoders_1_io_decoded_instruction_RS1),
    .io_decoded_instruction_RS2      (_decoders_1_io_decoded_instruction_RS2)
  );
  decoder decoders_2 (
    .clock                           (clock),
    .reset                           (reset),
    .io_instruction_instruction      (io_fetch_packet_bits_instructions_2_instruction),
    .io_decoded_instruction_RD       (_decoders_2_io_decoded_instruction_RD),
    .io_decoded_instruction_RD_valid (_decoders_2_io_decoded_instruction_RD_valid),
    .io_decoded_instruction_RS1      (_decoders_2_io_decoded_instruction_RS1),
    .io_decoded_instruction_RS2      (_decoders_2_io_decoded_instruction_RS2)
  );
  decoder decoders_3 (
    .clock                           (clock),
    .reset                           (reset),
    .io_instruction_instruction      (io_fetch_packet_bits_instructions_3_instruction),
    .io_decoded_instruction_RD       (_decoders_3_io_decoded_instruction_RD),
    .io_decoded_instruction_RD_valid (_decoders_3_io_decoded_instruction_RD_valid),
    .io_decoded_instruction_RS1      (_decoders_3_io_decoded_instruction_RS1),
    .io_decoded_instruction_RS2      (_decoders_3_io_decoded_instruction_RS2)
  );
  assign io_decoded_fetch_packet_bits_0_RD = io_decoded_fetch_packet_bits_0_REG_RD;
  assign io_decoded_fetch_packet_bits_0_RD_valid =
    io_decoded_fetch_packet_bits_0_REG_RD_valid;
  assign io_decoded_fetch_packet_bits_0_RS1 = io_decoded_fetch_packet_bits_0_REG_RS1;
  assign io_decoded_fetch_packet_bits_0_RS2 = io_decoded_fetch_packet_bits_0_REG_RS2;
  assign io_decoded_fetch_packet_bits_1_RD = io_decoded_fetch_packet_bits_1_REG_RD;
  assign io_decoded_fetch_packet_bits_1_RD_valid =
    io_decoded_fetch_packet_bits_1_REG_RD_valid;
  assign io_decoded_fetch_packet_bits_1_RS1 = io_decoded_fetch_packet_bits_1_REG_RS1;
  assign io_decoded_fetch_packet_bits_1_RS2 = io_decoded_fetch_packet_bits_1_REG_RS2;
  assign io_decoded_fetch_packet_bits_2_RD = io_decoded_fetch_packet_bits_2_REG_RD;
  assign io_decoded_fetch_packet_bits_2_RD_valid =
    io_decoded_fetch_packet_bits_2_REG_RD_valid;
  assign io_decoded_fetch_packet_bits_2_RS1 = io_decoded_fetch_packet_bits_2_REG_RS1;
  assign io_decoded_fetch_packet_bits_2_RS2 = io_decoded_fetch_packet_bits_2_REG_RS2;
  assign io_decoded_fetch_packet_bits_3_RD = io_decoded_fetch_packet_bits_3_REG_RD;
  assign io_decoded_fetch_packet_bits_3_RD_valid =
    io_decoded_fetch_packet_bits_3_REG_RD_valid;
  assign io_decoded_fetch_packet_bits_3_RS1 = io_decoded_fetch_packet_bits_3_REG_RS1;
  assign io_decoded_fetch_packet_bits_3_RS2 = io_decoded_fetch_packet_bits_3_REG_RS2;
endmodule

module reorder_free_inputs();
  wire [3:0] sels_0 = 4'h0;
  wire [3:0] sels_1 = 4'h0;
  wire [3:0] sels_2 = 4'h0;
  wire [3:0] sels_3 = 4'h0;
endmodule

module reorder_renamed_outputs(
  input        io_renamed_valid_0,
               io_renamed_valid_1,
               io_renamed_valid_2,
               io_renamed_valid_3,
  input  [5:0] io_renamed_values_0,
               io_renamed_values_1,
               io_renamed_values_2,
               io_renamed_values_3,
  output [5:0] io_renamed_values_sorted_0,
               io_renamed_values_sorted_1,
               io_renamed_values_sorted_2,
               io_renamed_values_sorted_3
);

  wire [1:0]      _GEN = {1'h0, io_renamed_valid_0};
  wire [1:0]      _GEN_0 = {1'h0, io_renamed_valid_1};
  wire [3:0][5:0] _GEN_1 =
    {{io_renamed_values_3},
     {io_renamed_values_2},
     {io_renamed_values_1},
     {io_renamed_values_0}};
  assign io_renamed_values_sorted_0 = io_renamed_values_0;
  assign io_renamed_values_sorted_1 = _GEN_1[{1'h0, io_renamed_valid_0}];
  assign io_renamed_values_sorted_2 = _GEN_1[_GEN + _GEN_0];
  assign io_renamed_values_sorted_3 = _GEN_1[_GEN + _GEN_0 + {1'h0, io_renamed_valid_2}];
endmodule

module free_list(
  input        clock,
               reset,
               io_rename_valid_0,
               io_rename_valid_1,
               io_rename_valid_2,
               io_rename_valid_3,
  output [5:0] io_renamed_values_0,
               io_renamed_values_1,
               io_renamed_values_2,
               io_renamed_values_3
);

  wire [63:0][5:0] _GEN =
    '{6'h3F,
      6'h3E,
      6'h3D,
      6'h3C,
      6'h3B,
      6'h3A,
      6'h39,
      6'h38,
      6'h37,
      6'h36,
      6'h35,
      6'h34,
      6'h33,
      6'h32,
      6'h31,
      6'h30,
      6'h2F,
      6'h2E,
      6'h2D,
      6'h2C,
      6'h2B,
      6'h2A,
      6'h29,
      6'h28,
      6'h27,
      6'h26,
      6'h25,
      6'h24,
      6'h23,
      6'h22,
      6'h21,
      6'h20,
      6'h1F,
      6'h1E,
      6'h1D,
      6'h1C,
      6'h1B,
      6'h1A,
      6'h19,
      6'h18,
      6'h17,
      6'h16,
      6'h15,
      6'h14,
      6'h13,
      6'h12,
      6'h11,
      6'h10,
      6'hF,
      6'hE,
      6'hD,
      6'hC,
      6'hB,
      6'hA,
      6'h9,
      6'h8,
      6'h7,
      6'h6,
      6'h5,
      6'h4,
      6'h3,
      6'h2,
      6'h1,
      6'h0};
  reg  [6:0]       front_pointer;
  always @(posedge clock) begin
    if (reset)
      front_pointer <= 7'h0;
    else begin
      automatic logic [6:0] _io_empty_T_5 = front_pointer + 7'h4;
      if (~(_io_empty_T_5[5:0] == 6'h0 & _io_empty_T_5[6]))
        front_pointer <=
          front_pointer
          + {4'h0,
             {1'h0, {1'h0, io_rename_valid_0} + {1'h0, io_rename_valid_1}}
               + {1'h0, {1'h0, io_rename_valid_2} + {1'h0, io_rename_valid_3}}};
    end
  end // always @(posedge)
  reorder_free_inputs input_sorter ();
  reorder_renamed_outputs output_sorter (
    .io_renamed_valid_0         (io_rename_valid_0),
    .io_renamed_valid_1         (io_rename_valid_1),
    .io_renamed_valid_2         (io_rename_valid_2),
    .io_renamed_valid_3         (io_rename_valid_3),
    .io_renamed_values_0        (_GEN[front_pointer[5:0]]),
    .io_renamed_values_1        (_GEN[front_pointer[5:0] + 6'h1]),
    .io_renamed_values_2        (_GEN[front_pointer[5:0] + 6'h2]),
    .io_renamed_values_3        (_GEN[front_pointer[5:0] + 6'h3]),
    .io_renamed_values_sorted_0 (io_renamed_values_0),
    .io_renamed_values_sorted_1 (io_renamed_values_1),
    .io_renamed_values_sorted_2 (io_renamed_values_2),
    .io_renamed_values_sorted_3 (io_renamed_values_3)
  );
endmodule

module WAW_handler(
  input        io_decoder_RD_valid_bits_0,
               io_decoder_RD_valid_bits_1,
               io_decoder_RD_valid_bits_2,
               io_decoder_RD_valid_bits_3,
  input  [4:0] io_decoder_RD_values_0,
               io_decoder_RD_values_1,
               io_decoder_RD_values_2,
               io_decoder_RD_values_3,
  input  [5:0] io_free_list_RD_values_0,
               io_free_list_RD_values_1,
               io_free_list_RD_values_2,
               io_free_list_RD_values_3,
  output       io_RAT_wr_en_0,
               io_RAT_wr_en_1,
               io_RAT_wr_en_2,
               io_RAT_wr_en_3,
  output [5:0] io_FL_RD_values_0,
               io_FL_RD_values_1,
               io_FL_RD_values_2,
               io_FL_RD_values_3
);

  assign io_RAT_wr_en_0 =
    io_decoder_RD_valid_bits_0
    & (io_decoder_RD_values_0 != io_decoder_RD_values_1 | ~io_decoder_RD_valid_bits_1)
    & (io_decoder_RD_values_0 != io_decoder_RD_values_2 | ~io_decoder_RD_valid_bits_2)
    & (io_decoder_RD_values_0 != io_decoder_RD_values_3 | ~io_decoder_RD_valid_bits_3);
  assign io_RAT_wr_en_1 =
    io_decoder_RD_valid_bits_1
    & (io_decoder_RD_values_1 != io_decoder_RD_values_2 | ~io_decoder_RD_valid_bits_2)
    & (io_decoder_RD_values_1 != io_decoder_RD_values_3 | ~io_decoder_RD_valid_bits_3);
  assign io_RAT_wr_en_2 =
    io_decoder_RD_valid_bits_2
    & (io_decoder_RD_values_2 != io_decoder_RD_values_3 | ~io_decoder_RD_valid_bits_3);
  assign io_RAT_wr_en_3 = io_decoder_RD_valid_bits_3;
  assign io_FL_RD_values_0 = io_free_list_RD_values_0;
  assign io_FL_RD_values_1 = io_free_list_RD_values_1;
  assign io_FL_RD_values_2 = io_free_list_RD_values_2;
  assign io_FL_RD_values_3 = io_free_list_RD_values_3;
endmodule

module RAT(
  input        clock,
               reset,
  input  [4:0] io_instruction_RD_0,
               io_instruction_RD_1,
               io_instruction_RD_2,
               io_instruction_RD_3,
               io_instruction_RS1_0,
               io_instruction_RS1_1,
               io_instruction_RS1_2,
               io_instruction_RS1_3,
               io_instruction_RS2_0,
               io_instruction_RS2_1,
               io_instruction_RS2_2,
               io_instruction_RS2_3,
  input        io_free_list_wr_en_0,
               io_free_list_wr_en_1,
               io_free_list_wr_en_2,
               io_free_list_wr_en_3,
  input  [5:0] io_free_list_RD_0,
               io_free_list_RD_1,
               io_free_list_RD_2,
               io_free_list_RD_3,
  output [5:0] io_RAT_RD_0,
               io_RAT_RD_1,
               io_RAT_RD_2,
               io_RAT_RD_3,
               io_RAT_RS1_0,
               io_RAT_RS1_1,
               io_RAT_RS1_2,
               io_RAT_RS1_3,
               io_RAT_RS2_0,
               io_RAT_RS2_1,
               io_RAT_RS2_2,
               io_RAT_RS2_3
);

  reg  [5:0] RAT_memories_0_0;
  reg  [5:0] RAT_memories_0_1;
  reg  [5:0] RAT_memories_0_2;
  reg  [5:0] RAT_memories_0_3;
  reg  [5:0] RAT_memories_0_4;
  reg  [5:0] RAT_memories_0_5;
  reg  [5:0] RAT_memories_0_6;
  reg  [5:0] RAT_memories_0_7;
  reg  [5:0] RAT_memories_0_8;
  reg  [5:0] RAT_memories_0_9;
  reg  [5:0] RAT_memories_0_10;
  reg  [5:0] RAT_memories_0_11;
  reg  [5:0] RAT_memories_0_12;
  reg  [5:0] RAT_memories_0_13;
  reg  [5:0] RAT_memories_0_14;
  reg  [5:0] RAT_memories_0_15;
  reg  [5:0] RAT_memories_0_16;
  reg  [5:0] RAT_memories_0_17;
  reg  [5:0] RAT_memories_0_18;
  reg  [5:0] RAT_memories_0_19;
  reg  [5:0] RAT_memories_0_20;
  reg  [5:0] RAT_memories_0_21;
  reg  [5:0] RAT_memories_0_22;
  reg  [5:0] RAT_memories_0_23;
  reg  [5:0] RAT_memories_0_24;
  reg  [5:0] RAT_memories_0_25;
  reg  [5:0] RAT_memories_0_26;
  reg  [5:0] RAT_memories_0_27;
  reg  [5:0] RAT_memories_0_28;
  reg  [5:0] RAT_memories_0_29;
  reg  [5:0] RAT_memories_0_30;
  reg  [5:0] RAT_memories_0_31;
  reg  [5:0] io_RAT_RD_0_REG;
  reg  [5:0] io_RAT_RS1_0_REG;
  reg  [5:0] io_RAT_RS2_0_REG;
  reg  [5:0] io_RAT_RD_1_REG;
  reg  [5:0] io_RAT_RS1_1_REG;
  reg  [5:0] io_RAT_RS2_1_REG;
  reg  [5:0] io_RAT_RD_2_REG;
  reg  [5:0] io_RAT_RS1_2_REG;
  reg  [5:0] io_RAT_RS2_2_REG;
  reg  [5:0] io_RAT_RD_3_REG;
  reg  [5:0] io_RAT_RS1_3_REG;
  reg  [5:0] io_RAT_RS2_3_REG;
  wire       _GEN = io_instruction_RD_0 == 5'h0;
  wire       _GEN_0 = io_instruction_RD_1 == 5'h0;
  wire       _GEN_1 = io_instruction_RD_2 == 5'h0;
  wire       _GEN_2 = io_instruction_RD_3 == 5'h0;
  wire       is_being_written_vec_0 =
    _GEN & io_free_list_wr_en_0 | _GEN_0 & io_free_list_wr_en_1 | _GEN_1
    & io_free_list_wr_en_2 | _GEN_2 & io_free_list_wr_en_3;
  wire       _GEN_3 = io_instruction_RD_0 == 5'h1;
  wire       _GEN_4 = io_instruction_RD_1 == 5'h1;
  wire       _GEN_5 = io_instruction_RD_2 == 5'h1;
  wire       _GEN_6 = io_instruction_RD_3 == 5'h1;
  wire       is_being_written_vec_1 =
    _GEN_3 & io_free_list_wr_en_0 | _GEN_4 & io_free_list_wr_en_1 | _GEN_5
    & io_free_list_wr_en_2 | _GEN_6 & io_free_list_wr_en_3;
  wire       _GEN_7 = io_instruction_RD_0 == 5'h2;
  wire       _GEN_8 = io_instruction_RD_1 == 5'h2;
  wire       _GEN_9 = io_instruction_RD_2 == 5'h2;
  wire       _GEN_10 = io_instruction_RD_3 == 5'h2;
  wire       is_being_written_vec_2 =
    _GEN_7 & io_free_list_wr_en_0 | _GEN_8 & io_free_list_wr_en_1 | _GEN_9
    & io_free_list_wr_en_2 | _GEN_10 & io_free_list_wr_en_3;
  wire       _GEN_11 = io_instruction_RD_0 == 5'h3;
  wire       _GEN_12 = io_instruction_RD_1 == 5'h3;
  wire       _GEN_13 = io_instruction_RD_2 == 5'h3;
  wire       _GEN_14 = io_instruction_RD_3 == 5'h3;
  wire       is_being_written_vec_3 =
    _GEN_11 & io_free_list_wr_en_0 | _GEN_12 & io_free_list_wr_en_1 | _GEN_13
    & io_free_list_wr_en_2 | _GEN_14 & io_free_list_wr_en_3;
  wire       _GEN_15 = io_instruction_RD_0 == 5'h4;
  wire       _GEN_16 = io_instruction_RD_1 == 5'h4;
  wire       _GEN_17 = io_instruction_RD_2 == 5'h4;
  wire       _GEN_18 = io_instruction_RD_3 == 5'h4;
  wire       is_being_written_vec_4 =
    _GEN_15 & io_free_list_wr_en_0 | _GEN_16 & io_free_list_wr_en_1 | _GEN_17
    & io_free_list_wr_en_2 | _GEN_18 & io_free_list_wr_en_3;
  wire       _GEN_19 = io_instruction_RD_0 == 5'h5;
  wire       _GEN_20 = io_instruction_RD_1 == 5'h5;
  wire       _GEN_21 = io_instruction_RD_2 == 5'h5;
  wire       _GEN_22 = io_instruction_RD_3 == 5'h5;
  wire       is_being_written_vec_5 =
    _GEN_19 & io_free_list_wr_en_0 | _GEN_20 & io_free_list_wr_en_1 | _GEN_21
    & io_free_list_wr_en_2 | _GEN_22 & io_free_list_wr_en_3;
  wire       _GEN_23 = io_instruction_RD_0 == 5'h6;
  wire       _GEN_24 = io_instruction_RD_1 == 5'h6;
  wire       _GEN_25 = io_instruction_RD_2 == 5'h6;
  wire       _GEN_26 = io_instruction_RD_3 == 5'h6;
  wire       is_being_written_vec_6 =
    _GEN_23 & io_free_list_wr_en_0 | _GEN_24 & io_free_list_wr_en_1 | _GEN_25
    & io_free_list_wr_en_2 | _GEN_26 & io_free_list_wr_en_3;
  wire       _GEN_27 = io_instruction_RD_0 == 5'h7;
  wire       _GEN_28 = io_instruction_RD_1 == 5'h7;
  wire       _GEN_29 = io_instruction_RD_2 == 5'h7;
  wire       _GEN_30 = io_instruction_RD_3 == 5'h7;
  wire       is_being_written_vec_7 =
    _GEN_27 & io_free_list_wr_en_0 | _GEN_28 & io_free_list_wr_en_1 | _GEN_29
    & io_free_list_wr_en_2 | _GEN_30 & io_free_list_wr_en_3;
  wire       _GEN_31 = io_instruction_RD_0 == 5'h8;
  wire       _GEN_32 = io_instruction_RD_1 == 5'h8;
  wire       _GEN_33 = io_instruction_RD_2 == 5'h8;
  wire       _GEN_34 = io_instruction_RD_3 == 5'h8;
  wire       is_being_written_vec_8 =
    _GEN_31 & io_free_list_wr_en_0 | _GEN_32 & io_free_list_wr_en_1 | _GEN_33
    & io_free_list_wr_en_2 | _GEN_34 & io_free_list_wr_en_3;
  wire       _GEN_35 = io_instruction_RD_0 == 5'h9;
  wire       _GEN_36 = io_instruction_RD_1 == 5'h9;
  wire       _GEN_37 = io_instruction_RD_2 == 5'h9;
  wire       _GEN_38 = io_instruction_RD_3 == 5'h9;
  wire       is_being_written_vec_9 =
    _GEN_35 & io_free_list_wr_en_0 | _GEN_36 & io_free_list_wr_en_1 | _GEN_37
    & io_free_list_wr_en_2 | _GEN_38 & io_free_list_wr_en_3;
  wire       _GEN_39 = io_instruction_RD_0 == 5'hA;
  wire       _GEN_40 = io_instruction_RD_1 == 5'hA;
  wire       _GEN_41 = io_instruction_RD_2 == 5'hA;
  wire       _GEN_42 = io_instruction_RD_3 == 5'hA;
  wire       is_being_written_vec_10 =
    _GEN_39 & io_free_list_wr_en_0 | _GEN_40 & io_free_list_wr_en_1 | _GEN_41
    & io_free_list_wr_en_2 | _GEN_42 & io_free_list_wr_en_3;
  wire       _GEN_43 = io_instruction_RD_0 == 5'hB;
  wire       _GEN_44 = io_instruction_RD_1 == 5'hB;
  wire       _GEN_45 = io_instruction_RD_2 == 5'hB;
  wire       _GEN_46 = io_instruction_RD_3 == 5'hB;
  wire       is_being_written_vec_11 =
    _GEN_43 & io_free_list_wr_en_0 | _GEN_44 & io_free_list_wr_en_1 | _GEN_45
    & io_free_list_wr_en_2 | _GEN_46 & io_free_list_wr_en_3;
  wire       _GEN_47 = io_instruction_RD_0 == 5'hC;
  wire       _GEN_48 = io_instruction_RD_1 == 5'hC;
  wire       _GEN_49 = io_instruction_RD_2 == 5'hC;
  wire       _GEN_50 = io_instruction_RD_3 == 5'hC;
  wire       is_being_written_vec_12 =
    _GEN_47 & io_free_list_wr_en_0 | _GEN_48 & io_free_list_wr_en_1 | _GEN_49
    & io_free_list_wr_en_2 | _GEN_50 & io_free_list_wr_en_3;
  wire       _GEN_51 = io_instruction_RD_0 == 5'hD;
  wire       _GEN_52 = io_instruction_RD_1 == 5'hD;
  wire       _GEN_53 = io_instruction_RD_2 == 5'hD;
  wire       _GEN_54 = io_instruction_RD_3 == 5'hD;
  wire       is_being_written_vec_13 =
    _GEN_51 & io_free_list_wr_en_0 | _GEN_52 & io_free_list_wr_en_1 | _GEN_53
    & io_free_list_wr_en_2 | _GEN_54 & io_free_list_wr_en_3;
  wire       _GEN_55 = io_instruction_RD_0 == 5'hE;
  wire       _GEN_56 = io_instruction_RD_1 == 5'hE;
  wire       _GEN_57 = io_instruction_RD_2 == 5'hE;
  wire       _GEN_58 = io_instruction_RD_3 == 5'hE;
  wire       is_being_written_vec_14 =
    _GEN_55 & io_free_list_wr_en_0 | _GEN_56 & io_free_list_wr_en_1 | _GEN_57
    & io_free_list_wr_en_2 | _GEN_58 & io_free_list_wr_en_3;
  wire       _GEN_59 = io_instruction_RD_0 == 5'hF;
  wire       _GEN_60 = io_instruction_RD_1 == 5'hF;
  wire       _GEN_61 = io_instruction_RD_2 == 5'hF;
  wire       _GEN_62 = io_instruction_RD_3 == 5'hF;
  wire       is_being_written_vec_15 =
    _GEN_59 & io_free_list_wr_en_0 | _GEN_60 & io_free_list_wr_en_1 | _GEN_61
    & io_free_list_wr_en_2 | _GEN_62 & io_free_list_wr_en_3;
  wire       _GEN_63 = io_instruction_RD_0 == 5'h10;
  wire       _GEN_64 = io_instruction_RD_1 == 5'h10;
  wire       _GEN_65 = io_instruction_RD_2 == 5'h10;
  wire       _GEN_66 = io_instruction_RD_3 == 5'h10;
  wire       is_being_written_vec_16 =
    _GEN_63 & io_free_list_wr_en_0 | _GEN_64 & io_free_list_wr_en_1 | _GEN_65
    & io_free_list_wr_en_2 | _GEN_66 & io_free_list_wr_en_3;
  wire       _GEN_67 = io_instruction_RD_0 == 5'h11;
  wire       _GEN_68 = io_instruction_RD_1 == 5'h11;
  wire       _GEN_69 = io_instruction_RD_2 == 5'h11;
  wire       _GEN_70 = io_instruction_RD_3 == 5'h11;
  wire       is_being_written_vec_17 =
    _GEN_67 & io_free_list_wr_en_0 | _GEN_68 & io_free_list_wr_en_1 | _GEN_69
    & io_free_list_wr_en_2 | _GEN_70 & io_free_list_wr_en_3;
  wire       _GEN_71 = io_instruction_RD_0 == 5'h12;
  wire       _GEN_72 = io_instruction_RD_1 == 5'h12;
  wire       _GEN_73 = io_instruction_RD_2 == 5'h12;
  wire       _GEN_74 = io_instruction_RD_3 == 5'h12;
  wire       is_being_written_vec_18 =
    _GEN_71 & io_free_list_wr_en_0 | _GEN_72 & io_free_list_wr_en_1 | _GEN_73
    & io_free_list_wr_en_2 | _GEN_74 & io_free_list_wr_en_3;
  wire       _GEN_75 = io_instruction_RD_0 == 5'h13;
  wire       _GEN_76 = io_instruction_RD_1 == 5'h13;
  wire       _GEN_77 = io_instruction_RD_2 == 5'h13;
  wire       _GEN_78 = io_instruction_RD_3 == 5'h13;
  wire       is_being_written_vec_19 =
    _GEN_75 & io_free_list_wr_en_0 | _GEN_76 & io_free_list_wr_en_1 | _GEN_77
    & io_free_list_wr_en_2 | _GEN_78 & io_free_list_wr_en_3;
  wire       _GEN_79 = io_instruction_RD_0 == 5'h14;
  wire       _GEN_80 = io_instruction_RD_1 == 5'h14;
  wire       _GEN_81 = io_instruction_RD_2 == 5'h14;
  wire       _GEN_82 = io_instruction_RD_3 == 5'h14;
  wire       is_being_written_vec_20 =
    _GEN_79 & io_free_list_wr_en_0 | _GEN_80 & io_free_list_wr_en_1 | _GEN_81
    & io_free_list_wr_en_2 | _GEN_82 & io_free_list_wr_en_3;
  wire       _GEN_83 = io_instruction_RD_0 == 5'h15;
  wire       _GEN_84 = io_instruction_RD_1 == 5'h15;
  wire       _GEN_85 = io_instruction_RD_2 == 5'h15;
  wire       _GEN_86 = io_instruction_RD_3 == 5'h15;
  wire       is_being_written_vec_21 =
    _GEN_83 & io_free_list_wr_en_0 | _GEN_84 & io_free_list_wr_en_1 | _GEN_85
    & io_free_list_wr_en_2 | _GEN_86 & io_free_list_wr_en_3;
  wire       _GEN_87 = io_instruction_RD_0 == 5'h16;
  wire       _GEN_88 = io_instruction_RD_1 == 5'h16;
  wire       _GEN_89 = io_instruction_RD_2 == 5'h16;
  wire       _GEN_90 = io_instruction_RD_3 == 5'h16;
  wire       is_being_written_vec_22 =
    _GEN_87 & io_free_list_wr_en_0 | _GEN_88 & io_free_list_wr_en_1 | _GEN_89
    & io_free_list_wr_en_2 | _GEN_90 & io_free_list_wr_en_3;
  wire       _GEN_91 = io_instruction_RD_0 == 5'h17;
  wire       _GEN_92 = io_instruction_RD_1 == 5'h17;
  wire       _GEN_93 = io_instruction_RD_2 == 5'h17;
  wire       _GEN_94 = io_instruction_RD_3 == 5'h17;
  wire       is_being_written_vec_23 =
    _GEN_91 & io_free_list_wr_en_0 | _GEN_92 & io_free_list_wr_en_1 | _GEN_93
    & io_free_list_wr_en_2 | _GEN_94 & io_free_list_wr_en_3;
  wire       _GEN_95 = io_instruction_RD_0 == 5'h18;
  wire       _GEN_96 = io_instruction_RD_1 == 5'h18;
  wire       _GEN_97 = io_instruction_RD_2 == 5'h18;
  wire       _GEN_98 = io_instruction_RD_3 == 5'h18;
  wire       is_being_written_vec_24 =
    _GEN_95 & io_free_list_wr_en_0 | _GEN_96 & io_free_list_wr_en_1 | _GEN_97
    & io_free_list_wr_en_2 | _GEN_98 & io_free_list_wr_en_3;
  wire       _GEN_99 = io_instruction_RD_0 == 5'h19;
  wire       _GEN_100 = io_instruction_RD_1 == 5'h19;
  wire       _GEN_101 = io_instruction_RD_2 == 5'h19;
  wire       _GEN_102 = io_instruction_RD_3 == 5'h19;
  wire       is_being_written_vec_25 =
    _GEN_99 & io_free_list_wr_en_0 | _GEN_100 & io_free_list_wr_en_1 | _GEN_101
    & io_free_list_wr_en_2 | _GEN_102 & io_free_list_wr_en_3;
  wire       _GEN_103 = io_instruction_RD_0 == 5'h1A;
  wire       _GEN_104 = io_instruction_RD_1 == 5'h1A;
  wire       _GEN_105 = io_instruction_RD_2 == 5'h1A;
  wire       _GEN_106 = io_instruction_RD_3 == 5'h1A;
  wire       is_being_written_vec_26 =
    _GEN_103 & io_free_list_wr_en_0 | _GEN_104 & io_free_list_wr_en_1 | _GEN_105
    & io_free_list_wr_en_2 | _GEN_106 & io_free_list_wr_en_3;
  wire       _GEN_107 = io_instruction_RD_0 == 5'h1B;
  wire       _GEN_108 = io_instruction_RD_1 == 5'h1B;
  wire       _GEN_109 = io_instruction_RD_2 == 5'h1B;
  wire       _GEN_110 = io_instruction_RD_3 == 5'h1B;
  wire       is_being_written_vec_27 =
    _GEN_107 & io_free_list_wr_en_0 | _GEN_108 & io_free_list_wr_en_1 | _GEN_109
    & io_free_list_wr_en_2 | _GEN_110 & io_free_list_wr_en_3;
  wire       _GEN_111 = io_instruction_RD_0 == 5'h1C;
  wire       _GEN_112 = io_instruction_RD_1 == 5'h1C;
  wire       _GEN_113 = io_instruction_RD_2 == 5'h1C;
  wire       _GEN_114 = io_instruction_RD_3 == 5'h1C;
  wire       is_being_written_vec_28 =
    _GEN_111 & io_free_list_wr_en_0 | _GEN_112 & io_free_list_wr_en_1 | _GEN_113
    & io_free_list_wr_en_2 | _GEN_114 & io_free_list_wr_en_3;
  wire       _GEN_115 = io_instruction_RD_0 == 5'h1D;
  wire       _GEN_116 = io_instruction_RD_1 == 5'h1D;
  wire       _GEN_117 = io_instruction_RD_2 == 5'h1D;
  wire       _GEN_118 = io_instruction_RD_3 == 5'h1D;
  wire       is_being_written_vec_29 =
    _GEN_115 & io_free_list_wr_en_0 | _GEN_116 & io_free_list_wr_en_1 | _GEN_117
    & io_free_list_wr_en_2 | _GEN_118 & io_free_list_wr_en_3;
  wire       _GEN_119 = io_instruction_RD_0 == 5'h1E;
  wire       _GEN_120 = io_instruction_RD_1 == 5'h1E;
  wire       _GEN_121 = io_instruction_RD_2 == 5'h1E;
  wire       _GEN_122 = io_instruction_RD_3 == 5'h1E;
  wire       is_being_written_vec_30 =
    _GEN_119 & io_free_list_wr_en_0 | _GEN_120 & io_free_list_wr_en_1 | _GEN_121
    & io_free_list_wr_en_2 | _GEN_122 & io_free_list_wr_en_3;
  wire       is_being_written_vec_31 =
    (&io_instruction_RD_0) & io_free_list_wr_en_0 | (&io_instruction_RD_1)
    & io_free_list_wr_en_1 | (&io_instruction_RD_2) & io_free_list_wr_en_2
    | (&io_instruction_RD_3) & io_free_list_wr_en_3;
  wire [5:0] wr_data_in_0 =
    _GEN_2
      ? io_free_list_RD_3
      : _GEN_1
          ? io_free_list_RD_2
          : _GEN_0 ? io_free_list_RD_1 : _GEN ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_1 =
    _GEN_6
      ? io_free_list_RD_3
      : _GEN_5
          ? io_free_list_RD_2
          : _GEN_4 ? io_free_list_RD_1 : _GEN_3 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_2 =
    _GEN_10
      ? io_free_list_RD_3
      : _GEN_9
          ? io_free_list_RD_2
          : _GEN_8 ? io_free_list_RD_1 : _GEN_7 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_3 =
    _GEN_14
      ? io_free_list_RD_3
      : _GEN_13
          ? io_free_list_RD_2
          : _GEN_12 ? io_free_list_RD_1 : _GEN_11 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_4 =
    _GEN_18
      ? io_free_list_RD_3
      : _GEN_17
          ? io_free_list_RD_2
          : _GEN_16 ? io_free_list_RD_1 : _GEN_15 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_5 =
    _GEN_22
      ? io_free_list_RD_3
      : _GEN_21
          ? io_free_list_RD_2
          : _GEN_20 ? io_free_list_RD_1 : _GEN_19 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_6 =
    _GEN_26
      ? io_free_list_RD_3
      : _GEN_25
          ? io_free_list_RD_2
          : _GEN_24 ? io_free_list_RD_1 : _GEN_23 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_7 =
    _GEN_30
      ? io_free_list_RD_3
      : _GEN_29
          ? io_free_list_RD_2
          : _GEN_28 ? io_free_list_RD_1 : _GEN_27 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_8 =
    _GEN_34
      ? io_free_list_RD_3
      : _GEN_33
          ? io_free_list_RD_2
          : _GEN_32 ? io_free_list_RD_1 : _GEN_31 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_9 =
    _GEN_38
      ? io_free_list_RD_3
      : _GEN_37
          ? io_free_list_RD_2
          : _GEN_36 ? io_free_list_RD_1 : _GEN_35 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_10 =
    _GEN_42
      ? io_free_list_RD_3
      : _GEN_41
          ? io_free_list_RD_2
          : _GEN_40 ? io_free_list_RD_1 : _GEN_39 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_11 =
    _GEN_46
      ? io_free_list_RD_3
      : _GEN_45
          ? io_free_list_RD_2
          : _GEN_44 ? io_free_list_RD_1 : _GEN_43 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_12 =
    _GEN_50
      ? io_free_list_RD_3
      : _GEN_49
          ? io_free_list_RD_2
          : _GEN_48 ? io_free_list_RD_1 : _GEN_47 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_13 =
    _GEN_54
      ? io_free_list_RD_3
      : _GEN_53
          ? io_free_list_RD_2
          : _GEN_52 ? io_free_list_RD_1 : _GEN_51 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_14 =
    _GEN_58
      ? io_free_list_RD_3
      : _GEN_57
          ? io_free_list_RD_2
          : _GEN_56 ? io_free_list_RD_1 : _GEN_55 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_15 =
    _GEN_62
      ? io_free_list_RD_3
      : _GEN_61
          ? io_free_list_RD_2
          : _GEN_60 ? io_free_list_RD_1 : _GEN_59 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_16 =
    _GEN_66
      ? io_free_list_RD_3
      : _GEN_65
          ? io_free_list_RD_2
          : _GEN_64 ? io_free_list_RD_1 : _GEN_63 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_17 =
    _GEN_70
      ? io_free_list_RD_3
      : _GEN_69
          ? io_free_list_RD_2
          : _GEN_68 ? io_free_list_RD_1 : _GEN_67 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_18 =
    _GEN_74
      ? io_free_list_RD_3
      : _GEN_73
          ? io_free_list_RD_2
          : _GEN_72 ? io_free_list_RD_1 : _GEN_71 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_19 =
    _GEN_78
      ? io_free_list_RD_3
      : _GEN_77
          ? io_free_list_RD_2
          : _GEN_76 ? io_free_list_RD_1 : _GEN_75 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_20 =
    _GEN_82
      ? io_free_list_RD_3
      : _GEN_81
          ? io_free_list_RD_2
          : _GEN_80 ? io_free_list_RD_1 : _GEN_79 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_21 =
    _GEN_86
      ? io_free_list_RD_3
      : _GEN_85
          ? io_free_list_RD_2
          : _GEN_84 ? io_free_list_RD_1 : _GEN_83 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_22 =
    _GEN_90
      ? io_free_list_RD_3
      : _GEN_89
          ? io_free_list_RD_2
          : _GEN_88 ? io_free_list_RD_1 : _GEN_87 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_23 =
    _GEN_94
      ? io_free_list_RD_3
      : _GEN_93
          ? io_free_list_RD_2
          : _GEN_92 ? io_free_list_RD_1 : _GEN_91 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_24 =
    _GEN_98
      ? io_free_list_RD_3
      : _GEN_97
          ? io_free_list_RD_2
          : _GEN_96 ? io_free_list_RD_1 : _GEN_95 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_25 =
    _GEN_102
      ? io_free_list_RD_3
      : _GEN_101
          ? io_free_list_RD_2
          : _GEN_100 ? io_free_list_RD_1 : _GEN_99 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_26 =
    _GEN_106
      ? io_free_list_RD_3
      : _GEN_105
          ? io_free_list_RD_2
          : _GEN_104 ? io_free_list_RD_1 : _GEN_103 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_27 =
    _GEN_110
      ? io_free_list_RD_3
      : _GEN_109
          ? io_free_list_RD_2
          : _GEN_108 ? io_free_list_RD_1 : _GEN_107 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_28 =
    _GEN_114
      ? io_free_list_RD_3
      : _GEN_113
          ? io_free_list_RD_2
          : _GEN_112 ? io_free_list_RD_1 : _GEN_111 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_29 =
    _GEN_118
      ? io_free_list_RD_3
      : _GEN_117
          ? io_free_list_RD_2
          : _GEN_116 ? io_free_list_RD_1 : _GEN_115 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_30 =
    _GEN_122
      ? io_free_list_RD_3
      : _GEN_121
          ? io_free_list_RD_2
          : _GEN_120 ? io_free_list_RD_1 : _GEN_119 ? io_free_list_RD_0 : 6'h0;
  wire [5:0] wr_data_in_31 =
    (&io_instruction_RD_3)
      ? io_free_list_RD_3
      : (&io_instruction_RD_2)
          ? io_free_list_RD_2
          : (&io_instruction_RD_1)
              ? io_free_list_RD_1
              : (&io_instruction_RD_0) ? io_free_list_RD_0 : 6'h0;
  always @(posedge clock) begin
    automatic logic [31:0][5:0] _GEN_123 =
      {{RAT_memories_0_31},
       {RAT_memories_0_30},
       {RAT_memories_0_29},
       {RAT_memories_0_28},
       {RAT_memories_0_27},
       {RAT_memories_0_26},
       {RAT_memories_0_25},
       {RAT_memories_0_24},
       {RAT_memories_0_23},
       {RAT_memories_0_22},
       {RAT_memories_0_21},
       {RAT_memories_0_20},
       {RAT_memories_0_19},
       {RAT_memories_0_18},
       {RAT_memories_0_17},
       {RAT_memories_0_16},
       {RAT_memories_0_15},
       {RAT_memories_0_14},
       {RAT_memories_0_13},
       {RAT_memories_0_12},
       {RAT_memories_0_11},
       {RAT_memories_0_10},
       {RAT_memories_0_9},
       {RAT_memories_0_8},
       {RAT_memories_0_7},
       {RAT_memories_0_6},
       {RAT_memories_0_5},
       {RAT_memories_0_4},
       {RAT_memories_0_3},
       {RAT_memories_0_2},
       {RAT_memories_0_1},
       {RAT_memories_0_0}};
    if (reset) begin
      RAT_memories_0_0 <= 6'h0;
      RAT_memories_0_1 <= 6'h0;
      RAT_memories_0_2 <= 6'h0;
      RAT_memories_0_3 <= 6'h0;
      RAT_memories_0_4 <= 6'h0;
      RAT_memories_0_5 <= 6'h0;
      RAT_memories_0_6 <= 6'h0;
      RAT_memories_0_7 <= 6'h0;
      RAT_memories_0_8 <= 6'h0;
      RAT_memories_0_9 <= 6'h0;
      RAT_memories_0_10 <= 6'h0;
      RAT_memories_0_11 <= 6'h0;
      RAT_memories_0_12 <= 6'h0;
      RAT_memories_0_13 <= 6'h0;
      RAT_memories_0_14 <= 6'h0;
      RAT_memories_0_15 <= 6'h0;
      RAT_memories_0_16 <= 6'h0;
      RAT_memories_0_17 <= 6'h0;
      RAT_memories_0_18 <= 6'h0;
      RAT_memories_0_19 <= 6'h0;
      RAT_memories_0_20 <= 6'h0;
      RAT_memories_0_21 <= 6'h0;
      RAT_memories_0_22 <= 6'h0;
      RAT_memories_0_23 <= 6'h0;
      RAT_memories_0_24 <= 6'h0;
      RAT_memories_0_25 <= 6'h0;
      RAT_memories_0_26 <= 6'h0;
      RAT_memories_0_27 <= 6'h0;
      RAT_memories_0_28 <= 6'h0;
      RAT_memories_0_29 <= 6'h0;
      RAT_memories_0_30 <= 6'h0;
      RAT_memories_0_31 <= 6'h0;
    end
    else begin
      if (is_being_written_vec_0)
        RAT_memories_0_0 <= wr_data_in_0;
      if (is_being_written_vec_1)
        RAT_memories_0_1 <= wr_data_in_1;
      if (is_being_written_vec_2)
        RAT_memories_0_2 <= wr_data_in_2;
      if (is_being_written_vec_3)
        RAT_memories_0_3 <= wr_data_in_3;
      if (is_being_written_vec_4)
        RAT_memories_0_4 <= wr_data_in_4;
      if (is_being_written_vec_5)
        RAT_memories_0_5 <= wr_data_in_5;
      if (is_being_written_vec_6)
        RAT_memories_0_6 <= wr_data_in_6;
      if (is_being_written_vec_7)
        RAT_memories_0_7 <= wr_data_in_7;
      if (is_being_written_vec_8)
        RAT_memories_0_8 <= wr_data_in_8;
      if (is_being_written_vec_9)
        RAT_memories_0_9 <= wr_data_in_9;
      if (is_being_written_vec_10)
        RAT_memories_0_10 <= wr_data_in_10;
      if (is_being_written_vec_11)
        RAT_memories_0_11 <= wr_data_in_11;
      if (is_being_written_vec_12)
        RAT_memories_0_12 <= wr_data_in_12;
      if (is_being_written_vec_13)
        RAT_memories_0_13 <= wr_data_in_13;
      if (is_being_written_vec_14)
        RAT_memories_0_14 <= wr_data_in_14;
      if (is_being_written_vec_15)
        RAT_memories_0_15 <= wr_data_in_15;
      if (is_being_written_vec_16)
        RAT_memories_0_16 <= wr_data_in_16;
      if (is_being_written_vec_17)
        RAT_memories_0_17 <= wr_data_in_17;
      if (is_being_written_vec_18)
        RAT_memories_0_18 <= wr_data_in_18;
      if (is_being_written_vec_19)
        RAT_memories_0_19 <= wr_data_in_19;
      if (is_being_written_vec_20)
        RAT_memories_0_20 <= wr_data_in_20;
      if (is_being_written_vec_21)
        RAT_memories_0_21 <= wr_data_in_21;
      if (is_being_written_vec_22)
        RAT_memories_0_22 <= wr_data_in_22;
      if (is_being_written_vec_23)
        RAT_memories_0_23 <= wr_data_in_23;
      if (is_being_written_vec_24)
        RAT_memories_0_24 <= wr_data_in_24;
      if (is_being_written_vec_25)
        RAT_memories_0_25 <= wr_data_in_25;
      if (is_being_written_vec_26)
        RAT_memories_0_26 <= wr_data_in_26;
      if (is_being_written_vec_27)
        RAT_memories_0_27 <= wr_data_in_27;
      if (is_being_written_vec_28)
        RAT_memories_0_28 <= wr_data_in_28;
      if (is_being_written_vec_29)
        RAT_memories_0_29 <= wr_data_in_29;
      if (is_being_written_vec_30)
        RAT_memories_0_30 <= wr_data_in_30;
      if (is_being_written_vec_31)
        RAT_memories_0_31 <= wr_data_in_31;
    end
    io_RAT_RD_0_REG <= _GEN_123[io_instruction_RD_0];
    io_RAT_RS1_0_REG <= _GEN_123[io_instruction_RS1_0];
    io_RAT_RS2_0_REG <= _GEN_123[io_instruction_RS2_0];
    io_RAT_RD_1_REG <= _GEN_123[io_instruction_RD_1];
    io_RAT_RS1_1_REG <= _GEN_123[io_instruction_RS1_1];
    io_RAT_RS2_1_REG <= _GEN_123[io_instruction_RS2_1];
    io_RAT_RD_2_REG <= _GEN_123[io_instruction_RD_2];
    io_RAT_RS1_2_REG <= _GEN_123[io_instruction_RS1_2];
    io_RAT_RS2_2_REG <= _GEN_123[io_instruction_RS2_2];
    io_RAT_RD_3_REG <= _GEN_123[io_instruction_RD_3];
    io_RAT_RS1_3_REG <= _GEN_123[io_instruction_RS1_3];
    io_RAT_RS2_3_REG <= _GEN_123[io_instruction_RS2_3];
  end // always @(posedge)
  assign io_RAT_RD_0 = io_RAT_RD_0_REG;
  assign io_RAT_RD_1 = io_RAT_RD_1_REG;
  assign io_RAT_RD_2 = io_RAT_RD_2_REG;
  assign io_RAT_RD_3 = io_RAT_RD_3_REG;
  assign io_RAT_RS1_0 = io_RAT_RS1_0_REG;
  assign io_RAT_RS1_1 = io_RAT_RS1_1_REG;
  assign io_RAT_RS1_2 = io_RAT_RS1_2_REG;
  assign io_RAT_RS1_3 = io_RAT_RS1_3_REG;
  assign io_RAT_RS2_0 = io_RAT_RS2_0_REG;
  assign io_RAT_RS2_1 = io_RAT_RS2_1_REG;
  assign io_RAT_RS2_2 = io_RAT_RS2_2_REG;
  assign io_RAT_RS2_3 = io_RAT_RS2_3_REG;
endmodule

module renamer(
  input        clock,
               reset,
  input  [5:0] io_decoded_fetch_packet_bits_0_RD,
  input        io_decoded_fetch_packet_bits_0_RD_valid,
  input  [5:0] io_decoded_fetch_packet_bits_0_RS1,
               io_decoded_fetch_packet_bits_0_RS2,
               io_decoded_fetch_packet_bits_1_RD,
  input        io_decoded_fetch_packet_bits_1_RD_valid,
  input  [5:0] io_decoded_fetch_packet_bits_1_RS1,
               io_decoded_fetch_packet_bits_1_RS2,
               io_decoded_fetch_packet_bits_2_RD,
  input        io_decoded_fetch_packet_bits_2_RD_valid,
  input  [5:0] io_decoded_fetch_packet_bits_2_RS1,
               io_decoded_fetch_packet_bits_2_RS2,
               io_decoded_fetch_packet_bits_3_RD,
  input        io_decoded_fetch_packet_bits_3_RD_valid,
  input  [5:0] io_decoded_fetch_packet_bits_3_RS1,
               io_decoded_fetch_packet_bits_3_RS2,
  output [5:0] io_renamed_decoded_fetch_packet_bits_0_RDold,
               io_renamed_decoded_fetch_packet_bits_0_RD,
               io_renamed_decoded_fetch_packet_bits_0_RS1,
               io_renamed_decoded_fetch_packet_bits_0_RS2,
               io_renamed_decoded_fetch_packet_bits_1_RDold,
               io_renamed_decoded_fetch_packet_bits_1_RD,
               io_renamed_decoded_fetch_packet_bits_1_RS1,
               io_renamed_decoded_fetch_packet_bits_1_RS2,
               io_renamed_decoded_fetch_packet_bits_2_RDold,
               io_renamed_decoded_fetch_packet_bits_2_RD,
               io_renamed_decoded_fetch_packet_bits_2_RS1,
               io_renamed_decoded_fetch_packet_bits_2_RS2,
               io_renamed_decoded_fetch_packet_bits_3_RDold,
               io_renamed_decoded_fetch_packet_bits_3_RD,
               io_renamed_decoded_fetch_packet_bits_3_RS1,
               io_renamed_decoded_fetch_packet_bits_3_RS2
);

  wire       _WAW_handler_io_RAT_wr_en_0;
  wire       _WAW_handler_io_RAT_wr_en_1;
  wire       _WAW_handler_io_RAT_wr_en_2;
  wire       _WAW_handler_io_RAT_wr_en_3;
  wire [5:0] _WAW_handler_io_FL_RD_values_0;
  wire [5:0] _WAW_handler_io_FL_RD_values_1;
  wire [5:0] _WAW_handler_io_FL_RD_values_2;
  wire [5:0] _WAW_handler_io_FL_RD_values_3;
  wire [5:0] _free_list_io_renamed_values_0;
  wire [5:0] _free_list_io_renamed_values_1;
  wire [5:0] _free_list_io_renamed_values_2;
  wire [5:0] _free_list_io_renamed_values_3;
  free_list free_list (
    .clock               (clock),
    .reset               (reset),
    .io_rename_valid_0   (io_decoded_fetch_packet_bits_0_RD_valid),
    .io_rename_valid_1   (io_decoded_fetch_packet_bits_1_RD_valid),
    .io_rename_valid_2   (io_decoded_fetch_packet_bits_2_RD_valid),
    .io_rename_valid_3   (io_decoded_fetch_packet_bits_3_RD_valid),
    .io_renamed_values_0 (_free_list_io_renamed_values_0),
    .io_renamed_values_1 (_free_list_io_renamed_values_1),
    .io_renamed_values_2 (_free_list_io_renamed_values_2),
    .io_renamed_values_3 (_free_list_io_renamed_values_3)
  );
  WAW_handler WAW_handler (
    .io_decoder_RD_valid_bits_0 (io_decoded_fetch_packet_bits_0_RD_valid),
    .io_decoder_RD_valid_bits_1 (io_decoded_fetch_packet_bits_1_RD_valid),
    .io_decoder_RD_valid_bits_2 (io_decoded_fetch_packet_bits_2_RD_valid),
    .io_decoder_RD_valid_bits_3 (io_decoded_fetch_packet_bits_3_RD_valid),
    .io_decoder_RD_values_0     (io_decoded_fetch_packet_bits_0_RD[4:0]),
    .io_decoder_RD_values_1     (io_decoded_fetch_packet_bits_1_RD[4:0]),
    .io_decoder_RD_values_2     (io_decoded_fetch_packet_bits_2_RD[4:0]),
    .io_decoder_RD_values_3     (io_decoded_fetch_packet_bits_3_RD[4:0]),
    .io_free_list_RD_values_0   (_free_list_io_renamed_values_0),
    .io_free_list_RD_values_1   (_free_list_io_renamed_values_1),
    .io_free_list_RD_values_2   (_free_list_io_renamed_values_2),
    .io_free_list_RD_values_3   (_free_list_io_renamed_values_3),
    .io_RAT_wr_en_0             (_WAW_handler_io_RAT_wr_en_0),
    .io_RAT_wr_en_1             (_WAW_handler_io_RAT_wr_en_1),
    .io_RAT_wr_en_2             (_WAW_handler_io_RAT_wr_en_2),
    .io_RAT_wr_en_3             (_WAW_handler_io_RAT_wr_en_3),
    .io_FL_RD_values_0          (_WAW_handler_io_FL_RD_values_0),
    .io_FL_RD_values_1          (_WAW_handler_io_FL_RD_values_1),
    .io_FL_RD_values_2          (_WAW_handler_io_FL_RD_values_2),
    .io_FL_RD_values_3          (_WAW_handler_io_FL_RD_values_3)
  );
  RAT RAT (
    .clock                (clock),
    .reset                (reset),
    .io_instruction_RD_0  (io_decoded_fetch_packet_bits_0_RD[4:0]),
    .io_instruction_RD_1  (io_decoded_fetch_packet_bits_1_RD[4:0]),
    .io_instruction_RD_2  (io_decoded_fetch_packet_bits_2_RD[4:0]),
    .io_instruction_RD_3  (io_decoded_fetch_packet_bits_3_RD[4:0]),
    .io_instruction_RS1_0 (io_decoded_fetch_packet_bits_0_RS1[4:0]),
    .io_instruction_RS1_1 (io_decoded_fetch_packet_bits_1_RS1[4:0]),
    .io_instruction_RS1_2 (io_decoded_fetch_packet_bits_2_RS1[4:0]),
    .io_instruction_RS1_3 (io_decoded_fetch_packet_bits_3_RS1[4:0]),
    .io_instruction_RS2_0 (io_decoded_fetch_packet_bits_0_RS2[4:0]),
    .io_instruction_RS2_1 (io_decoded_fetch_packet_bits_1_RS2[4:0]),
    .io_instruction_RS2_2 (io_decoded_fetch_packet_bits_2_RS2[4:0]),
    .io_instruction_RS2_3 (io_decoded_fetch_packet_bits_3_RS2[4:0]),
    .io_free_list_wr_en_0 (_WAW_handler_io_RAT_wr_en_0),
    .io_free_list_wr_en_1 (_WAW_handler_io_RAT_wr_en_1),
    .io_free_list_wr_en_2 (_WAW_handler_io_RAT_wr_en_2),
    .io_free_list_wr_en_3 (_WAW_handler_io_RAT_wr_en_3),
    .io_free_list_RD_0    (_WAW_handler_io_FL_RD_values_0),
    .io_free_list_RD_1    (_WAW_handler_io_FL_RD_values_1),
    .io_free_list_RD_2    (_WAW_handler_io_FL_RD_values_2),
    .io_free_list_RD_3    (_WAW_handler_io_FL_RD_values_3),
    .io_RAT_RD_0          (io_renamed_decoded_fetch_packet_bits_0_RDold),
    .io_RAT_RD_1          (io_renamed_decoded_fetch_packet_bits_1_RDold),
    .io_RAT_RD_2          (io_renamed_decoded_fetch_packet_bits_2_RDold),
    .io_RAT_RD_3          (io_renamed_decoded_fetch_packet_bits_3_RDold),
    .io_RAT_RS1_0         (io_renamed_decoded_fetch_packet_bits_0_RS1),
    .io_RAT_RS1_1         (io_renamed_decoded_fetch_packet_bits_1_RS1),
    .io_RAT_RS1_2         (io_renamed_decoded_fetch_packet_bits_2_RS1),
    .io_RAT_RS1_3         (io_renamed_decoded_fetch_packet_bits_3_RS1),
    .io_RAT_RS2_0         (io_renamed_decoded_fetch_packet_bits_0_RS2),
    .io_RAT_RS2_1         (io_renamed_decoded_fetch_packet_bits_1_RS2),
    .io_RAT_RS2_2         (io_renamed_decoded_fetch_packet_bits_2_RS2),
    .io_RAT_RS2_3         (io_renamed_decoded_fetch_packet_bits_3_RS2)
  );
  assign io_renamed_decoded_fetch_packet_bits_0_RD = _free_list_io_renamed_values_0;
  assign io_renamed_decoded_fetch_packet_bits_1_RD = _free_list_io_renamed_values_1;
  assign io_renamed_decoded_fetch_packet_bits_2_RD = _free_list_io_renamed_values_2;
  assign io_renamed_decoded_fetch_packet_bits_3_RD = _free_list_io_renamed_values_3;
endmodule

module frontend(
  input          clock,
                 reset,
  output         io_misprediction_PC_ready,
  input          io_misprediction_PC_valid,
  input  [31:0]  io_misprediction_PC_bits,
  output         io_exception_PC_ready,
  input          io_exception_PC_valid,
  input  [31:0]  io_exception_PC_bits,
  output         io_dram_data_ready,
  input          io_dram_data_valid,
  input  [255:0] io_dram_data_bits,
  output         io_commit_ready,
  input          io_commit_valid,
  input  [31:0]  io_commit_bits_PC,
  input  [15:0]  io_commit_bits_GHR,
  input          io_commit_bits_T_NT,
  input  [31:0]  io_commit_bits_target,
  input  [1:0]   io_commit_bits_br_type,
  input  [3:0]   io_commit_bits_br_mask,
  input          io_commit_bits_misprediction,
  input  [6:0]   io_commit_bits_TOS,
                 io_commit_bits_NEXT,
  input  [31:0]  io_commit_bits_misprediction_PC,
  input          io_cache_addr_ready,
  output         io_cache_addr_valid,
  output [31:0]  io_cache_addr_bits,
  input          io_renamed_decoded_fetch_packet_ready,
  output         io_renamed_decoded_fetch_packet_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_0_RDold,
  output         io_renamed_decoded_fetch_packet_bits_0_RDold_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_0_RD,
  output         io_renamed_decoded_fetch_packet_bits_0_RD_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_0_RS1,
  output         io_renamed_decoded_fetch_packet_bits_0_RS1_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_0_RS2,
  output         io_renamed_decoded_fetch_packet_bits_0_RS2_valid,
  output [31:0]  io_renamed_decoded_fetch_packet_bits_0_IMM,
  output [2:0]   io_renamed_decoded_fetch_packet_bits_0_FUNCT3,
  output [3:0]   io_renamed_decoded_fetch_packet_bits_0_packet_index,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_0_ROB_index,
  output [4:0]   io_renamed_decoded_fetch_packet_bits_0_instructionType,
  output [1:0]   io_renamed_decoded_fetch_packet_bits_0_portID,
                 io_renamed_decoded_fetch_packet_bits_0_RS_type,
  output         io_renamed_decoded_fetch_packet_bits_0_needs_ALU,
                 io_renamed_decoded_fetch_packet_bits_0_needs_branch_unit,
                 io_renamed_decoded_fetch_packet_bits_0_SUBTRACT,
                 io_renamed_decoded_fetch_packet_bits_0_MULTIPLY,
                 io_renamed_decoded_fetch_packet_bits_0_IMMEDIATE,
                 io_renamed_decoded_fetch_packet_bits_0_IS_LOAD,
                 io_renamed_decoded_fetch_packet_bits_0_IS_STORE,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_1_RDold,
  output         io_renamed_decoded_fetch_packet_bits_1_RDold_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_1_RD,
  output         io_renamed_decoded_fetch_packet_bits_1_RD_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_1_RS1,
  output         io_renamed_decoded_fetch_packet_bits_1_RS1_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_1_RS2,
  output         io_renamed_decoded_fetch_packet_bits_1_RS2_valid,
  output [31:0]  io_renamed_decoded_fetch_packet_bits_1_IMM,
  output [2:0]   io_renamed_decoded_fetch_packet_bits_1_FUNCT3,
  output [3:0]   io_renamed_decoded_fetch_packet_bits_1_packet_index,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_1_ROB_index,
  output [4:0]   io_renamed_decoded_fetch_packet_bits_1_instructionType,
  output [1:0]   io_renamed_decoded_fetch_packet_bits_1_portID,
                 io_renamed_decoded_fetch_packet_bits_1_RS_type,
  output         io_renamed_decoded_fetch_packet_bits_1_needs_ALU,
                 io_renamed_decoded_fetch_packet_bits_1_needs_branch_unit,
                 io_renamed_decoded_fetch_packet_bits_1_SUBTRACT,
                 io_renamed_decoded_fetch_packet_bits_1_MULTIPLY,
                 io_renamed_decoded_fetch_packet_bits_1_IMMEDIATE,
                 io_renamed_decoded_fetch_packet_bits_1_IS_LOAD,
                 io_renamed_decoded_fetch_packet_bits_1_IS_STORE,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_2_RDold,
  output         io_renamed_decoded_fetch_packet_bits_2_RDold_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_2_RD,
  output         io_renamed_decoded_fetch_packet_bits_2_RD_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_2_RS1,
  output         io_renamed_decoded_fetch_packet_bits_2_RS1_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_2_RS2,
  output         io_renamed_decoded_fetch_packet_bits_2_RS2_valid,
  output [31:0]  io_renamed_decoded_fetch_packet_bits_2_IMM,
  output [2:0]   io_renamed_decoded_fetch_packet_bits_2_FUNCT3,
  output [3:0]   io_renamed_decoded_fetch_packet_bits_2_packet_index,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_2_ROB_index,
  output [4:0]   io_renamed_decoded_fetch_packet_bits_2_instructionType,
  output [1:0]   io_renamed_decoded_fetch_packet_bits_2_portID,
                 io_renamed_decoded_fetch_packet_bits_2_RS_type,
  output         io_renamed_decoded_fetch_packet_bits_2_needs_ALU,
                 io_renamed_decoded_fetch_packet_bits_2_needs_branch_unit,
                 io_renamed_decoded_fetch_packet_bits_2_SUBTRACT,
                 io_renamed_decoded_fetch_packet_bits_2_MULTIPLY,
                 io_renamed_decoded_fetch_packet_bits_2_IMMEDIATE,
                 io_renamed_decoded_fetch_packet_bits_2_IS_LOAD,
                 io_renamed_decoded_fetch_packet_bits_2_IS_STORE,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_3_RDold,
  output         io_renamed_decoded_fetch_packet_bits_3_RDold_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_3_RD,
  output         io_renamed_decoded_fetch_packet_bits_3_RD_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_3_RS1,
  output         io_renamed_decoded_fetch_packet_bits_3_RS1_valid,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_3_RS2,
  output         io_renamed_decoded_fetch_packet_bits_3_RS2_valid,
  output [31:0]  io_renamed_decoded_fetch_packet_bits_3_IMM,
  output [2:0]   io_renamed_decoded_fetch_packet_bits_3_FUNCT3,
  output [3:0]   io_renamed_decoded_fetch_packet_bits_3_packet_index,
  output [5:0]   io_renamed_decoded_fetch_packet_bits_3_ROB_index,
  output [4:0]   io_renamed_decoded_fetch_packet_bits_3_instructionType,
  output [1:0]   io_renamed_decoded_fetch_packet_bits_3_portID,
                 io_renamed_decoded_fetch_packet_bits_3_RS_type,
  output         io_renamed_decoded_fetch_packet_bits_3_needs_ALU,
                 io_renamed_decoded_fetch_packet_bits_3_needs_branch_unit,
                 io_renamed_decoded_fetch_packet_bits_3_SUBTRACT,
                 io_renamed_decoded_fetch_packet_bits_3_MULTIPLY,
                 io_renamed_decoded_fetch_packet_bits_3_IMMEDIATE,
                 io_renamed_decoded_fetch_packet_bits_3_IS_LOAD,
                 io_renamed_decoded_fetch_packet_bits_3_IS_STORE
);

  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_0_RD;
  wire        _decoders_io_decoded_fetch_packet_bits_0_RD_valid;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_0_RS1;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_0_RS2;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_1_RD;
  wire        _decoders_io_decoded_fetch_packet_bits_1_RD_valid;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_1_RS1;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_1_RS2;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_2_RD;
  wire        _decoders_io_decoded_fetch_packet_bits_2_RD_valid;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_2_RS1;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_2_RS2;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_3_RD;
  wire        _decoders_io_decoded_fetch_packet_bits_3_RD_valid;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_3_RS1;
  wire [5:0]  _decoders_io_decoded_fetch_packet_bits_3_RS2;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_0_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_1_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_2_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_3_instruction;
  instruction_fetch instruction_fetch (
    .clock                                           (clock),
    .reset                                           (reset),
    .io_dram_data_valid                              (io_dram_data_valid),
    .io_dram_data_bits                               (io_dram_data_bits),
    .io_commit_valid                                 (io_commit_valid),
    .io_commit_bits_PC                               (io_commit_bits_PC),
    .io_commit_bits_GHR                              (io_commit_bits_GHR),
    .io_commit_bits_T_NT                             (io_commit_bits_T_NT),
    .io_commit_bits_target                           (io_commit_bits_target),
    .io_commit_bits_br_type                          (io_commit_bits_br_type),
    .io_commit_bits_br_mask                          (io_commit_bits_br_mask),
    .io_commit_bits_misprediction                    (io_commit_bits_misprediction),
    .io_commit_bits_TOS                              (io_commit_bits_TOS),
    .io_commit_bits_NEXT                             (io_commit_bits_NEXT),
    .io_commit_bits_misprediction_PC                 (io_commit_bits_misprediction_PC),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_3_instruction)
  );
  fetch_packet_decoder decoders (
    .clock                                           (clock),
    .reset                                           (reset),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_3_instruction),
    .io_decoded_fetch_packet_bits_0_RD
      (_decoders_io_decoded_fetch_packet_bits_0_RD),
    .io_decoded_fetch_packet_bits_0_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_0_RD_valid),
    .io_decoded_fetch_packet_bits_0_RS1
      (_decoders_io_decoded_fetch_packet_bits_0_RS1),
    .io_decoded_fetch_packet_bits_0_RS2
      (_decoders_io_decoded_fetch_packet_bits_0_RS2),
    .io_decoded_fetch_packet_bits_1_RD
      (_decoders_io_decoded_fetch_packet_bits_1_RD),
    .io_decoded_fetch_packet_bits_1_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_1_RD_valid),
    .io_decoded_fetch_packet_bits_1_RS1
      (_decoders_io_decoded_fetch_packet_bits_1_RS1),
    .io_decoded_fetch_packet_bits_1_RS2
      (_decoders_io_decoded_fetch_packet_bits_1_RS2),
    .io_decoded_fetch_packet_bits_2_RD
      (_decoders_io_decoded_fetch_packet_bits_2_RD),
    .io_decoded_fetch_packet_bits_2_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_2_RD_valid),
    .io_decoded_fetch_packet_bits_2_RS1
      (_decoders_io_decoded_fetch_packet_bits_2_RS1),
    .io_decoded_fetch_packet_bits_2_RS2
      (_decoders_io_decoded_fetch_packet_bits_2_RS2),
    .io_decoded_fetch_packet_bits_3_RD
      (_decoders_io_decoded_fetch_packet_bits_3_RD),
    .io_decoded_fetch_packet_bits_3_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_3_RD_valid),
    .io_decoded_fetch_packet_bits_3_RS1
      (_decoders_io_decoded_fetch_packet_bits_3_RS1),
    .io_decoded_fetch_packet_bits_3_RS2
      (_decoders_io_decoded_fetch_packet_bits_3_RS2)
  );
  renamer renamer (
    .clock                                        (clock),
    .reset                                        (reset),
    .io_decoded_fetch_packet_bits_0_RD
      (_decoders_io_decoded_fetch_packet_bits_0_RD),
    .io_decoded_fetch_packet_bits_0_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_0_RD_valid),
    .io_decoded_fetch_packet_bits_0_RS1
      (_decoders_io_decoded_fetch_packet_bits_0_RS1),
    .io_decoded_fetch_packet_bits_0_RS2
      (_decoders_io_decoded_fetch_packet_bits_0_RS2),
    .io_decoded_fetch_packet_bits_1_RD
      (_decoders_io_decoded_fetch_packet_bits_1_RD),
    .io_decoded_fetch_packet_bits_1_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_1_RD_valid),
    .io_decoded_fetch_packet_bits_1_RS1
      (_decoders_io_decoded_fetch_packet_bits_1_RS1),
    .io_decoded_fetch_packet_bits_1_RS2
      (_decoders_io_decoded_fetch_packet_bits_1_RS2),
    .io_decoded_fetch_packet_bits_2_RD
      (_decoders_io_decoded_fetch_packet_bits_2_RD),
    .io_decoded_fetch_packet_bits_2_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_2_RD_valid),
    .io_decoded_fetch_packet_bits_2_RS1
      (_decoders_io_decoded_fetch_packet_bits_2_RS1),
    .io_decoded_fetch_packet_bits_2_RS2
      (_decoders_io_decoded_fetch_packet_bits_2_RS2),
    .io_decoded_fetch_packet_bits_3_RD
      (_decoders_io_decoded_fetch_packet_bits_3_RD),
    .io_decoded_fetch_packet_bits_3_RD_valid
      (_decoders_io_decoded_fetch_packet_bits_3_RD_valid),
    .io_decoded_fetch_packet_bits_3_RS1
      (_decoders_io_decoded_fetch_packet_bits_3_RS1),
    .io_decoded_fetch_packet_bits_3_RS2
      (_decoders_io_decoded_fetch_packet_bits_3_RS2),
    .io_renamed_decoded_fetch_packet_bits_0_RDold
      (io_renamed_decoded_fetch_packet_bits_0_RDold),
    .io_renamed_decoded_fetch_packet_bits_0_RD
      (io_renamed_decoded_fetch_packet_bits_0_RD),
    .io_renamed_decoded_fetch_packet_bits_0_RS1
      (io_renamed_decoded_fetch_packet_bits_0_RS1),
    .io_renamed_decoded_fetch_packet_bits_0_RS2
      (io_renamed_decoded_fetch_packet_bits_0_RS2),
    .io_renamed_decoded_fetch_packet_bits_1_RDold
      (io_renamed_decoded_fetch_packet_bits_1_RDold),
    .io_renamed_decoded_fetch_packet_bits_1_RD
      (io_renamed_decoded_fetch_packet_bits_1_RD),
    .io_renamed_decoded_fetch_packet_bits_1_RS1
      (io_renamed_decoded_fetch_packet_bits_1_RS1),
    .io_renamed_decoded_fetch_packet_bits_1_RS2
      (io_renamed_decoded_fetch_packet_bits_1_RS2),
    .io_renamed_decoded_fetch_packet_bits_2_RDold
      (io_renamed_decoded_fetch_packet_bits_2_RDold),
    .io_renamed_decoded_fetch_packet_bits_2_RD
      (io_renamed_decoded_fetch_packet_bits_2_RD),
    .io_renamed_decoded_fetch_packet_bits_2_RS1
      (io_renamed_decoded_fetch_packet_bits_2_RS1),
    .io_renamed_decoded_fetch_packet_bits_2_RS2
      (io_renamed_decoded_fetch_packet_bits_2_RS2),
    .io_renamed_decoded_fetch_packet_bits_3_RDold
      (io_renamed_decoded_fetch_packet_bits_3_RDold),
    .io_renamed_decoded_fetch_packet_bits_3_RD
      (io_renamed_decoded_fetch_packet_bits_3_RD),
    .io_renamed_decoded_fetch_packet_bits_3_RS1
      (io_renamed_decoded_fetch_packet_bits_3_RS1),
    .io_renamed_decoded_fetch_packet_bits_3_RS2
      (io_renamed_decoded_fetch_packet_bits_3_RS2)
  );
  assign io_misprediction_PC_ready = 1'h0;
  assign io_exception_PC_ready = 1'h0;
  assign io_dram_data_ready = 1'h0;
  assign io_commit_ready = 1'h0;
  assign io_cache_addr_valid = 1'h0;
  assign io_cache_addr_bits = 32'h0;
  assign io_renamed_decoded_fetch_packet_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_RDold_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_RD_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_RS1_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_RS2_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_IMM = 32'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_FUNCT3 = 3'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_packet_index = 4'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_ROB_index = 6'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_instructionType = 5'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_portID = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_RS_type = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_needs_ALU = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_needs_branch_unit = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_SUBTRACT = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_MULTIPLY = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_IMMEDIATE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_IS_LOAD = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_0_IS_STORE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_RDold_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_RD_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_RS1_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_RS2_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_IMM = 32'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_FUNCT3 = 3'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_packet_index = 4'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_ROB_index = 6'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_instructionType = 5'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_portID = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_RS_type = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_needs_ALU = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_needs_branch_unit = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_SUBTRACT = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_MULTIPLY = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_IMMEDIATE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_IS_LOAD = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_1_IS_STORE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_RDold_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_RD_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_RS1_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_RS2_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_IMM = 32'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_FUNCT3 = 3'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_packet_index = 4'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_ROB_index = 6'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_instructionType = 5'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_portID = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_RS_type = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_needs_ALU = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_needs_branch_unit = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_SUBTRACT = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_MULTIPLY = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_IMMEDIATE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_IS_LOAD = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_2_IS_STORE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_RDold_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_RD_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_RS1_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_RS2_valid = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_IMM = 32'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_FUNCT3 = 3'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_packet_index = 4'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_ROB_index = 6'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_instructionType = 5'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_portID = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_RS_type = 2'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_needs_ALU = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_needs_branch_unit = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_SUBTRACT = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_MULTIPLY = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_IMMEDIATE = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_IS_LOAD = 1'h0;
  assign io_renamed_decoded_fetch_packet_bits_3_IS_STORE = 1'h0;
endmodule

