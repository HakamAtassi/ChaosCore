// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_4096x55(
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [54:0] R0_data,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [54:0] W0_data
);

  reg [54:0] Memory[0:4095];
  reg        _R0_en_d0;
  reg [11:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 55'bx;
endmodule

module SDPReadWriteSmem(
  input         clock,
                reset,
  input  [11:0] io_rd_addr,
  output [54:0] io_data_out,
  input  [11:0] io_wr_addr,
  input         io_wr_en,
  input  [54:0] io_data_in
);

  wire [54:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [54:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 55'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_4096x55 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module hash_BTB(
  input         clock,
                reset,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_BTB_valid,
  output [31:0] io_BTB_target,
  output [1:0]  io_BTB_type,
  output [3:0]  io_BTB_br_mask,
  output        io_BTB_hit,
  input  [31:0] io_commit_PC,
                io_commit_target,
  input  [1:0]  io_commit_br_type,
  input  [3:0]  io_commit_br_mask,
  input         io_commit_valid
);

  wire [54:0] _BTB_memory_io_data_out;
  wire [15:0] input_tag = io_predict_PC[31:16];
  wire [15:0] BTB_tag_output = _BTB_memory_io_data_out[53:38];
  reg         io_BTB_valid_REG;
  reg  [15:0] io_BTB_hit_REG;
  reg         io_BTB_hit_REG_1;
  always @(posedge clock) begin
    io_BTB_valid_REG <= io_predict_valid;
    io_BTB_hit_REG <= input_tag;
    io_BTB_hit_REG_1 <= io_predict_valid;
  end // always @(posedge)
  SDPReadWriteSmem BTB_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (io_predict_PC[15:4]),
    .io_data_out (_BTB_memory_io_data_out),
    .io_wr_addr  (io_commit_PC[15:4]),
    .io_wr_en    (io_commit_valid),
    .io_data_in
      ({1'h1, input_tag, io_commit_target, io_commit_br_type, io_commit_br_mask})
  );
  assign io_BTB_valid = io_BTB_valid_REG;
  assign io_BTB_target = _BTB_memory_io_data_out[37:6];
  assign io_BTB_type = _BTB_memory_io_data_out[5:4];
  assign io_BTB_br_mask = _BTB_memory_io_data_out[3:0];
  assign io_BTB_hit = io_BTB_hit_REG == BTB_tag_output & io_BTB_hit_REG_1;
endmodule

