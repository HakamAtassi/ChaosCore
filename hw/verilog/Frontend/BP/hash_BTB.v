// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_4096x53(
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [52:0] R0_data,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [52:0] W0_data
);

  reg [52:0] Memory[0:4095];
  reg        _R0_en_d0;
  reg [11:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 53'bx;
endmodule

module SDPReadWriteSmem(
  input         clock,
                reset,
  input  [11:0] io_rd_addr,
  output [52:0] io_data_out,
  input  [11:0] io_wr_addr,
  input         io_wr_en,
  input  [52:0] io_data_in
);

  wire [52:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [52:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 53'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_4096x53 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module hash_BTB(
  input         clock,
                reset,
  input  [31:0] io_prediction_PC,
  input         io_prediction_valid,
  output        io_BTB_valid,
  output [31:0] io_BTB_target,
  output [2:0]  io_BTB_type,
  output [1:0]  io_BTB_brMask,
  input  [31:0] io_commit_PC,
  input  [52:0] io_commit_data,
  input         io_commit_valid
);

  wire [52:0] _BTB_memory_io_data_out;
  reg  [14:0] io_BTB_valid_REG;
  always @(posedge clock)
    io_BTB_valid_REG <= io_prediction_PC[31:17];
  SDPReadWriteSmem BTB_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (io_prediction_PC[14:3]),
    .io_data_out (_BTB_memory_io_data_out),
    .io_wr_addr  (io_commit_PC[14:3]),
    .io_wr_en    (io_commit_valid),
    .io_data_in  (io_commit_data)
  );
  assign io_BTB_valid =
    io_BTB_valid_REG == _BTB_memory_io_data_out[51:37] & _BTB_memory_io_data_out[52];
  assign io_BTB_target = _BTB_memory_io_data_out[36:5];
  assign io_BTB_type = _BTB_memory_io_data_out[4:2];
  assign io_BTB_brMask = _BTB_memory_io_data_out[1:0];
endmodule

