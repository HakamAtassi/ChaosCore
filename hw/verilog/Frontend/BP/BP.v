// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_65536x2(
  input  [15:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [1:0]  R0_data,
  input  [15:0] R1_addr,
  input         R1_en,
                R1_clk,
  output [1:0]  R1_data,
  input  [15:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [1:0]  W0_data
);

  reg [1:0]  Memory[0:65535];
  reg        _R0_en_d0;
  reg [15:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [15:0] _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 2'bx;
endmodule

module PHT_memory(
  input         clock,
  input  [15:0] io_addrA,
  output [15:0] io_readDataA,
  input  [15:0] io_addrB,
  output [15:0] io_readDataB,
  input  [15:0] io_addrC,
  input  [1:0]  io_writeDataC,
  input         io_writeEnableC
);

  wire [1:0] _mem_ext_R0_data;
  wire [1:0] _mem_ext_R1_data;
  mem_65536x2 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_addrA),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_addrC),
    .W0_en   (io_writeEnableC),
    .W0_clk  (clock),
    .W0_data (io_writeDataC)
  );
  assign io_readDataA = {14'h0, _mem_ext_R1_data};
  assign io_readDataB = {14'h0, _mem_ext_R0_data};
endmodule

module gshare(
  input         clock,
  input  [15:0] io_predict_GHR,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_T_NT,
                io_valid,
  input  [15:0] io_commit_GHR,
  input  [31:0] io_commit_PC,
  input         io_commit_valid,
                io_commit_branch_direction
);

  wire [15:0] _PHT_io_readDataA;
  wire [15:0] _PHT_io_readDataB;
  wire [15:0] hashed_predict_addr = io_predict_PC[15:0] ^ io_predict_GHR;
  wire [15:0] hashed_commit_addr = io_commit_PC[15:0] ^ io_commit_GHR;
  reg         io_valid_REG;
  reg  [15:0] PHT_io_addrC_REG;
  reg         PHT_io_writeEnableC_REG;
  reg         REG;
  always @(posedge clock) begin
    io_valid_REG <= io_predict_valid;
    PHT_io_addrC_REG <= hashed_commit_addr;
    PHT_io_writeEnableC_REG <= io_commit_valid;
    REG <= io_commit_branch_direction;
  end // always @(posedge)
  PHT_memory PHT (
    .clock           (clock),
    .io_addrA        (hashed_predict_addr),
    .io_readDataA    (_PHT_io_readDataA),
    .io_addrB        (hashed_commit_addr),
    .io_readDataB    (_PHT_io_readDataB),
    .io_addrC        (PHT_io_addrC_REG),
    .io_writeDataC
      (REG
         ? (_PHT_io_readDataB[1:0] != 2'h3
              ? _PHT_io_readDataB[1:0] + 2'h1
              : _PHT_io_readDataB[1:0])
         : (|(_PHT_io_readDataB[1:0]))
             ? _PHT_io_readDataB[1:0] - 2'h1
             : _PHT_io_readDataB[1:0]),
    .io_writeEnableC (PHT_io_writeEnableC_REG)
  );
  assign io_T_NT = _PHT_io_readDataA[1];
  assign io_valid = io_valid_REG;
endmodule

// VCS coverage exclude_file
module mem_4096x55(
  input  [11:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [54:0] R0_data,
  input  [11:0] W0_addr,
  input         W0_en,
                W0_clk,
  input  [54:0] W0_data
);

  reg [54:0] Memory[0:4095];
  reg        _R0_en_d0;
  reg [11:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 55'bx;
endmodule

module SDPReadWriteSmem(
  input         clock,
                reset,
  input  [11:0] io_rd_addr,
  output [54:0] io_data_out,
  input  [11:0] io_wr_addr,
  input         io_wr_en,
  input  [54:0] io_data_in
);

  wire [54:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [54:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 55'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_4096x55 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module hash_BTB(
  input         clock,
                reset,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_BTB_valid,
  output [31:0] io_BTB_target,
  output [1:0]  io_BTB_type,
  output [3:0]  io_BTB_br_mask,
  output        io_BTB_hit,
  input  [31:0] io_commit_PC,
                io_commit_target,
  input  [1:0]  io_commit_br_type,
  input  [3:0]  io_commit_br_mask,
  input         io_commit_valid
);

  wire [54:0] _BTB_memory_io_data_out;
  wire [15:0] commit_input_tag = io_commit_PC[31:16];
  wire [15:0] BTB_tag_output = _BTB_memory_io_data_out[53:38];
  reg         io_BTB_valid_REG;
  reg  [15:0] io_BTB_hit_REG;
  reg         io_BTB_hit_REG_1;
  always @(posedge clock) begin
    io_BTB_valid_REG <= io_predict_valid;
    io_BTB_hit_REG <= io_predict_PC[31:16];
    io_BTB_hit_REG_1 <= io_predict_valid;
  end // always @(posedge)
  SDPReadWriteSmem BTB_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (io_predict_PC[15:4]),
    .io_data_out (_BTB_memory_io_data_out),
    .io_wr_addr  (io_commit_PC[15:4]),
    .io_wr_en    (io_commit_valid),
    .io_data_in
      ({1'h1, commit_input_tag, io_commit_target, io_commit_br_type, io_commit_br_mask})
  );
  assign io_BTB_valid = io_BTB_valid_REG;
  assign io_BTB_target = _BTB_memory_io_data_out[37:6];
  assign io_BTB_type = _BTB_memory_io_data_out[5:4];
  assign io_BTB_br_mask = _BTB_memory_io_data_out[3:0];
  assign io_BTB_hit = io_BTB_hit_REG == BTB_tag_output & io_BTB_hit_REG_1;
endmodule

// VCS coverage exclude_file
module mem_128x39(
  input  [6:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [38:0] R0_data,
  input  [6:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [38:0] W0_data
);

  reg [38:0] Memory[0:127];
  reg        _R0_en_d0;
  reg [6:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 39'bx;
endmodule

module SDPReadWriteSmem_1(
  input         clock,
                reset,
  input  [6:0]  io_rd_addr,
  output [38:0] io_data_out,
  input  [6:0]  io_wr_addr,
  input         io_wr_en,
  input  [38:0] io_data_in
);

  wire [38:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [38:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 39'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_128x39 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module RAS(
  input         clock,
                reset,
  input  [31:0] io_wr_addr,
  input         io_wr_valid,
                io_rd_valid,
  input  [6:0]  io_revert_NEXT,
                io_revert_TOS,
  input         io_revert_valid,
  output [31:0] io_ret_addr,
  output [6:0]  io_NEXT,
                io_TOS
);

  wire [6:0]  NOS;
  wire [38:0] _RAS_memory_io_data_out;
  reg  [6:0]  NEXT;
  reg  [6:0]  TOS;
  assign NOS = _RAS_memory_io_data_out[38:32];
  always @(posedge clock) begin
    if (reset) begin
      NEXT <= 7'h0;
      TOS <= 7'h0;
    end
    else if (io_revert_valid) begin
      NEXT <= io_revert_NEXT;
      TOS <= io_revert_TOS;
    end
    else if (io_wr_valid) begin
      NEXT <= NEXT + 7'h1;
      TOS <= NEXT;
    end
    else if (io_rd_valid)
      TOS <= NOS;
  end // always @(posedge)
  SDPReadWriteSmem_1 RAS_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr
      (io_wr_valid ? NEXT : io_rd_valid ? NOS : io_revert_valid ? io_revert_TOS : TOS),
    .io_data_out (_RAS_memory_io_data_out),
    .io_wr_addr  (NEXT),
    .io_wr_en    (io_wr_valid),
    .io_data_in  ({TOS, io_wr_addr})
  );
  assign io_ret_addr = _RAS_memory_io_data_out[31:0];
  assign io_NEXT = NEXT;
  assign io_TOS = TOS;
endmodule

module BP(
  input         clock,
                reset,
  output        io_predict_ready,
  input         io_predict_valid,
  input  [31:0] io_predict_bits,
  output        io_commit_ready,
  input         io_commit_valid,
  input  [31:0] io_commit_bits_PC,
  input  [15:0] io_commit_bits_GHR,
  input         io_commit_bits_T_NT,
  input  [31:0] io_commit_bits_target,
  input  [1:0]  io_commit_bits_br_type,
  input  [3:0]  io_commit_bits_br_mask,
  input         io_commit_bits_misprediction,
  input  [6:0]  io_commit_bits_TOS,
                io_commit_bits_NEXT,
  input  [31:0] io_RAS_update_call_addr,
  input         io_RAS_update_call,
                io_RAS_update_ret,
  output [6:0]  io_RAS_read_NEXT,
                io_RAS_read_TOS,
  output [31:0] io_RAS_read_ret_addr,
  output        io_revert_ready,
  input         io_revert_valid,
  input  [15:0] io_revert_bits_GHR,
  input  [31:0] io_revert_bits_PC,
  input         io_prediction_ready,
  output        io_prediction_valid,
                io_prediction_bits_hit,
  output [31:0] io_prediction_bits_target,
  output [1:0]  io_prediction_bits_br_type,
  output [3:0]  io_prediction_bits_br_mask,
  output [15:0] io_prediction_bits_GHR,
  output        io_prediction_bits_T_NT
);

  wire        _BTB_io_BTB_valid;
  wire [1:0]  _BTB_io_BTB_type;
  wire        _BTB_io_BTB_hit;
  wire        _gshare_io_T_NT;
  wire        _gshare_io_valid;
  wire        revert = io_revert_valid;
  wire        otherwise = 1'h0;
  reg  [15:0] GHR_reg;
  wire        misprediction = io_commit_valid & io_commit_bits_misprediction;
  wire        GHR_update =
    _gshare_io_valid & _BTB_io_BTB_valid & _BTB_io_BTB_hit & _BTB_io_BTB_type == 2'h0;
  wire [15:0] _GEN = {GHR_reg[14:0], _gshare_io_T_NT};
  wire        update_PHT = io_commit_bits_br_type == 2'h0 & io_commit_valid;
  always @(posedge clock) begin
    if (reset)
      GHR_reg <= 16'h0;
    else if (misprediction)
      GHR_reg <= io_commit_bits_GHR;
    else if (revert)
      GHR_reg <= io_revert_bits_GHR;
    else if (GHR_update)
      GHR_reg <= _GEN;
  end // always @(posedge)
  gshare gshare (
    .clock                      (clock),
    .io_predict_GHR
      (misprediction
         ? io_commit_bits_GHR
         : revert ? io_revert_bits_GHR : GHR_update ? _GEN : GHR_reg),
    .io_predict_PC              (io_predict_bits),
    .io_predict_valid           (io_predict_valid),
    .io_T_NT                    (_gshare_io_T_NT),
    .io_valid                   (_gshare_io_valid),
    .io_commit_GHR              (io_commit_bits_GHR),
    .io_commit_PC               (io_commit_bits_PC),
    .io_commit_valid            (update_PHT),
    .io_commit_branch_direction (io_commit_bits_T_NT)
  );
  hash_BTB BTB (
    .clock             (clock),
    .reset             (reset),
    .io_predict_PC     (io_predict_bits),
    .io_predict_valid  (io_predict_valid),
    .io_BTB_valid      (_BTB_io_BTB_valid),
    .io_BTB_target     (io_prediction_bits_target),
    .io_BTB_type       (_BTB_io_BTB_type),
    .io_BTB_br_mask    (io_prediction_bits_br_mask),
    .io_BTB_hit        (_BTB_io_BTB_hit),
    .io_commit_PC      (io_commit_bits_PC),
    .io_commit_target  (io_commit_bits_target),
    .io_commit_br_type (io_commit_bits_br_type),
    .io_commit_br_mask (io_commit_bits_br_mask),
    .io_commit_valid   (io_commit_bits_T_NT & io_commit_valid)
  );
  RAS RAS (
    .clock           (clock),
    .reset           (reset),
    .io_wr_addr      (io_RAS_update_call_addr),
    .io_wr_valid     (io_RAS_update_call & ~misprediction),
    .io_rd_valid     (io_RAS_update_ret & ~misprediction),
    .io_revert_NEXT  (io_commit_bits_NEXT),
    .io_revert_TOS   (io_commit_bits_TOS),
    .io_revert_valid (misprediction),
    .io_ret_addr     (io_RAS_read_ret_addr),
    .io_NEXT         (io_RAS_read_NEXT),
    .io_TOS          (io_RAS_read_TOS)
  );
  assign io_predict_ready = io_prediction_ready & ~(misprediction | revert);
  assign io_commit_ready = 1'h1;
  assign io_revert_ready = 1'h1;
  assign io_prediction_valid = _BTB_io_BTB_valid & _gshare_io_valid;
  assign io_prediction_bits_hit = _BTB_io_BTB_hit;
  assign io_prediction_bits_br_type = _BTB_io_BTB_type;
  assign io_prediction_bits_GHR = GHR_reg;
  assign io_prediction_bits_T_NT = _gshare_io_T_NT;
endmodule

