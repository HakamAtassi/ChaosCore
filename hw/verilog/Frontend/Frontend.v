// Generated by CIRCT firtool-1.62.0
module ReadWriteSmem(
  input          clock,
  output [277:0] io_data_out
);

  reg [277:0] dataOut;
  always @(posedge clock)
    dataOut <= 278'h0;
  assign io_data_out = dataOut;
endmodule

module L1_instruction_cache(
  input clock,
        reset
);

  wire [29:0]  current_addr;
  wire [277:0] _data_memory_1_io_data_out;
  wire [277:0] _data_memory_0_io_data_out;
  reg  [1:0]   cache_state;
  reg  [31:0]  replay_addr;
  reg          replay_valid;
  wire [20:0]  current_addr_tag = current_addr[29:9];
  wire [5:0]   current_addr_set = current_addr[8:3];
  wire [2:0]   current_addr_instruction_offset = current_addr[2:0];
  assign current_addr = (|cache_state) ? replay_addr[31:2] : 30'h0;
  reg  [20:0]  hit_oh_vec_0_REG;
  reg  [20:0]  hit_oh_vec_1_REG;
  reg          miss_REG_1;
  always @(posedge clock) begin
    if (reset) begin
      cache_state <= 2'h0;
      replay_addr <= 32'h0;
      replay_valid <= 1'h0;
    end
    else begin
      automatic logic _GEN = cache_state == 2'h0;
      automatic logic _GEN_0;
      automatic logic _GEN_1;
      _GEN_0 = cache_state == 2'h1;
      _GEN_1 = cache_state != 2'h2;
      if (_GEN) begin
        if ({_data_memory_1_io_data_out[276:256] == hit_oh_vec_1_REG
               & _data_memory_1_io_data_out[277],
             _data_memory_0_io_data_out[276:256] == hit_oh_vec_0_REG
               & _data_memory_0_io_data_out[277]} == 2'h0 & miss_REG_1)
          cache_state <= 2'h1;
        replay_addr <= 32'h0;
      end
      else if (_GEN_0 | _GEN_1) begin
      end
      else
        cache_state <= 2'h0;
      replay_valid <= (_GEN | _GEN_0 | _GEN_1) & replay_valid;
    end
    hit_oh_vec_0_REG <= current_addr_tag;
    hit_oh_vec_1_REG <= current_addr_tag;
    miss_REG_1 <= replay_valid;
  end // always @(posedge)
  ReadWriteSmem data_memory_0 (
    .clock       (clock),
    .io_data_out (_data_memory_0_io_data_out)
  );
  ReadWriteSmem data_memory_1 (
    .clock       (clock),
    .io_data_out (_data_memory_1_io_data_out)
  );
endmodule

module Frontend(
  input         clock,
                reset,
  output        io_misprediction_PC_ready,
  input         io_misprediction_PC_valid,
  input  [31:0] io_misprediction_PC_bits,
  output        io_exception_PC_ready,
  input         io_exception_PC_valid,
  input  [31:0] io_exception_PC_bits
);

  L1_instruction_cache instruction_cache (
    .clock (clock),
    .reset (reset)
  );
  assign io_misprediction_PC_ready = 1'h1;
  assign io_exception_PC_ready = 1'h1;
endmodule

