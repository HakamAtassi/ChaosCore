// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module Queue2_mem_response(
  input          clock,
                 reset,
  output         io_enq_ready,
  input          io_enq_valid,
  input  [127:0] io_enq_bits_instruction_data,
  input  [31:0]  io_enq_bits_fetch_PC,
  input          io_deq_ready,
  output         io_deq_valid,
  output [127:0] io_deq_bits_instruction_data,
  output [31:0]  io_deq_bits_fetch_PC,
  output [1:0]   io_count,
  input          io_flush
);

  wire [159:0] _ram_ext_R0_data;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      wrap <= ~io_flush & (do_enq ? wrap - 1'h1 : wrap);
      wrap_1 <= ~io_flush & (do_deq ? wrap_1 - 1'h1 : wrap_1);
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_2x160 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_fetch_PC, io_enq_bits_instruction_data})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_instruction_data = _ram_ext_R0_data[127:0];
  assign io_deq_bits_fetch_PC = _ram_ext_R0_data[159:128];
  assign io_count = {maybe_full & ptr_match, wrap - wrap_1};
endmodule

