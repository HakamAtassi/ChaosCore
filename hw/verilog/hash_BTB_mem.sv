// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module hash_BTB_mem(
  input                                                                                                                                                 clock,
                                                                                                                                                        reset,
  input  [11:0]                                                                                                                                         io_rd_addr,
  output struct packed {logic BTB_valid; logic [17:0] BTB_tag; logic [31:0] BTB_target; logic [2:0] BTBbr_type_t; logic [1:0] BTB_fetch_packet_index; } io_data_out,
  input  [11:0]                                                                                                                                         io_wr_addr,
  input                                                                                                                                                 io_wr_en,
  input  struct packed {logic BTB_valid; logic [17:0] BTB_tag; logic [31:0] BTB_target; logic [2:0] BTBbr_type_t; logic [1:0] BTB_fetch_packet_index; } io_data_in
);

  wire [1:0]  _GEN;
  wire [2:0]  _GEN_0;
  wire [31:0] _GEN_1;
  wire [17:0] _GEN_2;
  wire        _GEN_3;
  wire        _GEN_4;
  wire        _GEN_5;
  wire        _GEN_6;
  wire        _GEN_7;
  wire        _GEN_8;
  wire [55:0] _mem_ext_R0_data;
  wire
    struct packed {logic BTB_valid; logic BTB_tag; logic BTB_target; logic BTBbr_type_t; logic BTB_fetch_packet_index; }
    _GEN_9 = /*cast(bit)*/5'h0;
  wire
    struct packed {logic BTB_valid; logic [17:0] BTB_tag; logic [31:0] BTB_target; logic [2:0] BTBbr_type_t; logic [1:0] BTB_fetch_packet_index; }
    _GEN_10 = /*cast(bit)*/56'h0;
  wire
    struct packed {logic BTB_valid; logic [17:0] BTB_tag; logic [31:0] BTB_target; logic [2:0] BTBbr_type_t; logic [1:0] BTB_fetch_packet_index; }
    data_out = /*cast(bit)*/_mem_ext_R0_data;
  reg         hazard_reg;
  struct packed {logic BTB_valid; logic [17:0] BTB_tag; logic [31:0] BTB_target; logic [2:0] BTBbr_type_t; logic [1:0] BTB_fetch_packet_index; }
    din_buff;
  assign _GEN_8 = io_wr_en | _GEN_9.BTB_valid;
  assign _GEN_7 = io_wr_en | _GEN_9.BTB_tag;
  assign _GEN_6 = io_wr_en | _GEN_9.BTB_target;
  assign _GEN_5 = io_wr_en | _GEN_9.BTBbr_type_t;
  assign _GEN_4 = io_wr_en | _GEN_9.BTB_fetch_packet_index;
  assign _GEN_3 = io_wr_en ? io_data_in.BTB_valid : _GEN_10.BTB_valid;
  assign _GEN_2 = io_wr_en ? io_data_in.BTB_tag : _GEN_10.BTB_tag;
  assign _GEN_1 = io_wr_en ? io_data_in.BTB_target : _GEN_10.BTB_target;
  assign _GEN_0 = io_wr_en ? io_data_in.BTBbr_type_t : _GEN_10.BTBbr_type_t;
  assign _GEN =
    io_wr_en ? io_data_in.BTB_fetch_packet_index : _GEN_10.BTB_fetch_packet_index;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <=
        '{BTB_valid: 1'h0,
          BTB_tag: 18'h0,
          BTB_target: 32'h0,
          BTBbr_type_t: 3'h0,
          BTB_fetch_packet_index: 2'h0};
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_4096x56 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data ({_GEN, _GEN_0, _GEN_1, _GEN_2, _GEN_3}),
    .W0_mask ({{2{_GEN_4}}, {3{_GEN_5}}, {32{_GEN_6}}, {18{_GEN_7}}, _GEN_8})
  );
  assign io_data_out = hazard_reg ? din_buff : data_out;
endmodule

