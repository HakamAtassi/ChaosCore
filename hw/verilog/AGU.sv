// Generated by CIRCT firtool-1.76.0
module AGU(
  input         clock,
                reset,
                io_flush,
                io_FU_input_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_RD,
  input  [20:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [3:0]  io_FU_input_bits_decoded_instruction_MOB_index,
  input  [1:0]  io_FU_input_bits_decoded_instruction_memory_type,
                io_FU_input_bits_decoded_instruction_access_width,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
  output        io_FU_output_valid,
  output [6:0]  io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_address,
  output [1:0]  io_FU_output_bits_memory_type,
                io_FU_output_bits_access_width,
  output        io_FU_output_bits_is_unsigned,
  output [31:0] io_FU_output_bits_wr_data,
  output [3:0]  io_FU_output_bits_MOB_index
);

  wire        _is_store_T = io_FU_input_bits_decoded_instruction_memory_type == 2'h2;
  wire        _LB_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
  wire        _LH_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
  wire        _LW_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h2;
  reg         io_FU_output_valid_REG;
  reg  [6:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_is_unsigned_REG;
  reg  [31:0] io_FU_output_bits_address_REG;
  reg  [31:0] io_FU_output_bits_wr_data_REG;
  reg  [3:0]  io_FU_output_bits_MOB_index_REG;
  reg  [1:0]  io_FU_output_bits_memory_type_REG;
  reg  [1:0]  io_FU_output_bits_access_width_REG;
  reg         hasBeenResetReg;
  initial
    hasBeenResetReg = 1'bx;
  wire        hasBeenReset = hasBeenResetReg === 1'h1 & reset === 1'h0;
  wire        disable_0 = ~hasBeenReset;
  assert property (@(posedge clock) disable iff (disable_0) io_flush
                   |=> ~io_FU_output_valid_REG);
  wire        disable_2 = ~hasBeenReset;
  assert property (@(posedge clock) disable iff (disable_2) io_FU_input_valid & ~io_flush
                   |=> io_FU_output_valid_REG);
  wire        disable_4 = ~hasBeenReset;
  assert property (@(posedge clock) disable iff (disable_4)
                   io_FU_input_valid & _LB_T & _is_store_T
                   |=> io_FU_output_bits_wr_data_REG < 32'h100);
  wire        disable_6 = ~hasBeenReset;
  assert property (@(posedge clock) disable iff (disable_6)
                   io_FU_input_valid & _LH_T & _is_store_T
                   |=> io_FU_output_bits_wr_data_REG < 32'h10000);
  wire        disable_8 = ~hasBeenReset;
  assert property (@(posedge clock) disable iff (disable_8)
                   io_FU_input_valid & _LW_T & _is_store_T |=> 1'h1);
  always @(posedge clock) begin
    automatic logic is_load =
      io_FU_input_bits_decoded_instruction_memory_type == 2'h1 & io_FU_input_valid;
    automatic logic is_store = _is_store_T & io_FU_input_valid;
    if (reset)
      hasBeenResetReg <= 1'h1;
    io_FU_output_valid_REG <= io_FU_input_valid & ~io_flush;
    io_FU_output_bits_RD_REG <= io_FU_input_bits_decoded_instruction_RD;
    io_FU_output_bits_is_unsigned_REG <=
      is_load & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h4 | is_load
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5;
    io_FU_output_bits_address_REG <=
      io_FU_input_bits_RS1_data
      + {{11{io_FU_input_bits_decoded_instruction_IMM[20]}},
         io_FU_input_bits_decoded_instruction_IMM};
    io_FU_output_bits_wr_data_REG <=
      is_store & _LW_T
        ? io_FU_input_bits_RS2_data
        : is_store & _LH_T
            ? {16'h0, io_FU_input_bits_RS2_data[15:0]}
            : is_store & _LB_T ? {24'h0, io_FU_input_bits_RS2_data[7:0]} : 32'h0;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits_decoded_instruction_MOB_index;
    io_FU_output_bits_memory_type_REG <= io_FU_input_bits_decoded_instruction_memory_type;
    io_FU_output_bits_access_width_REG <=
      io_FU_input_bits_decoded_instruction_access_width;
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_RD = io_FU_output_bits_RD_REG;
  assign io_FU_output_bits_address = io_FU_output_bits_address_REG;
  assign io_FU_output_bits_memory_type = io_FU_output_bits_memory_type_REG;
  assign io_FU_output_bits_access_width = io_FU_output_bits_access_width_REG;
  assign io_FU_output_bits_is_unsigned = io_FU_output_bits_is_unsigned_REG;
  assign io_FU_output_bits_wr_data = io_FU_output_bits_wr_data_REG;
  assign io_FU_output_bits_MOB_index = io_FU_output_bits_MOB_index_REG;
endmodule

