// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module AGU(
  inputclock,
reset,
io_flush,
io_FU_input_valid,
  input  struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; } io_FU_input_bits,
  output struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }                                                                                                                                                                                                                                            io_FU_output
);

  wire        _is_store_T = io_FU_input_bits.decoded_instruction.memory_type == 2'h2;
  wire        _LB_T = io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h0;
  wire        _LH_T = io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h1;
  wire        _LW_T = io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h2;
  reg         io_FU_output_valid_REG;
  reg  [6:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_is_unsigned_REG;
  reg  [31:0] io_FU_output_bits_address_REG;
  reg  [31:0] io_FU_output_bits_wr_data_REG;
  reg  [3:0]  io_FU_output_bits_MOB_index_REG;
  reg  [1:0]  io_FU_output_bits_memory_type_REG;
  reg  [1:0]  io_FU_output_bits_access_width_REG;
  wire
    struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; }
    _GEN =
    '{RD: io_FU_output_bits_RD_REG,
      RD_data: (32'h0),
      RD_valid: (1'h0),
      fetch_PC: (32'h0),
      branch_taken: (1'h0),
      target_address: (32'h0),
      branch_valid: (1'h0),
      address: io_FU_output_bits_address_REG,
      memory_type: io_FU_output_bits_memory_type_REG,
      access_width: io_FU_output_bits_access_width_REG,
      is_unsigned: io_FU_output_bits_is_unsigned_REG,
      wr_data: io_FU_output_bits_wr_data_REG,
      MOB_index: io_FU_output_bits_MOB_index_REG,
      ROB_index: (6'h0),
      FTQ_index: (4'h0),
      fetch_packet_index: (2'h0),
      exception: (1'h0)};
  reg         hasBeenResetReg;
  initial
    hasBeenResetReg = 1'bx;
  wire        hasBeenReset = hasBeenResetReg === 1'h1 & reset === 1'h0;
  assert property (@(posedge clock) disable iff (~hasBeenReset) io_flush
                   |=> ~io_FU_output_valid_REG);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   io_FU_input_valid & ~io_flush |=> io_FU_output_valid_REG);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   io_FU_input_valid & _LB_T & _is_store_T
                   |=> io_FU_output_bits_wr_data_REG < 32'h100);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   io_FU_input_valid & _LH_T & _is_store_T
                   |=> io_FU_output_bits_wr_data_REG < 32'h10000);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   io_FU_input_valid & _LW_T & _is_store_T |=> 1'h1);
  always @(posedge clock) begin
    automatic logic is_load =
      io_FU_input_bits.decoded_instruction.memory_type == 2'h1 & io_FU_input_valid;
    automatic logic is_store = _is_store_T & io_FU_input_valid;
    if (reset)
      hasBeenResetReg <= 1'h1;
    io_FU_output_valid_REG <= io_FU_input_valid & ~io_flush;
    io_FU_output_bits_RD_REG <= io_FU_input_bits.decoded_instruction.RD;
    io_FU_output_bits_is_unsigned_REG <=
      is_load & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h4 & io_FU_input_valid
      | is_load & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h5 & io_FU_input_valid;
    io_FU_output_bits_address_REG <=
      io_FU_input_bits.RS1_data
      + {{11{io_FU_input_bits.decoded_instruction.IMM[20]}},
         io_FU_input_bits.decoded_instruction.IMM};
    io_FU_output_bits_wr_data_REG <=
      is_store & _LW_T & io_FU_input_valid
        ? io_FU_input_bits.RS2_data
        : is_store & _LH_T & io_FU_input_valid
            ? {16'h0, io_FU_input_bits.RS2_data[15:0]}
            : is_store & _LB_T & io_FU_input_valid
                ? {24'h0, io_FU_input_bits.RS2_data[7:0]}
                : 32'h0;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits.decoded_instruction.MOB_index;
    io_FU_output_bits_memory_type_REG <= io_FU_input_bits.decoded_instruction.memory_type;
    io_FU_output_bits_access_width_REG <=
      io_FU_input_bits.decoded_instruction.access_width;
  end // always @(posedge)
  assign io_FU_output = '{valid: io_FU_output_valid_REG, bits: _GEN};
endmodule

