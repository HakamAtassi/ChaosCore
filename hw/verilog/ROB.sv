// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ROB(
  inputclock,
reset,
io_flush,
  outputio_ROB_packet_ready,
  inputio_ROB_packet_valid,
  input  struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; } io_ROB_packet_bits,
  input  struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }[3:0]                                                                                                                                                                                                                                                                                                                io_FU_outputs,
  output struct packed {logic row_valid; logic [31:0] fetch_PC; logic [5:0] ROB_index; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; logic [7:0] free_list_front_pointer; struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }[3:0] ROB_entries; logic [3:0] complete; logic [3:0] exception; }                                                                                                                                                                                                                                                                                                                                                                                                io_ROB_output,
  input  struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; }                                                                                                                                                                                                                                                                                                                                                                io_commit,
  outputio_ROB_index,
  inputio_PC_file_exec_addr,
  outputio_PC_file_exec_data
);

  wire        full;
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    _ROB_entry_banks_3_io_readDataB;
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    _ROB_entry_banks_2_io_readDataB;
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    _ROB_entry_banks_1_io_readDataB;
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    _ROB_entry_banks_0_io_readDataB;
  wire struct packed {logic busy; logic exception; } _ROB_WB_banks_3_io_readDataG;
  wire struct packed {logic busy; logic exception; } _ROB_WB_banks_2_io_readDataG;
  wire struct packed {logic busy; logic exception; } _ROB_WB_banks_1_io_readDataG;
  wire struct packed {logic busy; logic exception; } _ROB_WB_banks_0_io_readDataG;
  wire
    struct packed {logic [31:0] fetch_PC; logic [7:0] free_list_front_pointer; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    _shared_mem_io_readDataB;
  wire
    struct packed {logic [31:0] fetch_PC; logic [7:0] free_list_front_pointer; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    _shared_mem_io_readDataC;
  reg  [6:0]  front_pointer;
  reg  [6:0]  back_pointer;
  wire        allocate = io_ROB_packet_valid & ~full;
  reg  [63:0] row_valid_mem;
  wire [6:0]  _front_pointer_T_2 = front_pointer + 7'h1;
  wire [5:0]  front_index =
    io_flush ? 6'h0 : io_commit.valid ? _front_pointer_T_2[5:0] : front_pointer[5:0];
  wire [5:0]  back_index = io_flush ? 6'h0 : back_pointer[5:0];
  reg  [5:0]  io_ROB_output_ROB_index_REG;
  assign full = front_pointer[5:0] == back_pointer[5:0] & front_pointer != back_pointer;
  wire
    struct packed {logic [31:0] fetch_PC; logic [7:0] free_list_front_pointer; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; }
    shared_mem_input =
    '{fetch_PC: io_ROB_packet_bits.fetch_PC,
      free_list_front_pointer: io_ROB_packet_bits.free_list_front_pointer,
      GHR: io_ROB_packet_bits.GHR,
      NEXT: io_ROB_packet_bits.NEXT,
      TOS: io_ROB_packet_bits.TOS};
  wire struct packed {logic busy; logic exception; } ROB_WB_data_FU0 =
    '{busy: io_FU_outputs[2'h0].valid, exception: (1'h0)};
  wire struct packed {logic busy; logic exception; } ROB_WB_data_FU1 =
    '{busy: io_FU_outputs[2'h1].valid, exception: (1'h0)};
  wire struct packed {logic busy; logic exception; } ROB_WB_data_FU2 =
    '{busy: io_FU_outputs[2'h2].valid, exception: (1'h0)};
  wire struct packed {logic busy; logic exception; } ROB_WB_data_FU3 =
    '{busy: io_FU_outputs[2'h3].valid, exception: (1'h0)};
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    ROB_entry_data =
    '{valid: io_ROB_packet_bits.valid_bits[2'h0],
      is_branch: io_ROB_packet_bits.decoded_instruction[2'h0].needs_branch_unit,
      memory_type: io_ROB_packet_bits.decoded_instruction[2'h0].memory_type,
      RD: io_ROB_packet_bits.decoded_instruction[2'h0].RD,
      RD_valid: io_ROB_packet_bits.decoded_instruction[2'h0].RD_valid,
      RDold: io_ROB_packet_bits.decoded_instruction[2'h0].RDold};
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    ROB_entry_data_1 =
    '{valid: io_ROB_packet_bits.valid_bits[2'h1],
      is_branch: io_ROB_packet_bits.decoded_instruction[2'h1].needs_branch_unit,
      memory_type: io_ROB_packet_bits.decoded_instruction[2'h1].memory_type,
      RD: io_ROB_packet_bits.decoded_instruction[2'h1].RD,
      RD_valid: io_ROB_packet_bits.decoded_instruction[2'h1].RD_valid,
      RDold: io_ROB_packet_bits.decoded_instruction[2'h1].RDold};
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    ROB_entry_data_2 =
    '{valid: io_ROB_packet_bits.valid_bits[2'h2],
      is_branch: io_ROB_packet_bits.decoded_instruction[2'h2].needs_branch_unit,
      memory_type: io_ROB_packet_bits.decoded_instruction[2'h2].memory_type,
      RD: io_ROB_packet_bits.decoded_instruction[2'h2].RD,
      RD_valid: io_ROB_packet_bits.decoded_instruction[2'h2].RD_valid,
      RDold: io_ROB_packet_bits.decoded_instruction[2'h2].RDold};
  wire
    struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }
    ROB_entry_data_3 =
    '{valid: io_ROB_packet_bits.valid_bits[2'h3],
      is_branch: io_ROB_packet_bits.decoded_instruction[2'h3].needs_branch_unit,
      memory_type: io_ROB_packet_bits.decoded_instruction[2'h3].memory_type,
      RD: io_ROB_packet_bits.decoded_instruction[2'h3].RD,
      RD_valid: io_ROB_packet_bits.decoded_instruction[2'h3].RD_valid,
      RDold: io_ROB_packet_bits.decoded_instruction[2'h3].RDold};
  always @(posedge clock) begin
    if (reset) begin
      front_pointer <= 7'h0;
      back_pointer <= 7'h0;
      row_valid_mem <=
        '{1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0,
          1'h0};
    end
    else begin
      if (io_flush) begin
        front_pointer <= 7'h0;
        back_pointer <= 7'h0;
      end
      else begin
        if (io_commit.valid)
          front_pointer <= _front_pointer_T_2;
        else
          front_pointer <= front_pointer + {6'h0, io_commit.valid};
        back_pointer <= back_pointer + {6'h0, allocate};
      end
      row_valid_mem[6'h0] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h0)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h0 | row_valid_mem[6'h0]);
      row_valid_mem[6'h1] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1 | row_valid_mem[6'h1]);
      row_valid_mem[6'h2] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2 | row_valid_mem[6'h2]);
      row_valid_mem[6'h3] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3 | row_valid_mem[6'h3]);
      row_valid_mem[6'h4] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h4)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h4 | row_valid_mem[6'h4]);
      row_valid_mem[6'h5] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h5)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h5 | row_valid_mem[6'h5]);
      row_valid_mem[6'h6] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h6)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h6 | row_valid_mem[6'h6]);
      row_valid_mem[6'h7] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h7)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h7 | row_valid_mem[6'h7]);
      row_valid_mem[6'h8] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h8)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h8 | row_valid_mem[6'h8]);
      row_valid_mem[6'h9] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h9)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h9 | row_valid_mem[6'h9]);
      row_valid_mem[6'hA] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hA)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hA | row_valid_mem[6'hA]);
      row_valid_mem[6'hB] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hB)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hB | row_valid_mem[6'hB]);
      row_valid_mem[6'hC] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hC)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hC | row_valid_mem[6'hC]);
      row_valid_mem[6'hD] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hD)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hD | row_valid_mem[6'hD]);
      row_valid_mem[6'hE] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hE)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hE | row_valid_mem[6'hE]);
      row_valid_mem[6'hF] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'hF)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'hF | row_valid_mem[6'hF]);
      row_valid_mem[6'h10] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h10)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h10 | row_valid_mem[6'h10]);
      row_valid_mem[6'h11] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h11)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h11 | row_valid_mem[6'h11]);
      row_valid_mem[6'h12] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h12)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h12 | row_valid_mem[6'h12]);
      row_valid_mem[6'h13] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h13)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h13 | row_valid_mem[6'h13]);
      row_valid_mem[6'h14] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h14)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h14 | row_valid_mem[6'h14]);
      row_valid_mem[6'h15] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h15)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h15 | row_valid_mem[6'h15]);
      row_valid_mem[6'h16] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h16)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h16 | row_valid_mem[6'h16]);
      row_valid_mem[6'h17] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h17)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h17 | row_valid_mem[6'h17]);
      row_valid_mem[6'h18] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h18)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h18 | row_valid_mem[6'h18]);
      row_valid_mem[6'h19] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h19)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h19 | row_valid_mem[6'h19]);
      row_valid_mem[6'h1A] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1A)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1A | row_valid_mem[6'h1A]);
      row_valid_mem[6'h1B] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1B)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1B | row_valid_mem[6'h1B]);
      row_valid_mem[6'h1C] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1C)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1C | row_valid_mem[6'h1C]);
      row_valid_mem[6'h1D] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1D)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1D | row_valid_mem[6'h1D]);
      row_valid_mem[6'h1E] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1E)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1E | row_valid_mem[6'h1E]);
      row_valid_mem[6'h1F] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h1F)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h1F | row_valid_mem[6'h1F]);
      row_valid_mem[6'h20] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h20)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h20 | row_valid_mem[6'h20]);
      row_valid_mem[6'h21] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h21)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h21 | row_valid_mem[6'h21]);
      row_valid_mem[6'h22] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h22)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h22 | row_valid_mem[6'h22]);
      row_valid_mem[6'h23] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h23)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h23 | row_valid_mem[6'h23]);
      row_valid_mem[6'h24] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h24)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h24 | row_valid_mem[6'h24]);
      row_valid_mem[6'h25] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h25)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h25 | row_valid_mem[6'h25]);
      row_valid_mem[6'h26] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h26)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h26 | row_valid_mem[6'h26]);
      row_valid_mem[6'h27] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h27)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h27 | row_valid_mem[6'h27]);
      row_valid_mem[6'h28] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h28)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h28 | row_valid_mem[6'h28]);
      row_valid_mem[6'h29] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h29)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h29 | row_valid_mem[6'h29]);
      row_valid_mem[6'h2A] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2A)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2A | row_valid_mem[6'h2A]);
      row_valid_mem[6'h2B] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2B)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2B | row_valid_mem[6'h2B]);
      row_valid_mem[6'h2C] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2C)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2C | row_valid_mem[6'h2C]);
      row_valid_mem[6'h2D] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2D)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2D | row_valid_mem[6'h2D]);
      row_valid_mem[6'h2E] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2E)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2E | row_valid_mem[6'h2E]);
      row_valid_mem[6'h2F] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h2F)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h2F | row_valid_mem[6'h2F]);
      row_valid_mem[6'h30] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h30)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h30 | row_valid_mem[6'h30]);
      row_valid_mem[6'h31] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h31)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h31 | row_valid_mem[6'h31]);
      row_valid_mem[6'h32] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h32)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h32 | row_valid_mem[6'h32]);
      row_valid_mem[6'h33] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h33)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h33 | row_valid_mem[6'h33]);
      row_valid_mem[6'h34] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h34)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h34 | row_valid_mem[6'h34]);
      row_valid_mem[6'h35] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h35)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h35 | row_valid_mem[6'h35]);
      row_valid_mem[6'h36] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h36)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h36 | row_valid_mem[6'h36]);
      row_valid_mem[6'h37] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h37)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h37 | row_valid_mem[6'h37]);
      row_valid_mem[6'h38] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h38)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h38 | row_valid_mem[6'h38]);
      row_valid_mem[6'h39] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h39)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h39 | row_valid_mem[6'h39]);
      row_valid_mem[6'h3A] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3A)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3A | row_valid_mem[6'h3A]);
      row_valid_mem[6'h3B] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3B)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3B | row_valid_mem[6'h3B]);
      row_valid_mem[6'h3C] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3C)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3C | row_valid_mem[6'h3C]);
      row_valid_mem[6'h3D] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3D)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3D | row_valid_mem[6'h3D]);
      row_valid_mem[6'h3E] <=
        ~(io_flush | io_commit.valid & front_pointer[5:0] == 6'h3E)
        & (io_ROB_packet_valid & back_pointer[5:0] == 6'h3E | row_valid_mem[6'h3E]);
      row_valid_mem[6'h3F] <=
        ~(io_flush | io_commit.valid & (&(front_pointer[5:0])))
        & (io_ROB_packet_valid & (&(back_pointer[5:0])) | row_valid_mem[6'h3F]);
    end
    io_ROB_output_ROB_index_REG <= front_index;
  end // always @(posedge)
  ROB_shared_mem shared_mem (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeDataA   (shared_mem_input),
    .io_writeEnableA (allocate),
    .io_addrB        (front_index),
    .io_readDataB    (_shared_mem_io_readDataB),
    .io_addrC        (io_PC_file_exec_addr),
    .io_readDataC    (_shared_mem_io_readDataC)
  );
  ROB_WB_mem ROB_WB_banks_0 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeEnableA (allocate),
    .io_addrB        (io_FU_outputs[2'h0].bits.ROB_index),
    .io_writeDataB   (ROB_WB_data_FU0),
    .io_writeEnableB
      (io_FU_outputs[2'h0].valid & io_FU_outputs[2'h0].bits.fetch_packet_index == 2'h0),
    .io_addrC        (io_FU_outputs[2'h1].bits.ROB_index),
    .io_writeDataC   (ROB_WB_data_FU1),
    .io_writeEnableC
      (io_FU_outputs[2'h1].valid & io_FU_outputs[2'h1].bits.fetch_packet_index == 2'h0),
    .io_addrD        (io_FU_outputs[2'h2].bits.ROB_index),
    .io_writeDataD   (ROB_WB_data_FU2),
    .io_writeEnableD
      (io_FU_outputs[2'h2].valid & io_FU_outputs[2'h2].bits.fetch_packet_index == 2'h0),
    .io_addrE        (io_FU_outputs[2'h3].bits.ROB_index),
    .io_writeDataE   (ROB_WB_data_FU3),
    .io_writeEnableE
      (io_FU_outputs[2'h3].valid & io_FU_outputs[2'h3].bits.fetch_packet_index == 2'h0),
    .io_addrG        (front_index),
    .io_readDataG    (_ROB_WB_banks_0_io_readDataG)
  );
  ROB_WB_mem ROB_WB_banks_1 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeEnableA (allocate),
    .io_addrB        (io_FU_outputs[2'h0].bits.ROB_index),
    .io_writeDataB   (ROB_WB_data_FU0),
    .io_writeEnableB
      (io_FU_outputs[2'h0].valid & io_FU_outputs[2'h0].bits.fetch_packet_index == 2'h1),
    .io_addrC        (io_FU_outputs[2'h1].bits.ROB_index),
    .io_writeDataC   (ROB_WB_data_FU1),
    .io_writeEnableC
      (io_FU_outputs[2'h1].valid & io_FU_outputs[2'h1].bits.fetch_packet_index == 2'h1),
    .io_addrD        (io_FU_outputs[2'h2].bits.ROB_index),
    .io_writeDataD   (ROB_WB_data_FU2),
    .io_writeEnableD
      (io_FU_outputs[2'h2].valid & io_FU_outputs[2'h2].bits.fetch_packet_index == 2'h1),
    .io_addrE        (io_FU_outputs[2'h3].bits.ROB_index),
    .io_writeDataE   (ROB_WB_data_FU3),
    .io_writeEnableE
      (io_FU_outputs[2'h3].valid & io_FU_outputs[2'h3].bits.fetch_packet_index == 2'h1),
    .io_addrG        (front_index),
    .io_readDataG    (_ROB_WB_banks_1_io_readDataG)
  );
  ROB_WB_mem ROB_WB_banks_2 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeEnableA (allocate),
    .io_addrB        (io_FU_outputs[2'h0].bits.ROB_index),
    .io_writeDataB   (ROB_WB_data_FU0),
    .io_writeEnableB
      (io_FU_outputs[2'h0].valid & io_FU_outputs[2'h0].bits.fetch_packet_index == 2'h2),
    .io_addrC        (io_FU_outputs[2'h1].bits.ROB_index),
    .io_writeDataC   (ROB_WB_data_FU1),
    .io_writeEnableC
      (io_FU_outputs[2'h1].valid & io_FU_outputs[2'h1].bits.fetch_packet_index == 2'h2),
    .io_addrD        (io_FU_outputs[2'h2].bits.ROB_index),
    .io_writeDataD   (ROB_WB_data_FU2),
    .io_writeEnableD
      (io_FU_outputs[2'h2].valid & io_FU_outputs[2'h2].bits.fetch_packet_index == 2'h2),
    .io_addrE        (io_FU_outputs[2'h3].bits.ROB_index),
    .io_writeDataE   (ROB_WB_data_FU3),
    .io_writeEnableE
      (io_FU_outputs[2'h3].valid & io_FU_outputs[2'h3].bits.fetch_packet_index == 2'h2),
    .io_addrG        (front_index),
    .io_readDataG    (_ROB_WB_banks_2_io_readDataG)
  );
  ROB_WB_mem ROB_WB_banks_3 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeEnableA (allocate),
    .io_addrB        (io_FU_outputs[2'h0].bits.ROB_index),
    .io_writeDataB   (ROB_WB_data_FU0),
    .io_writeEnableB
      (io_FU_outputs[2'h0].valid & (&io_FU_outputs[2'h0].bits.fetch_packet_index)),
    .io_addrC        (io_FU_outputs[2'h1].bits.ROB_index),
    .io_writeDataC   (ROB_WB_data_FU1),
    .io_writeEnableC
      (io_FU_outputs[2'h1].valid & (&io_FU_outputs[2'h1].bits.fetch_packet_index)),
    .io_addrD        (io_FU_outputs[2'h2].bits.ROB_index),
    .io_writeDataD   (ROB_WB_data_FU2),
    .io_writeEnableD
      (io_FU_outputs[2'h2].valid & (&io_FU_outputs[2'h2].bits.fetch_packet_index)),
    .io_addrE        (io_FU_outputs[2'h3].bits.ROB_index),
    .io_writeDataE   (ROB_WB_data_FU3),
    .io_writeEnableE
      (io_FU_outputs[2'h3].valid & (&io_FU_outputs[2'h3].bits.fetch_packet_index)),
    .io_addrG        (front_index),
    .io_readDataG    (_ROB_WB_banks_3_io_readDataG)
  );
  ROB_entry_mem ROB_entry_banks_0 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeDataA   (ROB_entry_data),
    .io_writeEnableA (allocate),
    .io_addrB        (front_index),
    .io_readDataB    (_ROB_entry_banks_0_io_readDataB)
  );
  ROB_entry_mem ROB_entry_banks_1 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeDataA   (ROB_entry_data_1),
    .io_writeEnableA (allocate),
    .io_addrB        (front_index),
    .io_readDataB    (_ROB_entry_banks_1_io_readDataB)
  );
  ROB_entry_mem ROB_entry_banks_2 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeDataA   (ROB_entry_data_2),
    .io_writeEnableA (allocate),
    .io_addrB        (front_index),
    .io_readDataB    (_ROB_entry_banks_2_io_readDataB)
  );
  ROB_entry_mem ROB_entry_banks_3 (
    .clock           (clock),
    .io_addrA        (back_index),
    .io_writeDataA   (ROB_entry_data_3),
    .io_writeEnableA (allocate),
    .io_addrB        (front_index),
    .io_readDataB    (_ROB_entry_banks_3_io_readDataB)
  );
  assign io_ROB_packet_ready = ~full;
  assign io_ROB_output =
    '{row_valid: row_valid_mem[front_pointer[5:0]],
      fetch_PC: _shared_mem_io_readDataB.fetch_PC,
      ROB_index: io_ROB_output_ROB_index_REG,
      GHR: _shared_mem_io_readDataB.GHR,
      NEXT: _shared_mem_io_readDataB.NEXT,
      TOS: _shared_mem_io_readDataB.TOS,
      free_list_front_pointer: _shared_mem_io_readDataB.free_list_front_pointer,
      ROB_entries:
        ({{_ROB_entry_banks_3_io_readDataB},
          {_ROB_entry_banks_2_io_readDataB},
          {_ROB_entry_banks_1_io_readDataB},
          {_ROB_entry_banks_0_io_readDataB}}),
      complete:
        ({{_ROB_WB_banks_3_io_readDataG.busy},
          {_ROB_WB_banks_2_io_readDataG.busy},
          {_ROB_WB_banks_1_io_readDataG.busy},
          {_ROB_WB_banks_0_io_readDataG.busy}}),
      exception:
        ({{_ROB_WB_banks_3_io_readDataG.exception},
          {_ROB_WB_banks_2_io_readDataG.exception},
          {_ROB_WB_banks_1_io_readDataG.exception},
          {_ROB_WB_banks_0_io_readDataG.exception}})};
  assign io_ROB_index = back_index;
  assign io_PC_file_exec_data = _shared_mem_io_readDataC.fetch_PC;
endmodule

