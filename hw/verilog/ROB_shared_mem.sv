// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module ROB_shared_mem(
  input         clock,
  input  [5:0]  io_addrA,
  input  [31:0] io_writeDataA_fetch_PC,
  input  [7:0]  io_writeDataA_free_list_front_pointer,
  input  [15:0] io_writeDataA_GHR,
  input  [6:0]  io_writeDataA_NEXT,
                io_writeDataA_TOS,
  input         io_writeEnableA,
  input  [5:0]  io_addrB,
  output [31:0] io_readDataB_fetch_PC,
  output [7:0]  io_readDataB_free_list_front_pointer,
  output [15:0] io_readDataB_GHR,
  output [6:0]  io_readDataB_NEXT,
                io_readDataB_TOS,
  input  [5:0]  io_addrC,
  output [31:0] io_readDataC_fetch_PC
);

  wire [69:0] _mem_ext_R0_data;
  wire [69:0] _mem_ext_R1_data;
  mem_64x70 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_addrB),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_addrA),
    .W0_en   (io_writeEnableA),
    .W0_clk  (clock),
    .W0_data
      ({io_writeDataA_TOS,
        io_writeDataA_NEXT,
        io_writeDataA_GHR,
        io_writeDataA_free_list_front_pointer,
        io_writeDataA_fetch_PC})
  );
  assign io_readDataB_fetch_PC = _mem_ext_R1_data[31:0];
  assign io_readDataB_free_list_front_pointer = _mem_ext_R1_data[39:32];
  assign io_readDataB_GHR = _mem_ext_R1_data[55:40];
  assign io_readDataB_NEXT = _mem_ext_R1_data[62:56];
  assign io_readDataB_TOS = _mem_ext_R1_data[69:63];
  assign io_readDataC_fetch_PC = _mem_ext_R0_data[31:0];
endmodule

