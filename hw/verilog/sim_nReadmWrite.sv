// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module sim_nReadmWrite(
  input         clock,
  input  [5:0]  io_raddr_0,
                io_raddr_1,
                io_raddr_2,
                io_raddr_3,
                io_raddr_4,
                io_raddr_5,
                io_raddr_6,
                io_raddr_7,
  output [31:0] io_rdata_0,
                io_rdata_1,
                io_rdata_2,
                io_rdata_3,
                io_rdata_4,
                io_rdata_5,
                io_rdata_6,
                io_rdata_7,
  input  [5:0]  io_waddr_0,
                io_waddr_1,
                io_waddr_2,
                io_waddr_3,
  input         io_wen_0,
                io_wen_1,
                io_wen_2,
                io_wen_3,
  input  [31:0] io_wdata_0,
                io_wdata_1,
                io_wdata_2,
                io_wdata_3
);

  mem_64x32 mem_ext (
    .R0_addr (io_raddr_7),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_rdata_7),
    .R1_addr (io_raddr_6),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (io_rdata_6),
    .R2_addr (io_raddr_5),
    .R2_en   (1'h1),
    .R2_clk  (clock),
    .R2_data (io_rdata_5),
    .R3_addr (io_raddr_4),
    .R3_en   (1'h1),
    .R3_clk  (clock),
    .R3_data (io_rdata_4),
    .R4_addr (io_raddr_3),
    .R4_en   (1'h1),
    .R4_clk  (clock),
    .R4_data (io_rdata_3),
    .R5_addr (io_raddr_2),
    .R5_en   (1'h1),
    .R5_clk  (clock),
    .R5_data (io_rdata_2),
    .R6_addr (io_raddr_1),
    .R6_en   (1'h1),
    .R6_clk  (clock),
    .R6_data (io_rdata_1),
    .R7_addr (io_raddr_0),
    .R7_en   (1'h1),
    .R7_clk  (clock),
    .R7_data (io_rdata_0),
    .W0_addr (io_waddr_3),
    .W0_en   (io_wen_3),
    .W0_clk  (clock),
    .W0_data (io_waddr_3 == 6'h0 ? 32'h0 : io_wdata_3),
    .W1_addr (io_waddr_2),
    .W1_en   (io_wen_2),
    .W1_clk  (clock),
    .W1_data (io_waddr_2 == 6'h0 ? 32'h0 : io_wdata_2),
    .W2_addr (io_waddr_1),
    .W2_en   (io_wen_1),
    .W2_clk  (clock),
    .W2_data (io_waddr_1 == 6'h0 ? 32'h0 : io_wdata_1),
    .W3_addr (io_waddr_0),
    .W3_en   (io_wen_0),
    .W3_clk  (clock),
    .W3_data (io_waddr_0 == 6'h0 ? 32'h0 : io_wdata_0)
  );
endmodule

