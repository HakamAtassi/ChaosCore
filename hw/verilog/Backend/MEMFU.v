// Generated by CIRCT firtool-1.62.0
module MEMFU(
  input         clock,
                reset,
  output        io_FU_input_ready,
  input         io_FU_input_valid,
                io_FU_input_bits_decoded_instruction_ready_bits_RS1_ready,
                io_FU_input_bits_decoded_instruction_ready_bits_RS2_ready,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RS1,
  input         io_FU_input_bits_decoded_instruction_RS1_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RS2,
  input         io_FU_input_bits_decoded_instruction_RS2_valid,
  input  [31:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [3:0]  io_FU_input_bits_decoded_instruction_packet_index,
  input  [5:0]  io_FU_input_bits_decoded_instruction_ROB_index,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input  [1:0]  io_FU_input_bits_decoded_instruction_portID,
                io_FU_input_bits_decoded_instruction_RS_type,
  input         io_FU_input_bits_decoded_instruction_needs_ALU,
                io_FU_input_bits_decoded_instruction_needs_branch_unit,
                io_FU_input_bits_decoded_instruction_needs_CSRs,
                io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
                io_FU_input_bits_decoded_instruction_IMMEDIATE,
                io_FU_input_bits_decoded_instruction_IS_LOAD,
                io_FU_input_bits_decoded_instruction_IS_STORE,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
                io_FU_input_bits_PC,
  output        io_data_cache_response_ready,
  input         io_data_cache_response_valid,
  input  [31:0] io_data_cache_response_bits_data,
  output        io_FU_output_valid,
  output [63:0] io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid,
  output [31:0] io_FU_output_bits_instruction_PC,
  output        io_FU_output_bits_branch_taken,
  output [31:0] io_FU_output_bits_target_address,
  output        io_FU_output_bits_branch_valid,
  output [5:0]  io_FU_output_bits_ROB_index,
  output [1:0]  io_FU_output_bits_fetch_packet_index,
  input         io_data_cache_request_ready,
  output        io_data_cache_request_valid,
  output [31:0] io_data_cache_request_bits_addr,
                io_data_cache_request_bits_wr_data,
  output        io_data_cache_request_bits_wr_en
);

  reg         io_data_cache_request_valid_REG;
  reg         io_data_cache_request_bits_wr_en_REG;
  reg  [31:0] io_data_cache_request_bits_wr_data_REG;
  reg  [31:0] io_data_cache_request_bits_addr_REG;
  reg         REG;
  wire [31:0] _GEN = {24'h0, io_data_cache_response_bits_data[7:0]};
  reg         REG_1;
  wire [31:0] _GEN_0 = {16'h0, io_data_cache_response_bits_data[15:0]};
  reg         REG_2;
  reg         REG_3;
  reg         REG_4;
  reg  [31:0] io_FU_output_bits_instruction_PC_REG;
  reg  [3:0]  io_FU_output_bits_fetch_packet_index_REG;
  reg  [5:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg  [5:0]  io_FU_output_bits_ROB_index_REG;
  reg         io_FU_output_valid_REG;
  always @(posedge clock) begin
    automatic logic IS_LOAD =
      io_FU_input_bits_decoded_instruction_IS_LOAD & io_FU_input_valid;
    automatic logic IS_STORE =
      io_FU_input_bits_decoded_instruction_IS_STORE & io_FU_input_valid;
    automatic logic _LB_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
    automatic logic _LH_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
    automatic logic _LW_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h2;
    io_data_cache_request_valid_REG <= IS_LOAD | IS_STORE;
    io_data_cache_request_bits_wr_en_REG <= IS_STORE;
    io_data_cache_request_bits_wr_data_REG <=
      IS_STORE & _LW_T & io_FU_input_valid
        ? io_FU_input_bits_RS2_data
        : IS_STORE & _LH_T & io_FU_input_valid
            ? {16'h0, io_FU_input_bits_RS2_data[15:0]}
            : IS_STORE & _LB_T & io_FU_input_valid
                ? {24'h0, io_FU_input_bits_RS2_data[7:0]}
                : 32'h0;
    io_data_cache_request_bits_addr_REG <=
      io_FU_input_bits_RS1_data + io_FU_input_bits_decoded_instruction_IMM;
    REG <= IS_LOAD & _LB_T & io_FU_input_valid;
    REG_1 <= IS_LOAD & _LH_T & io_FU_input_valid;
    REG_2 <= IS_LOAD & _LW_T & io_FU_input_valid;
    REG_3 <=
      IS_LOAD & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h4 & io_FU_input_valid;
    REG_4 <=
      IS_LOAD & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5 & io_FU_input_valid;
    io_FU_output_bits_instruction_PC_REG <=
      {26'h0, io_FU_input_bits_decoded_instruction_packet_index, 2'h0}
      + io_FU_input_bits_PC;
    io_FU_output_bits_fetch_packet_index_REG <=
      io_FU_input_bits_decoded_instruction_packet_index;
    io_FU_output_bits_RD_REG <= io_FU_input_bits_decoded_instruction_RD;
    io_FU_output_bits_RD_valid_REG <= IS_LOAD;
    io_FU_output_bits_ROB_index_REG <= io_FU_input_bits_decoded_instruction_ROB_index;
    io_FU_output_valid_REG <= io_FU_input_valid;
  end // always @(posedge)
  assign io_FU_input_ready = 1'h1;
  assign io_data_cache_response_ready = 1'h1;
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_RD = {58'h0, io_FU_output_bits_RD_REG};
  assign io_FU_output_bits_RD_data =
    REG_4
      ? _GEN_0
      : REG_3
          ? _GEN
          : REG_2
              ? io_data_cache_response_bits_data
              : REG_1 ? _GEN_0 : REG ? _GEN : 32'h0;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
  assign io_FU_output_bits_instruction_PC = io_FU_output_bits_instruction_PC_REG;
  assign io_FU_output_bits_branch_taken = 1'h0;
  assign io_FU_output_bits_target_address = 32'h0;
  assign io_FU_output_bits_branch_valid = 1'h0;
  assign io_FU_output_bits_ROB_index = io_FU_output_bits_ROB_index_REG;
  assign io_FU_output_bits_fetch_packet_index =
    io_FU_output_bits_fetch_packet_index_REG[1:0];
  assign io_data_cache_request_valid = io_data_cache_request_valid_REG;
  assign io_data_cache_request_bits_addr = io_data_cache_request_bits_addr_REG;
  assign io_data_cache_request_bits_wr_data = io_data_cache_request_bits_wr_data_REG;
  assign io_data_cache_request_bits_wr_en = io_data_cache_request_bits_wr_en_REG;
endmodule

