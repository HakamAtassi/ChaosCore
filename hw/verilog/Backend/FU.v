// Generated by CIRCT firtool-1.62.0
module ALU(
  input         clock,
                reset,
  input  [5:0]  io_FU_input_bits_RD,
  input  [31:0] io_FU_input_bits_IMM,
  input  [2:0]  io_FU_input_bits_FUNCT3,
  input  [4:0]  io_FU_input_bits_instructionType,
  input         io_FU_input_bits_SUBTRACT,
                io_FU_input_bits_MULTIPLY,
                io_FU_input_bits_IMMEDIATE,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
  output [63:0] io_FU_output_RD_bits,
  output [31:0] io_FU_output_data
);

  reg  [31:0] add_result;
  reg  [31:0] sub_result;
  reg  [31:0] slt_result;
  reg  [31:0] sltu_result;
  reg  [31:0] and_result;
  reg  [31:0] or_result;
  reg  [31:0] xor_result;
  reg  [31:0] sll_result;
  reg  [31:0] srl_result;
  reg  [31:0] sra_result;
  wire        _REMU_T = io_FU_input_bits_instructionType == 5'hC;
  wire        _MUL_T_1 = io_FU_input_bits_FUNCT3 == 3'h0;
  wire        _DIVU_T_1 = io_FU_input_bits_FUNCT3 == 3'h5;
  always @(posedge clock) begin
    if (reset) begin
      add_result <= 32'h0;
      sub_result <= 32'h0;
      slt_result <= 32'h0;
      sltu_result <= 32'h0;
      and_result <= 32'h0;
      or_result <= 32'h0;
      xor_result <= 32'h0;
      sll_result <= 32'h0;
      srl_result <= 32'h0;
      sra_result <= 32'h0;
    end
    else begin
      automatic logic [31:0] operand2 =
        io_FU_input_bits_IMMEDIATE ? io_FU_input_bits_IMM : io_FU_input_bits_RS2_data;
      automatic logic [31:0] _GEN = {27'h0, operand2[4:0]};
      automatic logic [62:0] _sll_result_T_1 =
        {31'h0, io_FU_input_bits_RS1_data} << operand2[4:0];
      add_result <= io_FU_input_bits_RS1_data + operand2;
      sub_result <= io_FU_input_bits_RS1_data - operand2;
      slt_result <= {31'h0, $signed(io_FU_input_bits_RS1_data) < $signed(operand2)};
      sltu_result <= {31'h0, io_FU_input_bits_RS1_data < operand2};
      and_result <= io_FU_input_bits_RS1_data & operand2;
      or_result <= io_FU_input_bits_RS1_data | operand2;
      xor_result <= io_FU_input_bits_RS1_data ^ operand2;
      sll_result <= _sll_result_T_1[31:0];
      srl_result <= io_FU_input_bits_RS1_data >> _GEN;
      sra_result <= $signed($signed(io_FU_input_bits_RS1_data) >>> _GEN);
    end
  end // always @(posedge)
  assign io_FU_output_RD_bits = {58'h0, io_FU_input_bits_RD};
  assign io_FU_output_data =
    _REMU_T & _MUL_T_1 & ~io_FU_input_bits_MULTIPLY & io_FU_input_bits_SUBTRACT
      ? add_result
      : _REMU_T & _MUL_T_1 & ~io_FU_input_bits_MULTIPLY & io_FU_input_bits_SUBTRACT
          ? sub_result
          : _REMU_T & io_FU_input_bits_FUNCT3 == 3'h4 & ~io_FU_input_bits_MULTIPLY
              ? xor_result
              : _REMU_T & io_FU_input_bits_FUNCT3 == 3'h6 & ~io_FU_input_bits_MULTIPLY
                  ? or_result
                  : _REMU_T & (&io_FU_input_bits_FUNCT3) & ~io_FU_input_bits_MULTIPLY
                      ? and_result
                      : _REMU_T & io_FU_input_bits_FUNCT3 == 3'h1
                        & ~io_FU_input_bits_MULTIPLY
                          ? sll_result
                          : _REMU_T & _DIVU_T_1 & ~io_FU_input_bits_MULTIPLY
                              ? srl_result
                              : _REMU_T & _DIVU_T_1 & ~io_FU_input_bits_MULTIPLY
                                  ? sra_result
                                  : _REMU_T & io_FU_input_bits_FUNCT3 == 3'h2
                                    & ~io_FU_input_bits_MULTIPLY
                                      ? slt_result
                                      : _REMU_T & io_FU_input_bits_FUNCT3 == 3'h3
                                        & ~io_FU_input_bits_MULTIPLY
                                          ? sltu_result
                                          : 32'h0;
endmodule

module branch_unit(
  input  [5:0]  io_FU_input_bits_RD,
  input  [31:0] io_FU_input_bits_IMM,
  input  [3:0]  io_FU_input_bits_packet_index,
  input  [4:0]  io_FU_input_bits_instructionType,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
                io_FU_input_bits_PC,
  output [63:0] io_FU_output_RD_bits,
  output [31:0] io_FU_output_data,
  output        io_FU_output_branch_taken,
  output [31:0] io_FU_output_branch_address
);

  wire [31:0] _PC_T = io_FU_input_bits_PC + {28'h0, io_FU_input_bits_packet_index};
  assign io_FU_output_RD_bits = {58'h0, io_FU_input_bits_RD};
  assign io_FU_output_data = _PC_T + 32'h4;
  assign io_FU_output_branch_taken = 1'h1;
  assign io_FU_output_branch_address =
    io_FU_input_bits_instructionType == 5'h18
      ? _PC_T + io_FU_input_bits_IMM
      : io_FU_input_bits_instructionType == 5'h1B
          ? _PC_T + io_FU_input_bits_IMM
          : io_FU_input_bits_instructionType == 5'h19
              ? io_FU_input_bits_RS1_data + io_FU_input_bits_IMM
              : 32'h0;
endmodule

module FU(
  input         clock,
                reset,
  output        io_FU_input_ready,
  input         io_FU_input_valid,
                io_FU_input_bits_RD_valid,
  input  [5:0]  io_FU_input_bits_RD,
                io_FU_input_bits_RS1,
                io_FU_input_bits_RS2,
  input  [31:0] io_FU_input_bits_IMM,
  input  [2:0]  io_FU_input_bits_FUNCT3,
  input  [3:0]  io_FU_input_bits_packet_index,
  input  [4:0]  io_FU_input_bits_instructionType,
  input         io_FU_input_bits_SUBTRACT,
                io_FU_input_bits_MULTIPLY,
                io_FU_input_bits_IMMEDIATE,
                io_FU_input_bits_needs_ALU,
                io_FU_input_bits_needs_branch_unit,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
                io_FU_input_bits_PC,
  output        io_FU_output_RD_valid,
  output [63:0] io_FU_output_RD_bits,
  output [31:0] io_FU_output_data,
  output        io_FU_output_branch_taken,
  output [31:0] io_FU_output_branch_address
);

  wire [63:0] _branch_unit_io_FU_output_RD_bits;
  wire [31:0] _branch_unit_io_FU_output_data;
  wire        _branch_unit_io_FU_output_branch_taken;
  wire [31:0] _branch_unit_io_FU_output_branch_address;
  wire [63:0] _ALU_io_FU_output_RD_bits;
  wire [31:0] _ALU_io_FU_output_data;
  wire        is_ALU = io_FU_input_bits_needs_ALU & io_FU_input_valid;
  ALU ALU (
    .clock                            (clock),
    .reset                            (reset),
    .io_FU_input_bits_RD              (io_FU_input_bits_RD),
    .io_FU_input_bits_IMM             (io_FU_input_bits_IMM),
    .io_FU_input_bits_FUNCT3          (io_FU_input_bits_FUNCT3),
    .io_FU_input_bits_instructionType (io_FU_input_bits_instructionType),
    .io_FU_input_bits_SUBTRACT        (io_FU_input_bits_SUBTRACT),
    .io_FU_input_bits_MULTIPLY        (io_FU_input_bits_MULTIPLY),
    .io_FU_input_bits_IMMEDIATE       (io_FU_input_bits_IMMEDIATE),
    .io_FU_input_bits_RS1_data        (io_FU_input_bits_RS1_data),
    .io_FU_input_bits_RS2_data        (io_FU_input_bits_RS2_data),
    .io_FU_output_RD_bits             (_ALU_io_FU_output_RD_bits),
    .io_FU_output_data                (_ALU_io_FU_output_data)
  );
  branch_unit branch_unit (
    .io_FU_input_bits_RD              (io_FU_input_bits_RD),
    .io_FU_input_bits_IMM             (io_FU_input_bits_IMM),
    .io_FU_input_bits_packet_index    (io_FU_input_bits_packet_index),
    .io_FU_input_bits_instructionType (io_FU_input_bits_instructionType),
    .io_FU_input_bits_RS1_data        (io_FU_input_bits_RS1_data),
    .io_FU_input_bits_RS2_data        (io_FU_input_bits_RS2_data),
    .io_FU_input_bits_PC              (io_FU_input_bits_PC),
    .io_FU_output_RD_bits             (_branch_unit_io_FU_output_RD_bits),
    .io_FU_output_data                (_branch_unit_io_FU_output_data),
    .io_FU_output_branch_taken        (_branch_unit_io_FU_output_branch_taken),
    .io_FU_output_branch_address      (_branch_unit_io_FU_output_branch_address)
  );
  assign io_FU_input_ready = 1'h0;
  assign io_FU_output_RD_valid = 1'h0;
  assign io_FU_output_RD_bits =
    is_ALU ? _ALU_io_FU_output_RD_bits : _branch_unit_io_FU_output_RD_bits;
  assign io_FU_output_data =
    is_ALU ? _ALU_io_FU_output_data : _branch_unit_io_FU_output_data;
  assign io_FU_output_branch_taken = ~is_ALU & _branch_unit_io_FU_output_branch_taken;
  assign io_FU_output_branch_address =
    is_ALU ? 32'h0 : _branch_unit_io_FU_output_branch_address;
endmodule

