// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_64x37(
  input  [5:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [36:0] R0_data,
  input  [5:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [36:0] R1_data,
  input  [5:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [36:0] W0_data
);

  reg [36:0] Memory[0:63];
  reg        _R0_en_d0;
  reg [5:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [5:0]  _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 37'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 37'bx;
endmodule

module ROB_shared_mem(
  input         clock,
  input  [5:0]  io_addrA,
  input         io_writeDataA_row_valid,
  input  [31:0] io_writeDataA_fetch_PC,
  input  [3:0]  io_writeDataA_RAT_IDX,
  input         io_writeEnableA,
  input  [5:0]  io_addrB,
  output        io_readDataB_row_valid,
  output [31:0] io_readDataB_fetch_PC,
  output [3:0]  io_readDataB_RAT_IDX,
  input  [5:0]  io_addrC,
  output [31:0] io_readDataC_fetch_PC
);

  wire [36:0] _mem_ext_R0_data;
  wire [36:0] _mem_ext_R1_data;
  mem_64x37 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_addrB),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data),
    .W0_addr (io_addrA),
    .W0_en   (io_writeEnableA),
    .W0_clk  (clock),
    .W0_data ({io_writeDataA_RAT_IDX, io_writeDataA_fetch_PC, io_writeDataA_row_valid})
  );
  assign io_readDataB_row_valid = _mem_ext_R1_data[0];
  assign io_readDataB_fetch_PC = _mem_ext_R1_data[32:1];
  assign io_readDataB_RAT_IDX = _mem_ext_R1_data[36:33];
  assign io_readDataC_fetch_PC = _mem_ext_R0_data[32:1];
endmodule

// VCS coverage exclude_file
module mem_64x2(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [1:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
               W1_clk,
  input  [1:0] W1_data,
  input  [5:0] W2_addr,
  input        W2_en,
               W2_clk,
  input  [1:0] W2_data,
  input  [5:0] W3_addr,
  input        W3_en,
               W3_clk,
  input  [1:0] W3_data,
  input  [5:0] W4_addr,
  input        W4_en,
               W4_clk,
  input  [1:0] W4_data
);

  reg [1:0] Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
    if (W2_en & 1'h1)
      Memory[W2_addr] <= W2_data;
    if (W3_en & 1'h1)
      Memory[W3_addr] <= W3_data;
    if (W4_en & 1'h1)
      Memory[W4_addr] <= W4_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
endmodule

module ROB_WB_mem(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeDataB_busy,
               io_writeEnableB,
  input  [5:0] io_addrC,
  input        io_writeDataC_busy,
               io_writeEnableC,
  input  [5:0] io_addrD,
  input        io_writeEnableD,
  input  [5:0] io_addrE,
  input        io_writeDataE_busy,
               io_writeEnableE,
  input  [5:0] io_addrG,
  output       io_readDataG_busy,
               io_readDataG_exception
);

  wire [1:0] _mem_ext_R0_data;
  wire [1:0] _GEN = {1'h0, io_writeDataC_busy};
  mem_64x2 mem_ext (
    .R0_addr (io_addrG),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addrE),
    .W0_en   (io_writeEnableE),
    .W0_clk  (clock),
    .W0_data ({1'h0, io_writeDataE_busy}),
    .W1_addr (io_addrD),
    .W1_en   (io_writeEnableD),
    .W1_clk  (clock),
    .W1_data (_GEN),
    .W2_addr (io_addrC),
    .W2_en   (io_writeEnableC),
    .W2_clk  (clock),
    .W2_data (_GEN),
    .W3_addr (io_addrB),
    .W3_en   (io_writeEnableB),
    .W3_clk  (clock),
    .W3_data ({1'h0, io_writeDataB_busy}),
    .W4_addr (io_addrA),
    .W4_en   (io_writeEnableA),
    .W4_clk  (clock),
    .W4_data (2'h0)
  );
  assign io_readDataG_busy = _mem_ext_R0_data[0];
  assign io_readDataG_exception = _mem_ext_R0_data[1];
endmodule

// VCS coverage exclude_file
module mem_64x4(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [3:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [3:0] W0_data
);

  reg [3:0] Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 4'bx;
endmodule

module ROB_entry_mem(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeDataA_valid,
               io_writeDataA_is_branch,
               io_writeDataA_is_load,
               io_writeDataA_is_store,
               io_writeEnableA,
  input  [5:0] io_addrB,
  output       io_readDataB_valid,
               io_readDataB_is_branch,
               io_readDataB_is_load,
               io_readDataB_is_store
);

  wire [3:0] _mem_ext_R0_data;
  mem_64x4 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addrA),
    .W0_en   (io_writeEnableA),
    .W0_clk  (clock),
    .W0_data
      ({io_writeDataA_is_store,
        io_writeDataA_is_load,
        io_writeDataA_is_branch,
        io_writeDataA_valid})
  );
  assign io_readDataB_valid = _mem_ext_R0_data[0];
  assign io_readDataB_is_branch = _mem_ext_R0_data[1];
  assign io_readDataB_is_load = _mem_ext_R0_data[2];
  assign io_readDataB_is_store = _mem_ext_R0_data[3];
endmodule

module ROB(
  input         clock,
                reset,
  output        io_ROB_packet_ready,
  input         io_ROB_packet_valid,
  input  [31:0] io_ROB_packet_bits_fetch_PC,
  input         io_ROB_packet_bits_decoded_instruction_0_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_0_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RD,
  input         io_ROB_packet_bits_decoded_instruction_0_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RS1,
  input         io_ROB_packet_bits_decoded_instruction_0_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RS2,
  input         io_ROB_packet_bits_decoded_instruction_0_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_0_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_0_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_0_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_0_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_0_portID,
                io_ROB_packet_bits_decoded_instruction_0_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_0_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_0_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_0_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_0_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_0_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_0_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_0_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_0_IS_STORE,
                io_ROB_packet_bits_decoded_instruction_1_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_1_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RD,
  input         io_ROB_packet_bits_decoded_instruction_1_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RS1,
  input         io_ROB_packet_bits_decoded_instruction_1_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RS2,
  input         io_ROB_packet_bits_decoded_instruction_1_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_1_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_1_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_1_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_1_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_1_portID,
                io_ROB_packet_bits_decoded_instruction_1_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_1_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_1_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_1_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_1_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_1_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_1_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_1_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_1_IS_STORE,
                io_ROB_packet_bits_decoded_instruction_2_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_2_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RD,
  input         io_ROB_packet_bits_decoded_instruction_2_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RS1,
  input         io_ROB_packet_bits_decoded_instruction_2_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RS2,
  input         io_ROB_packet_bits_decoded_instruction_2_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_2_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_2_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_2_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_2_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_2_portID,
                io_ROB_packet_bits_decoded_instruction_2_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_2_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_2_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_2_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_2_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_2_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_2_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_2_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_2_IS_STORE,
                io_ROB_packet_bits_decoded_instruction_3_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_3_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RD,
  input         io_ROB_packet_bits_decoded_instruction_3_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RS1,
  input         io_ROB_packet_bits_decoded_instruction_3_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RS2,
  input         io_ROB_packet_bits_decoded_instruction_3_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_3_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_3_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_3_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_3_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_3_portID,
                io_ROB_packet_bits_decoded_instruction_3_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_3_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_3_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_3_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_3_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_3_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_3_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_3_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_3_IS_STORE,
                io_ROB_packet_bits_valid_bits_0,
                io_ROB_packet_bits_valid_bits_1,
                io_ROB_packet_bits_valid_bits_2,
                io_ROB_packet_bits_valid_bits_3,
  input  [3:0]  io_ROB_packet_bits_RAT_IDX,
  input         io_FU_outputs_0_valid,
  input  [63:0] io_FU_outputs_0_bits_RD,
  input  [31:0] io_FU_outputs_0_bits_RD_data,
  input         io_FU_outputs_0_bits_RD_valid,
  input  [31:0] io_FU_outputs_0_bits_instruction_PC,
  input         io_FU_outputs_0_bits_branch_taken,
  input  [31:0] io_FU_outputs_0_bits_target_address,
  input         io_FU_outputs_0_bits_branch_valid,
  input  [5:0]  io_FU_outputs_0_bits_ROB_index,
  input  [1:0]  io_FU_outputs_0_bits_fetch_packet_index,
  input         io_FU_outputs_1_valid,
  input  [63:0] io_FU_outputs_1_bits_RD,
  input  [31:0] io_FU_outputs_1_bits_RD_data,
  input         io_FU_outputs_1_bits_RD_valid,
  input  [31:0] io_FU_outputs_1_bits_instruction_PC,
  input         io_FU_outputs_1_bits_branch_taken,
  input  [31:0] io_FU_outputs_1_bits_target_address,
  input         io_FU_outputs_1_bits_branch_valid,
  input  [5:0]  io_FU_outputs_1_bits_ROB_index,
  input  [1:0]  io_FU_outputs_1_bits_fetch_packet_index,
  input         io_FU_outputs_2_valid,
  input  [63:0] io_FU_outputs_2_bits_RD,
  input  [31:0] io_FU_outputs_2_bits_RD_data,
  input         io_FU_outputs_2_bits_RD_valid,
  input  [31:0] io_FU_outputs_2_bits_instruction_PC,
  input         io_FU_outputs_2_bits_branch_taken,
  input  [31:0] io_FU_outputs_2_bits_target_address,
  input         io_FU_outputs_2_bits_branch_valid,
  input  [5:0]  io_FU_outputs_2_bits_ROB_index,
  input  [1:0]  io_FU_outputs_2_bits_fetch_packet_index,
  input         io_FU_outputs_3_valid,
  input  [63:0] io_FU_outputs_3_bits_RD,
  input  [31:0] io_FU_outputs_3_bits_RD_data,
  input         io_FU_outputs_3_bits_RD_valid,
  input  [31:0] io_FU_outputs_3_bits_instruction_PC,
  input         io_FU_outputs_3_bits_branch_taken,
  input  [31:0] io_FU_outputs_3_bits_target_address,
  input         io_FU_outputs_3_bits_branch_valid,
  input  [5:0]  io_FU_outputs_3_bits_ROB_index,
  input  [1:0]  io_FU_outputs_3_bits_fetch_packet_index,
  output        io_ROB_output_valid,
  output [31:0] io_ROB_output_bits_fetch_PC,
  output [3:0]  io_ROB_output_bits_RAT_IDX,
  output        io_ROB_output_bits_ROB_entries_0_valid,
                io_ROB_output_bits_ROB_entries_0_is_branch,
                io_ROB_output_bits_ROB_entries_0_is_load,
                io_ROB_output_bits_ROB_entries_0_is_store,
                io_ROB_output_bits_ROB_entries_1_valid,
                io_ROB_output_bits_ROB_entries_1_is_branch,
                io_ROB_output_bits_ROB_entries_1_is_load,
                io_ROB_output_bits_ROB_entries_1_is_store,
                io_ROB_output_bits_ROB_entries_2_valid,
                io_ROB_output_bits_ROB_entries_2_is_branch,
                io_ROB_output_bits_ROB_entries_2_is_load,
                io_ROB_output_bits_ROB_entries_2_is_store,
                io_ROB_output_bits_ROB_entries_3_valid,
                io_ROB_output_bits_ROB_entries_3_is_branch,
                io_ROB_output_bits_ROB_entries_3_is_load,
                io_ROB_output_bits_ROB_entries_3_is_store,
  input         io_commit_valid,
  input  [31:0] io_commit_fetch_PC,
  input         io_commit_T_NT,
  input  [2:0]  io_commit_br_type,
  input  [1:0]  io_commit_fetch_packet_index,
  input         io_commit_is_misprediction,
  input  [31:0] io_commit_expected_PC,
  input  [15:0] io_commit_GHR,
  input  [6:0]  io_commit_TOS,
                io_commit_NEXT,
  input  [3:0]  io_commit_RAT_IDX,
  input  [5:0]  io_PC_file_exec_addr,
  output [5:0]  io_PC_file_exec_data
);

  wire        _ROB_entry_banks_3_io_readDataB_valid;
  wire        _ROB_entry_banks_2_io_readDataB_valid;
  wire        _ROB_entry_banks_1_io_readDataB_valid;
  wire        _ROB_entry_banks_0_io_readDataB_valid;
  wire        _ROB_WB_banks_3_io_readDataG_busy;
  wire        _ROB_WB_banks_2_io_readDataG_busy;
  wire        _ROB_WB_banks_1_io_readDataG_busy;
  wire        _ROB_WB_banks_0_io_readDataG_busy;
  wire [31:0] _shared_mem_io_readDataC_fetch_PC;
  reg  [6:0]  front_pointer;
  reg  [6:0]  back_pointer;
  wire        full;
  wire        allocate = io_ROB_packet_valid & ~full;
  wire        commit_row_complete_0 =
    _ROB_WB_banks_0_io_readDataG_busy & _ROB_entry_banks_0_io_readDataB_valid
    | ~_ROB_entry_banks_0_io_readDataB_valid;
  wire        commit_row_complete_1 =
    _ROB_WB_banks_1_io_readDataG_busy & _ROB_entry_banks_1_io_readDataB_valid
    | ~_ROB_entry_banks_1_io_readDataB_valid;
  wire        commit_row_complete_2 =
    _ROB_WB_banks_2_io_readDataG_busy & _ROB_entry_banks_2_io_readDataB_valid
    | ~_ROB_entry_banks_2_io_readDataB_valid;
  wire        commit_row_valid;
  wire        commit_row_complete_3 =
    _ROB_WB_banks_3_io_readDataG_busy & _ROB_entry_banks_3_io_readDataB_valid
    | ~_ROB_entry_banks_3_io_readDataB_valid;
  wire        commit =
    commit_row_valid & commit_row_complete_0 & commit_row_complete_1
    & commit_row_complete_2 & commit_row_complete_3;
  wire [6:0]  _front_pointer_T_2 = front_pointer + 7'h1;
  wire [5:0]  front_index = commit ? _front_pointer_T_2[5:0] : front_pointer[5:0];
  assign full = front_index == back_pointer[5:0] & front_pointer != back_pointer;
  always @(posedge clock) begin
    if (reset) begin
      front_pointer <= 7'h0;
      back_pointer <= 7'h0;
    end
    else begin
      if (commit)
        front_pointer <= _front_pointer_T_2;
      else
        front_pointer <= front_pointer + {6'h0, commit};
      back_pointer <= back_pointer + {6'h0, allocate};
    end
  end // always @(posedge)
  ROB_shared_mem shared_mem (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_row_valid (io_ROB_packet_valid),
    .io_writeDataA_fetch_PC  (io_ROB_packet_bits_fetch_PC),
    .io_writeDataA_RAT_IDX   (io_ROB_packet_bits_RAT_IDX),
    .io_writeEnableA         (allocate),
    .io_addrB                (front_index),
    .io_readDataB_row_valid  (commit_row_valid),
    .io_readDataB_fetch_PC   (io_ROB_output_bits_fetch_PC),
    .io_readDataB_RAT_IDX    (io_ROB_output_bits_RAT_IDX),
    .io_addrC                (io_PC_file_exec_addr),
    .io_readDataC_fetch_PC   (_shared_mem_io_readDataC_fetch_PC)
  );
  ROB_WB_mem ROB_WB_banks_0 (
    .clock                  (clock),
    .io_addrA               (back_pointer[5:0]),
    .io_writeEnableA        (allocate),
    .io_addrB               (io_FU_outputs_0_bits_ROB_index),
    .io_writeDataB_busy     (io_FU_outputs_0_valid),
    .io_writeEnableB
      (io_FU_outputs_0_valid & io_FU_outputs_0_bits_fetch_packet_index == 2'h0),
    .io_addrC               (io_FU_outputs_1_bits_ROB_index),
    .io_writeDataC_busy     (io_FU_outputs_1_valid),
    .io_writeEnableC
      (io_FU_outputs_1_valid & io_FU_outputs_1_bits_fetch_packet_index == 2'h0),
    .io_addrD               (io_FU_outputs_2_bits_ROB_index),
    .io_writeEnableD
      (io_FU_outputs_2_valid & io_FU_outputs_2_bits_fetch_packet_index == 2'h0),
    .io_addrE               (io_FU_outputs_3_bits_ROB_index),
    .io_writeDataE_busy     (io_FU_outputs_3_valid),
    .io_writeEnableE
      (io_FU_outputs_3_valid & io_FU_outputs_3_bits_fetch_packet_index == 2'h0),
    .io_addrG               (front_index),
    .io_readDataG_busy      (_ROB_WB_banks_0_io_readDataG_busy),
    .io_readDataG_exception (/* unused */)
  );
  ROB_WB_mem ROB_WB_banks_1 (
    .clock                  (clock),
    .io_addrA               (back_pointer[5:0]),
    .io_writeEnableA        (allocate),
    .io_addrB               (io_FU_outputs_0_bits_ROB_index),
    .io_writeDataB_busy     (io_FU_outputs_0_valid),
    .io_writeEnableB
      (io_FU_outputs_0_valid & io_FU_outputs_0_bits_fetch_packet_index == 2'h1),
    .io_addrC               (io_FU_outputs_1_bits_ROB_index),
    .io_writeDataC_busy     (io_FU_outputs_1_valid),
    .io_writeEnableC
      (io_FU_outputs_1_valid & io_FU_outputs_1_bits_fetch_packet_index == 2'h1),
    .io_addrD               (io_FU_outputs_2_bits_ROB_index),
    .io_writeEnableD
      (io_FU_outputs_2_valid & io_FU_outputs_2_bits_fetch_packet_index == 2'h1),
    .io_addrE               (io_FU_outputs_3_bits_ROB_index),
    .io_writeDataE_busy     (io_FU_outputs_3_valid),
    .io_writeEnableE
      (io_FU_outputs_3_valid & io_FU_outputs_3_bits_fetch_packet_index == 2'h1),
    .io_addrG               (front_index),
    .io_readDataG_busy      (_ROB_WB_banks_1_io_readDataG_busy),
    .io_readDataG_exception (/* unused */)
  );
  ROB_WB_mem ROB_WB_banks_2 (
    .clock                  (clock),
    .io_addrA               (back_pointer[5:0]),
    .io_writeEnableA        (allocate),
    .io_addrB               (io_FU_outputs_0_bits_ROB_index),
    .io_writeDataB_busy     (io_FU_outputs_0_valid),
    .io_writeEnableB
      (io_FU_outputs_0_valid & io_FU_outputs_0_bits_fetch_packet_index == 2'h2),
    .io_addrC               (io_FU_outputs_1_bits_ROB_index),
    .io_writeDataC_busy     (io_FU_outputs_1_valid),
    .io_writeEnableC
      (io_FU_outputs_1_valid & io_FU_outputs_1_bits_fetch_packet_index == 2'h2),
    .io_addrD               (io_FU_outputs_2_bits_ROB_index),
    .io_writeEnableD
      (io_FU_outputs_2_valid & io_FU_outputs_2_bits_fetch_packet_index == 2'h2),
    .io_addrE               (io_FU_outputs_3_bits_ROB_index),
    .io_writeDataE_busy     (io_FU_outputs_3_valid),
    .io_writeEnableE
      (io_FU_outputs_3_valid & io_FU_outputs_3_bits_fetch_packet_index == 2'h2),
    .io_addrG               (front_index),
    .io_readDataG_busy      (_ROB_WB_banks_2_io_readDataG_busy),
    .io_readDataG_exception (/* unused */)
  );
  ROB_WB_mem ROB_WB_banks_3 (
    .clock                  (clock),
    .io_addrA               (back_pointer[5:0]),
    .io_writeEnableA        (allocate),
    .io_addrB               (io_FU_outputs_0_bits_ROB_index),
    .io_writeDataB_busy     (io_FU_outputs_0_valid),
    .io_writeEnableB
      (io_FU_outputs_0_valid & (&io_FU_outputs_0_bits_fetch_packet_index)),
    .io_addrC               (io_FU_outputs_1_bits_ROB_index),
    .io_writeDataC_busy     (io_FU_outputs_1_valid),
    .io_writeEnableC
      (io_FU_outputs_1_valid & (&io_FU_outputs_1_bits_fetch_packet_index)),
    .io_addrD               (io_FU_outputs_2_bits_ROB_index),
    .io_writeEnableD
      (io_FU_outputs_2_valid & (&io_FU_outputs_2_bits_fetch_packet_index)),
    .io_addrE               (io_FU_outputs_3_bits_ROB_index),
    .io_writeDataE_busy     (io_FU_outputs_3_valid),
    .io_writeEnableE
      (io_FU_outputs_3_valid & (&io_FU_outputs_3_bits_fetch_packet_index)),
    .io_addrG               (front_index),
    .io_readDataG_busy      (_ROB_WB_banks_3_io_readDataG_busy),
    .io_readDataG_exception (/* unused */)
  );
  ROB_entry_mem ROB_entry_banks_0 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_0),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_0_needs_branch_unit),
    .io_writeDataA_is_load   (io_ROB_packet_bits_decoded_instruction_0_IS_LOAD),
    .io_writeDataA_is_store  (io_ROB_packet_bits_decoded_instruction_0_IS_STORE),
    .io_writeEnableA         (allocate),
    .io_addrB                (front_index),
    .io_readDataB_valid      (_ROB_entry_banks_0_io_readDataB_valid),
    .io_readDataB_is_branch  (io_ROB_output_bits_ROB_entries_0_is_branch),
    .io_readDataB_is_load    (io_ROB_output_bits_ROB_entries_0_is_load),
    .io_readDataB_is_store   (io_ROB_output_bits_ROB_entries_0_is_store)
  );
  ROB_entry_mem ROB_entry_banks_1 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_1),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_1_needs_branch_unit),
    .io_writeDataA_is_load   (io_ROB_packet_bits_decoded_instruction_1_IS_LOAD),
    .io_writeDataA_is_store  (io_ROB_packet_bits_decoded_instruction_1_IS_STORE),
    .io_writeEnableA         (allocate),
    .io_addrB                (front_index),
    .io_readDataB_valid      (_ROB_entry_banks_1_io_readDataB_valid),
    .io_readDataB_is_branch  (io_ROB_output_bits_ROB_entries_1_is_branch),
    .io_readDataB_is_load    (io_ROB_output_bits_ROB_entries_1_is_load),
    .io_readDataB_is_store   (io_ROB_output_bits_ROB_entries_1_is_store)
  );
  ROB_entry_mem ROB_entry_banks_2 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_2),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_2_needs_branch_unit),
    .io_writeDataA_is_load   (io_ROB_packet_bits_decoded_instruction_2_IS_LOAD),
    .io_writeDataA_is_store  (io_ROB_packet_bits_decoded_instruction_2_IS_STORE),
    .io_writeEnableA         (allocate),
    .io_addrB                (front_index),
    .io_readDataB_valid      (_ROB_entry_banks_2_io_readDataB_valid),
    .io_readDataB_is_branch  (io_ROB_output_bits_ROB_entries_2_is_branch),
    .io_readDataB_is_load    (io_ROB_output_bits_ROB_entries_2_is_load),
    .io_readDataB_is_store   (io_ROB_output_bits_ROB_entries_2_is_store)
  );
  ROB_entry_mem ROB_entry_banks_3 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_3),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_3_needs_branch_unit),
    .io_writeDataA_is_load   (io_ROB_packet_bits_decoded_instruction_3_IS_LOAD),
    .io_writeDataA_is_store  (io_ROB_packet_bits_decoded_instruction_3_IS_STORE),
    .io_writeEnableA         (allocate),
    .io_addrB                (front_index),
    .io_readDataB_valid      (_ROB_entry_banks_3_io_readDataB_valid),
    .io_readDataB_is_branch  (io_ROB_output_bits_ROB_entries_3_is_branch),
    .io_readDataB_is_load    (io_ROB_output_bits_ROB_entries_3_is_load),
    .io_readDataB_is_store   (io_ROB_output_bits_ROB_entries_3_is_store)
  );
  assign io_ROB_packet_ready = ~full;
  assign io_ROB_output_valid = commit;
  assign io_ROB_output_bits_ROB_entries_0_valid = _ROB_entry_banks_0_io_readDataB_valid;
  assign io_ROB_output_bits_ROB_entries_1_valid = _ROB_entry_banks_1_io_readDataB_valid;
  assign io_ROB_output_bits_ROB_entries_2_valid = _ROB_entry_banks_2_io_readDataB_valid;
  assign io_ROB_output_bits_ROB_entries_3_valid = _ROB_entry_banks_3_io_readDataB_valid;
  assign io_PC_file_exec_data = _shared_mem_io_readDataC_fetch_PC[5:0];
endmodule

