// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_64x2(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [1:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
               W1_clk,
  input  [1:0] W1_data
);

  reg [1:0] Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
endmodule

module ROB_mem(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeDataA_valid,
               io_writeDataA_is_branch,
               io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeEnableB,
  input  [5:0] io_addrC,
  output       io_readDataC_valid,
               io_readDataC_is_branch
);

  wire [1:0] _mem_ext_R0_data;
  mem_64x2 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (2'h0),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data ({io_writeDataA_is_branch, io_writeDataA_valid})
  );
  assign io_readDataC_valid = _mem_ext_R0_data[0];
  assign io_readDataC_is_branch = _mem_ext_R0_data[1];
endmodule

// VCS coverage exclude_file
module mem_64x1(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output       R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
               W1_clk,
               W1_data
);

  reg       Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 1'bx;
endmodule

module ROB_mem_4(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeDataB,
               io_writeEnableB,
  input  [5:0] io_addrC,
  output       io_readDataC
);

  mem_64x1 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_readDataC),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (io_writeDataB),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data (1'h0)
  );
endmodule

module ROB(
  input         clock,
                reset,
  output        io_ROB_allocate_ready,
  input         io_ROB_allocate_valid,
                io_ROB_allocate_bits_0_valid,
                io_ROB_allocate_bits_0_is_branch,
                io_ROB_allocate_bits_1_valid,
                io_ROB_allocate_bits_1_is_branch,
                io_ROB_allocate_bits_2_valid,
                io_ROB_allocate_bits_2_is_branch,
                io_ROB_allocate_bits_3_valid,
                io_ROB_allocate_bits_3_is_branch,
                io_FU_outputs_0_valid,
  input  [63:0] io_FU_outputs_0_bits_RD,
  input  [31:0] io_FU_outputs_0_bits_RD_data,
  input         io_FU_outputs_0_bits_RD_valid,
  input  [31:0] io_FU_outputs_0_bits_instruction_PC,
  input         io_FU_outputs_0_bits_branch_taken,
  input  [31:0] io_FU_outputs_0_bits_target_address,
  input         io_FU_outputs_0_bits_branch_valid,
  input  [5:0]  io_FU_outputs_0_bits_ROB_index,
  input  [1:0]  io_FU_outputs_0_bits_fetch_packet_index,
  input         io_FU_outputs_1_valid,
  input  [63:0] io_FU_outputs_1_bits_RD,
  input  [31:0] io_FU_outputs_1_bits_RD_data,
  input         io_FU_outputs_1_bits_RD_valid,
  input  [31:0] io_FU_outputs_1_bits_instruction_PC,
  input         io_FU_outputs_1_bits_branch_taken,
  input  [31:0] io_FU_outputs_1_bits_target_address,
  input         io_FU_outputs_1_bits_branch_valid,
  input  [5:0]  io_FU_outputs_1_bits_ROB_index,
  input  [1:0]  io_FU_outputs_1_bits_fetch_packet_index,
  input         io_FU_outputs_2_valid,
  input  [63:0] io_FU_outputs_2_bits_RD,
  input  [31:0] io_FU_outputs_2_bits_RD_data,
  input         io_FU_outputs_2_bits_RD_valid,
  input  [31:0] io_FU_outputs_2_bits_instruction_PC,
  input         io_FU_outputs_2_bits_branch_taken,
  input  [31:0] io_FU_outputs_2_bits_target_address,
  input         io_FU_outputs_2_bits_branch_valid,
  input  [5:0]  io_FU_outputs_2_bits_ROB_index,
  input  [1:0]  io_FU_outputs_2_bits_fetch_packet_index,
  input         io_FU_outputs_3_valid,
  input  [63:0] io_FU_outputs_3_bits_RD,
  input  [31:0] io_FU_outputs_3_bits_RD_data,
  input         io_FU_outputs_3_bits_RD_valid,
  input  [31:0] io_FU_outputs_3_bits_instruction_PC,
  input         io_FU_outputs_3_bits_branch_taken,
  input  [31:0] io_FU_outputs_3_bits_target_address,
  input         io_FU_outputs_3_bits_branch_valid,
  input  [5:0]  io_FU_outputs_3_bits_ROB_index,
  input  [1:0]  io_FU_outputs_3_bits_fetch_packet_index,
  output        io_commit_0_valid,
                io_commit_0_is_branch,
                io_commit_1_valid,
                io_commit_1_is_branch,
                io_commit_2_valid,
                io_commit_2_is_branch,
                io_commit_3_valid,
                io_commit_3_is_branch
);

  wire       _ROB_busy_banks_3_io_readDataC;
  wire       _ROB_busy_banks_2_io_readDataC;
  wire       _ROB_busy_banks_1_io_readDataC;
  wire       _ROB_busy_banks_0_io_readDataC;
  wire       _ROB_entry_banks_3_io_readDataC_valid;
  wire       _ROB_entry_banks_2_io_readDataC_valid;
  wire       _ROB_entry_banks_1_io_readDataC_valid;
  wire       _ROB_entry_banks_0_io_readDataC_valid;
  reg  [6:0] front_pointer;
  reg  [6:0] back_pointer;
  wire       _GEN = io_FU_outputs_0_bits_fetch_packet_index == 2'h0;
  wire       _GEN_0 = _GEN & io_FU_outputs_0_valid;
  wire       _GEN_1 = io_FU_outputs_0_bits_ROB_index == front_pointer[5:0];
  wire       _GEN_2 = io_FU_outputs_1_bits_fetch_packet_index == 2'h0;
  wire       _GEN_3 = _GEN_2 & io_FU_outputs_1_valid;
  wire       _GEN_4 = io_FU_outputs_1_bits_ROB_index == front_pointer[5:0];
  wire       _GEN_5 = io_FU_outputs_2_bits_fetch_packet_index == 2'h0;
  wire       _GEN_6 = _GEN_5 & io_FU_outputs_2_valid;
  wire       _GEN_7 = io_FU_outputs_2_bits_ROB_index == front_pointer[5:0];
  wire       _GEN_8 = io_FU_outputs_3_bits_fetch_packet_index == 2'h0;
  wire       _GEN_9 = _GEN_8 & io_FU_outputs_3_valid;
  wire       _GEN_10 = _GEN_9 | _GEN_6 | _GEN_3 | _GEN_0;
  wire       _GEN_11 = io_FU_outputs_3_bits_ROB_index == front_pointer[5:0];
  wire       live_busy_bit_0 =
    _GEN_8 & _GEN_11 & io_FU_outputs_3_valid | _GEN_5 & _GEN_7 & io_FU_outputs_2_valid
    | _GEN_2 & _GEN_4 & io_FU_outputs_1_valid | _GEN & _GEN_1 & io_FU_outputs_0_valid
    | _ROB_busy_banks_0_io_readDataC;
  wire       _GEN_12 = io_FU_outputs_0_bits_fetch_packet_index == 2'h1;
  wire       _GEN_13 = _GEN_12 & io_FU_outputs_0_valid;
  wire       _GEN_14 = io_FU_outputs_1_bits_fetch_packet_index == 2'h1;
  wire       _GEN_15 = _GEN_14 & io_FU_outputs_1_valid;
  wire       _GEN_16 = io_FU_outputs_2_bits_fetch_packet_index == 2'h1;
  wire       _GEN_17 = _GEN_16 & io_FU_outputs_2_valid;
  wire       _GEN_18 = io_FU_outputs_3_bits_fetch_packet_index == 2'h1;
  wire       _GEN_19 = _GEN_18 & io_FU_outputs_3_valid;
  wire       _GEN_20 = _GEN_19 | _GEN_17 | _GEN_15 | _GEN_13;
  wire       live_busy_bit_1 =
    _GEN_18 & _GEN_11 & io_FU_outputs_3_valid | _GEN_16 & _GEN_7 & io_FU_outputs_2_valid
    | _GEN_14 & _GEN_4 & io_FU_outputs_1_valid | _GEN_12 & _GEN_1 & io_FU_outputs_0_valid
    | _ROB_busy_banks_1_io_readDataC;
  wire       _GEN_21 = io_FU_outputs_0_bits_fetch_packet_index == 2'h2;
  wire       _GEN_22 = _GEN_21 & io_FU_outputs_0_valid;
  wire       _GEN_23 = io_FU_outputs_1_bits_fetch_packet_index == 2'h2;
  wire       _GEN_24 = _GEN_23 & io_FU_outputs_1_valid;
  wire       _GEN_25 = io_FU_outputs_2_bits_fetch_packet_index == 2'h2;
  wire       _GEN_26 = _GEN_25 & io_FU_outputs_2_valid;
  wire       _GEN_27 = io_FU_outputs_3_bits_fetch_packet_index == 2'h2;
  wire       _GEN_28 = _GEN_27 & io_FU_outputs_3_valid;
  wire       _GEN_29 = _GEN_28 | _GEN_26 | _GEN_24 | _GEN_22;
  wire       live_busy_bit_2 =
    _GEN_27 & _GEN_11 & io_FU_outputs_3_valid | _GEN_25 & _GEN_7 & io_FU_outputs_2_valid
    | _GEN_23 & _GEN_4 & io_FU_outputs_1_valid | _GEN_21 & _GEN_1 & io_FU_outputs_0_valid
    | _ROB_busy_banks_2_io_readDataC;
  wire       _GEN_30 = (&io_FU_outputs_0_bits_fetch_packet_index) & io_FU_outputs_0_valid;
  wire       _GEN_31 = (&io_FU_outputs_1_bits_fetch_packet_index) & io_FU_outputs_1_valid;
  wire       _GEN_32 = (&io_FU_outputs_2_bits_fetch_packet_index) & io_FU_outputs_2_valid;
  wire       _GEN_33 = (&io_FU_outputs_3_bits_fetch_packet_index) & io_FU_outputs_3_valid;
  wire       _GEN_34 = _GEN_33 | _GEN_32 | _GEN_31 | _GEN_30;
  wire       live_busy_bit_3 =
    (&io_FU_outputs_3_bits_fetch_packet_index) & _GEN_11 & io_FU_outputs_3_valid
    | (&io_FU_outputs_2_bits_fetch_packet_index) & _GEN_7 & io_FU_outputs_2_valid
    | (&io_FU_outputs_1_bits_fetch_packet_index) & _GEN_4 & io_FU_outputs_1_valid
    | (&io_FU_outputs_0_bits_fetch_packet_index) & _GEN_1 & io_FU_outputs_0_valid
    | _ROB_busy_banks_3_io_readDataC;
  wire       commit_valid_0 = live_busy_bit_0 & _ROB_entry_banks_0_io_readDataC_valid;
  wire       commit_valid_1 =
    live_busy_bit_1 & _ROB_entry_banks_1_io_readDataC_valid
    & (commit_valid_0 | ~_ROB_entry_banks_0_io_readDataC_valid);
  wire       commit_valid_2 =
    live_busy_bit_2 & _ROB_entry_banks_2_io_readDataC_valid
    & (commit_valid_1 | ~_ROB_entry_banks_1_io_readDataC_valid);
  wire       commit_valid_3 =
    live_busy_bit_3 & _ROB_entry_banks_3_io_readDataC_valid
    & (commit_valid_2 | ~_ROB_entry_banks_2_io_readDataC_valid);
  reg        increment_front_pointer_REG;
  wire       increment_front_pointer =
    ~(_ROB_entry_banks_0_io_readDataC_valid | _ROB_entry_banks_1_io_readDataC_valid
      | _ROB_entry_banks_2_io_readDataC_valid | _ROB_entry_banks_3_io_readDataC_valid)
    & increment_front_pointer_REG
    | (~_ROB_entry_banks_0_io_readDataC_valid | live_busy_bit_0)
    & (~_ROB_entry_banks_1_io_readDataC_valid | live_busy_bit_1)
    & (~_ROB_entry_banks_2_io_readDataC_valid | live_busy_bit_2)
    & (~_ROB_entry_banks_3_io_readDataC_valid | live_busy_bit_3)
    & (io_FU_outputs_0_valid | io_FU_outputs_1_valid | io_FU_outputs_2_valid
       | io_FU_outputs_3_valid);
  wire [6:0] _front_index_T = front_pointer + 7'h1;
  wire [5:0] front_index =
    increment_front_pointer ? _front_index_T[5:0] : front_pointer[5:0];
  always @(posedge clock) begin
    if (reset) begin
      front_pointer <= 7'h0;
      back_pointer <= 7'h0;
    end
    else begin
      if (increment_front_pointer)
        front_pointer <= _front_index_T;
      back_pointer <= back_pointer + {6'h0, io_ROB_allocate_valid};
    end
    increment_front_pointer_REG <=
      commit_valid_0 | commit_valid_1 | commit_valid_2 | commit_valid_3;
  end // always @(posedge)
  ROB_mem ROB_entry_banks_0 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_allocate_bits_0_valid),
    .io_writeDataA_is_branch (io_ROB_allocate_bits_0_is_branch),
    .io_writeEnableA         (io_ROB_allocate_bits_0_valid),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid_0),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_0_io_readDataC_valid),
    .io_readDataC_is_branch  (io_commit_0_is_branch)
  );
  ROB_mem ROB_entry_banks_1 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_allocate_bits_1_valid),
    .io_writeDataA_is_branch (io_ROB_allocate_bits_1_is_branch),
    .io_writeEnableA         (io_ROB_allocate_bits_1_valid),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid_1),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_1_io_readDataC_valid),
    .io_readDataC_is_branch  (io_commit_1_is_branch)
  );
  ROB_mem ROB_entry_banks_2 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_allocate_bits_2_valid),
    .io_writeDataA_is_branch (io_ROB_allocate_bits_2_is_branch),
    .io_writeEnableA         (io_ROB_allocate_bits_2_valid),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid_2),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_2_io_readDataC_valid),
    .io_readDataC_is_branch  (io_commit_2_is_branch)
  );
  ROB_mem ROB_entry_banks_3 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_allocate_bits_3_valid),
    .io_writeDataA_is_branch (io_ROB_allocate_bits_3_is_branch),
    .io_writeEnableA         (io_ROB_allocate_bits_3_valid),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid_3),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_3_io_readDataC_valid),
    .io_readDataC_is_branch  (io_commit_3_is_branch)
  );
  ROB_mem_4 ROB_busy_banks_0 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeEnableA (io_ROB_allocate_valid),
    .io_addrB
      (_GEN_9
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_6
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_3
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_0 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_10),
    .io_writeEnableB (_GEN_10),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_0_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_1 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeEnableA (io_ROB_allocate_valid),
    .io_addrB
      (_GEN_19
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_17
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_15
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_13 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_20),
    .io_writeEnableB (_GEN_20),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_1_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_2 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeEnableA (io_ROB_allocate_valid),
    .io_addrB
      (_GEN_28
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_26
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_24
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_22 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_29),
    .io_writeEnableB (_GEN_29),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_2_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_3 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeEnableA (io_ROB_allocate_valid),
    .io_addrB
      (_GEN_33
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_32
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_31
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_30 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_34),
    .io_writeEnableB (_GEN_34),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_3_io_readDataC)
  );
  assign io_ROB_allocate_ready =
    ~(front_index == back_pointer[5:0] & front_pointer != back_pointer);
  assign io_commit_0_valid = _ROB_entry_banks_0_io_readDataC_valid & commit_valid_0;
  assign io_commit_1_valid = _ROB_entry_banks_1_io_readDataC_valid & commit_valid_1;
  assign io_commit_2_valid = _ROB_entry_banks_2_io_readDataC_valid & commit_valid_2;
  assign io_commit_3_valid = _ROB_entry_banks_3_io_readDataC_valid & commit_valid_3;
endmodule

