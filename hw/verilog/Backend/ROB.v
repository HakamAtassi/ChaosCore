// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_64x2(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [1:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
               W1_clk,
  input  [1:0] W1_data
);

  reg [1:0] Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
endmodule

module ROB_mem(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeDataA_valid,
               io_writeDataA_is_branch,
               io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeEnableB,
  input  [5:0] io_addrC,
  output       io_readDataC_valid,
               io_readDataC_is_branch
);

  wire [1:0] _mem_ext_R0_data;
  mem_64x2 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (2'h0),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data ({io_writeDataA_is_branch, io_writeDataA_valid})
  );
  assign io_readDataC_valid = _mem_ext_R0_data[0];
  assign io_readDataC_is_branch = _mem_ext_R0_data[1];
endmodule

// VCS coverage exclude_file
module mem_64x1(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output       R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
               W0_data,
  input  [5:0] W1_addr,
  input        W1_en,
               W1_clk,
               W1_data
);

  reg       Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 1'bx;
endmodule

module ROB_mem_4(
  input        clock,
  input  [5:0] io_addrA,
  input        io_writeDataA,
               io_writeEnableA,
  input  [5:0] io_addrB,
  input        io_writeDataB,
               io_writeEnableB,
  input  [5:0] io_addrC,
  output       io_readDataC
);

  mem_64x1 mem_ext (
    .R0_addr (io_addrC),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_readDataC),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (io_writeDataB),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data (io_writeDataA)
  );
endmodule

// VCS coverage exclude_file
module mem_64x32(
  input  [5:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [5:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [5:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  input  [5:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [31:0] W1_data
);

  reg [31:0] Memory[0:63];
  reg        _R0_en_d0;
  reg [5:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [5:0]  _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 32'bx;
endmodule

module PC_file_mem(
  input         clock,
  input  [5:0]  io_addrA,
  input  [31:0] io_writeDataA,
  input         io_writeEnableA,
  input  [5:0]  io_addrB,
  input         io_writeEnableB,
  input  [5:0]  io_addrC,
  output [31:0] io_readDataC,
  input  [5:0]  io_addrD,
  output [31:0] io_readDataD
);

  mem_64x32 mem_ext (
    .R0_addr (io_addrD),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_readDataD),
    .R1_addr (io_addrC),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (io_readDataC),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (32'h0),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data (io_writeDataA)
  );
endmodule

module ROB(
  input         clock,
                reset,
  output        io_ROB_packet_ready,
  input         io_ROB_packet_valid,
  input  [31:0] io_ROB_packet_bits_fetch_PC,
                io_ROB_packet_bits_decoded_instruction_0_fetch_PC,
  input         io_ROB_packet_bits_decoded_instruction_0_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_0_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RD,
  input         io_ROB_packet_bits_decoded_instruction_0_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RS1,
  input         io_ROB_packet_bits_decoded_instruction_0_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_RS2,
  input         io_ROB_packet_bits_decoded_instruction_0_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_0_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_0_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_0_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_0_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_0_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_0_portID,
                io_ROB_packet_bits_decoded_instruction_0_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_0_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_0_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_0_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_0_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_0_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_0_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_0_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_0_IS_STORE,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_1_fetch_PC,
  input         io_ROB_packet_bits_decoded_instruction_1_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_1_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RD,
  input         io_ROB_packet_bits_decoded_instruction_1_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RS1,
  input         io_ROB_packet_bits_decoded_instruction_1_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_RS2,
  input         io_ROB_packet_bits_decoded_instruction_1_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_1_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_1_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_1_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_1_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_1_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_1_portID,
                io_ROB_packet_bits_decoded_instruction_1_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_1_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_1_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_1_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_1_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_1_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_1_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_1_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_1_IS_STORE,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_2_fetch_PC,
  input         io_ROB_packet_bits_decoded_instruction_2_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_2_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RD,
  input         io_ROB_packet_bits_decoded_instruction_2_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RS1,
  input         io_ROB_packet_bits_decoded_instruction_2_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_RS2,
  input         io_ROB_packet_bits_decoded_instruction_2_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_2_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_2_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_2_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_2_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_2_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_2_portID,
                io_ROB_packet_bits_decoded_instruction_2_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_2_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_2_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_2_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_2_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_2_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_2_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_2_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_2_IS_STORE,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_3_fetch_PC,
  input         io_ROB_packet_bits_decoded_instruction_3_ready_bits_RS1_ready,
                io_ROB_packet_bits_decoded_instruction_3_ready_bits_RS2_ready,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RD,
  input         io_ROB_packet_bits_decoded_instruction_3_RD_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RS1,
  input         io_ROB_packet_bits_decoded_instruction_3_RS1_valid,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_RS2,
  input         io_ROB_packet_bits_decoded_instruction_3_RS2_valid,
  input  [31:0] io_ROB_packet_bits_decoded_instruction_3_IMM,
  input  [2:0]  io_ROB_packet_bits_decoded_instruction_3_FUNCT3,
  input  [3:0]  io_ROB_packet_bits_decoded_instruction_3_packet_index,
  input  [5:0]  io_ROB_packet_bits_decoded_instruction_3_ROB_index,
  input  [4:0]  io_ROB_packet_bits_decoded_instruction_3_instructionType,
  input  [1:0]  io_ROB_packet_bits_decoded_instruction_3_portID,
                io_ROB_packet_bits_decoded_instruction_3_RS_type,
  input         io_ROB_packet_bits_decoded_instruction_3_needs_ALU,
                io_ROB_packet_bits_decoded_instruction_3_needs_branch_unit,
                io_ROB_packet_bits_decoded_instruction_3_needs_CSRs,
                io_ROB_packet_bits_decoded_instruction_3_SUBTRACT,
                io_ROB_packet_bits_decoded_instruction_3_MULTIPLY,
                io_ROB_packet_bits_decoded_instruction_3_IMMEDIATE,
                io_ROB_packet_bits_decoded_instruction_3_IS_LOAD,
                io_ROB_packet_bits_decoded_instruction_3_IS_STORE,
                io_ROB_packet_bits_valid_bits_0,
                io_ROB_packet_bits_valid_bits_1,
                io_ROB_packet_bits_valid_bits_2,
                io_ROB_packet_bits_valid_bits_3,
                io_FU_outputs_0_valid,
  input  [63:0] io_FU_outputs_0_bits_RD,
  input  [31:0] io_FU_outputs_0_bits_RD_data,
  input         io_FU_outputs_0_bits_RD_valid,
  input  [31:0] io_FU_outputs_0_bits_instruction_PC,
  input         io_FU_outputs_0_bits_branch_taken,
  input  [31:0] io_FU_outputs_0_bits_target_address,
  input         io_FU_outputs_0_bits_branch_valid,
  input  [5:0]  io_FU_outputs_0_bits_ROB_index,
  input  [1:0]  io_FU_outputs_0_bits_fetch_packet_index,
  input         io_FU_outputs_1_valid,
  input  [63:0] io_FU_outputs_1_bits_RD,
  input  [31:0] io_FU_outputs_1_bits_RD_data,
  input         io_FU_outputs_1_bits_RD_valid,
  input  [31:0] io_FU_outputs_1_bits_instruction_PC,
  input         io_FU_outputs_1_bits_branch_taken,
  input  [31:0] io_FU_outputs_1_bits_target_address,
  input         io_FU_outputs_1_bits_branch_valid,
  input  [5:0]  io_FU_outputs_1_bits_ROB_index,
  input  [1:0]  io_FU_outputs_1_bits_fetch_packet_index,
  input         io_FU_outputs_2_valid,
  input  [63:0] io_FU_outputs_2_bits_RD,
  input  [31:0] io_FU_outputs_2_bits_RD_data,
  input         io_FU_outputs_2_bits_RD_valid,
  input  [31:0] io_FU_outputs_2_bits_instruction_PC,
  input         io_FU_outputs_2_bits_branch_taken,
  input  [31:0] io_FU_outputs_2_bits_target_address,
  input         io_FU_outputs_2_bits_branch_valid,
  input  [5:0]  io_FU_outputs_2_bits_ROB_index,
  input  [1:0]  io_FU_outputs_2_bits_fetch_packet_index,
  input         io_FU_outputs_3_valid,
  input  [63:0] io_FU_outputs_3_bits_RD,
  input  [31:0] io_FU_outputs_3_bits_RD_data,
  input         io_FU_outputs_3_bits_RD_valid,
  input  [31:0] io_FU_outputs_3_bits_instruction_PC,
  input         io_FU_outputs_3_bits_branch_taken,
  input  [31:0] io_FU_outputs_3_bits_target_address,
  input         io_FU_outputs_3_bits_branch_valid,
  input  [5:0]  io_FU_outputs_3_bits_ROB_index,
  input  [1:0]  io_FU_outputs_3_bits_fetch_packet_index,
  output        io_ROB_0_valid,
                io_ROB_0_is_branch,
                io_ROB_1_valid,
                io_ROB_1_is_branch,
                io_ROB_2_valid,
                io_ROB_2_is_branch,
                io_ROB_3_valid,
                io_ROB_3_is_branch,
  input         io_commit_valid,
  input  [31:0] io_commit_fetch_PC,
  input         io_commit_T_NT,
  input  [2:0]  io_commit_br_type,
  input  [1:0]  io_commit_fetch_packet_index,
  input         io_commit_is_misprediction,
  input  [31:0] io_commit_expected_PC,
  input  [15:0] io_commit_GHR,
  input  [6:0]  io_commit_TOS,
                io_commit_NEXT,
  input  [3:0]  io_commit_RAT_IDX,
  input  [5:0]  io_PC_file_exec_addr,
  output [5:0]  io_PC_file_exec_data,
                io_PC_file_commit_data
);

  wire [31:0] _PC_file_io_readDataC;
  wire [31:0] _PC_file_io_readDataD;
  wire        _ROB_valid_bank_io_readDataC;
  wire        _ROB_busy_banks_3_io_readDataC;
  wire        _ROB_busy_banks_2_io_readDataC;
  wire        _ROB_busy_banks_1_io_readDataC;
  wire        _ROB_busy_banks_0_io_readDataC;
  wire        _ROB_entry_banks_3_io_readDataC_valid;
  wire        _ROB_entry_banks_2_io_readDataC_valid;
  wire        _ROB_entry_banks_1_io_readDataC_valid;
  wire        _ROB_entry_banks_0_io_readDataC_valid;
  reg  [6:0]  front_pointer;
  reg  [6:0]  back_pointer;
  wire        _GEN =
    io_FU_outputs_0_bits_fetch_packet_index == 2'h0 & io_FU_outputs_0_valid;
  wire        _GEN_0 =
    io_FU_outputs_1_bits_fetch_packet_index == 2'h0 & io_FU_outputs_1_valid;
  wire        _GEN_1 =
    io_FU_outputs_2_bits_fetch_packet_index == 2'h0 & io_FU_outputs_2_valid;
  wire        _GEN_2 =
    io_FU_outputs_3_bits_fetch_packet_index == 2'h0 & io_FU_outputs_3_valid;
  wire        _GEN_3 = _GEN_2 | _GEN_1 | _GEN_0 | _GEN;
  wire        _GEN_4 =
    io_FU_outputs_0_bits_fetch_packet_index == 2'h1 & io_FU_outputs_0_valid;
  wire        _GEN_5 =
    io_FU_outputs_1_bits_fetch_packet_index == 2'h1 & io_FU_outputs_1_valid;
  wire        _GEN_6 =
    io_FU_outputs_2_bits_fetch_packet_index == 2'h1 & io_FU_outputs_2_valid;
  wire        _GEN_7 =
    io_FU_outputs_3_bits_fetch_packet_index == 2'h1 & io_FU_outputs_3_valid;
  wire        _GEN_8 = _GEN_7 | _GEN_6 | _GEN_5 | _GEN_4;
  wire        _GEN_9 =
    io_FU_outputs_0_bits_fetch_packet_index == 2'h2 & io_FU_outputs_0_valid;
  wire        _GEN_10 =
    io_FU_outputs_1_bits_fetch_packet_index == 2'h2 & io_FU_outputs_1_valid;
  wire        _GEN_11 =
    io_FU_outputs_2_bits_fetch_packet_index == 2'h2 & io_FU_outputs_2_valid;
  wire        _GEN_12 =
    io_FU_outputs_3_bits_fetch_packet_index == 2'h2 & io_FU_outputs_3_valid;
  wire        _GEN_13 = _GEN_12 | _GEN_11 | _GEN_10 | _GEN_9;
  wire        _GEN_14 =
    (&io_FU_outputs_0_bits_fetch_packet_index) & io_FU_outputs_0_valid;
  wire        _GEN_15 =
    (&io_FU_outputs_1_bits_fetch_packet_index) & io_FU_outputs_1_valid;
  wire        _GEN_16 =
    (&io_FU_outputs_2_bits_fetch_packet_index) & io_FU_outputs_2_valid;
  wire        _GEN_17 =
    (&io_FU_outputs_3_bits_fetch_packet_index) & io_FU_outputs_3_valid;
  wire        _GEN_18 = _GEN_17 | _GEN_16 | _GEN_15 | _GEN_14;
  wire        commit_valid =
    (&{~_ROB_entry_banks_3_io_readDataC_valid | _ROB_busy_banks_3_io_readDataC
         & _ROB_entry_banks_3_io_readDataC_valid,
       ~_ROB_entry_banks_2_io_readDataC_valid | _ROB_busy_banks_2_io_readDataC
         & _ROB_entry_banks_2_io_readDataC_valid,
       ~_ROB_entry_banks_1_io_readDataC_valid | _ROB_busy_banks_1_io_readDataC
         & _ROB_entry_banks_1_io_readDataC_valid,
       ~_ROB_entry_banks_0_io_readDataC_valid | _ROB_busy_banks_0_io_readDataC
         & _ROB_entry_banks_0_io_readDataC_valid}) & _ROB_valid_bank_io_readDataC;
  wire [6:0]  _front_index_T = front_pointer + 7'h1;
  wire [5:0]  front_index = commit_valid ? _front_index_T[5:0] : front_pointer[5:0];
  always @(posedge clock) begin
    if (reset) begin
      front_pointer <= 7'h0;
      back_pointer <= 7'h0;
    end
    else begin
      if (commit_valid)
        front_pointer <= _front_index_T;
      back_pointer <=
        back_pointer
        + {6'h0,
           io_ROB_packet_bits_valid_bits_0 | io_ROB_packet_bits_valid_bits_1
             | io_ROB_packet_bits_valid_bits_2 | io_ROB_packet_bits_valid_bits_3};
    end
  end // always @(posedge)
  ROB_mem ROB_entry_banks_0 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_0),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_0_needs_branch_unit),
    .io_writeEnableA         (io_ROB_packet_bits_valid_bits_0),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_0_io_readDataC_valid),
    .io_readDataC_is_branch  (io_ROB_0_is_branch)
  );
  ROB_mem ROB_entry_banks_1 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_1),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_1_needs_branch_unit),
    .io_writeEnableA         (io_ROB_packet_bits_valid_bits_1),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_1_io_readDataC_valid),
    .io_readDataC_is_branch  (io_ROB_1_is_branch)
  );
  ROB_mem ROB_entry_banks_2 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_2),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_2_needs_branch_unit),
    .io_writeEnableA         (io_ROB_packet_bits_valid_bits_2),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_2_io_readDataC_valid),
    .io_readDataC_is_branch  (io_ROB_2_is_branch)
  );
  ROB_mem ROB_entry_banks_3 (
    .clock                   (clock),
    .io_addrA                (back_pointer[5:0]),
    .io_writeDataA_valid     (io_ROB_packet_bits_valid_bits_3),
    .io_writeDataA_is_branch (io_ROB_packet_bits_decoded_instruction_3_needs_branch_unit),
    .io_writeEnableA         (io_ROB_packet_bits_valid_bits_3),
    .io_addrB                (back_pointer[5:0]),
    .io_writeEnableB         (commit_valid),
    .io_addrC                (front_index),
    .io_readDataC_valid      (_ROB_entry_banks_3_io_readDataC_valid),
    .io_readDataC_is_branch  (io_ROB_3_is_branch)
  );
  ROB_mem_4 ROB_busy_banks_0 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (1'h0),
    .io_writeEnableA (io_ROB_packet_bits_valid_bits_0),
    .io_addrB
      (_GEN_2
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_1
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_0
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_3),
    .io_writeEnableB (_GEN_3),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_0_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_1 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (1'h0),
    .io_writeEnableA (io_ROB_packet_bits_valid_bits_1),
    .io_addrB
      (_GEN_7
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_6
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_5
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_4 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_8),
    .io_writeEnableB (_GEN_8),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_1_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_2 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (1'h0),
    .io_writeEnableA (io_ROB_packet_bits_valid_bits_2),
    .io_addrB
      (_GEN_12
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_11
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_10
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_9 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_13),
    .io_writeEnableB (_GEN_13),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_2_io_readDataC)
  );
  ROB_mem_4 ROB_busy_banks_3 (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (1'h0),
    .io_writeEnableA (io_ROB_packet_bits_valid_bits_3),
    .io_addrB
      (_GEN_17
         ? io_FU_outputs_3_bits_ROB_index
         : _GEN_16
             ? io_FU_outputs_2_bits_ROB_index
             : _GEN_15
                 ? io_FU_outputs_1_bits_ROB_index
                 : _GEN_14 ? io_FU_outputs_0_bits_ROB_index : 6'h0),
    .io_writeDataB   (_GEN_18),
    .io_writeEnableB (_GEN_18),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_busy_banks_3_io_readDataC)
  );
  ROB_mem_4 ROB_valid_bank (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (1'h1),
    .io_writeEnableA (io_ROB_packet_valid),
    .io_addrB        (front_index),
    .io_writeDataB   (1'h0),
    .io_writeEnableB (commit_valid),
    .io_addrC        (front_index),
    .io_readDataC    (_ROB_valid_bank_io_readDataC)
  );
  PC_file_mem PC_file (
    .clock           (clock),
    .io_addrA        (back_pointer[5:0]),
    .io_writeDataA   (io_ROB_packet_bits_fetch_PC),
    .io_writeEnableA (io_ROB_packet_valid),
    .io_addrB        (front_index),
    .io_writeEnableB (commit_valid),
    .io_addrC        (io_PC_file_exec_addr),
    .io_readDataC    (_PC_file_io_readDataC),
    .io_addrD        (front_index),
    .io_readDataD    (_PC_file_io_readDataD)
  );
  assign io_ROB_packet_ready =
    ~(front_index == back_pointer[5:0] & front_pointer != back_pointer);
  assign io_ROB_0_valid = _ROB_entry_banks_0_io_readDataC_valid & commit_valid;
  assign io_ROB_1_valid = _ROB_entry_banks_1_io_readDataC_valid & commit_valid;
  assign io_ROB_2_valid = _ROB_entry_banks_2_io_readDataC_valid & commit_valid;
  assign io_ROB_3_valid = _ROB_entry_banks_3_io_readDataC_valid & commit_valid;
  assign io_PC_file_exec_data = _PC_file_io_readDataC[5:0];
  assign io_PC_file_commit_data = _PC_file_io_readDataD[5:0];
endmodule

