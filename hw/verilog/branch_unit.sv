// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module branch_unit(
  input         clock,
                io_flush,
                io_FU_input_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_PRD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [20:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [1:0]  io_FU_input_bits_decoded_instruction_packet_index,
  input  [5:0]  io_FU_input_bits_decoded_instruction_ROB_index,
  input  [3:0]  io_FU_input_bits_decoded_instruction_MOB_index,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
                io_FU_input_bits_fetch_PC,
  output        io_FU_output_valid,
  output [6:0]  io_FU_output_bits_PRD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid,
  output [31:0] io_FU_output_bits_fetch_PC,
  output        io_FU_output_bits_branch_taken,
  output [31:0] io_FU_output_bits_target_address,
  output        io_FU_output_bits_branch_valid,
  output [3:0]  io_FU_output_bits_MOB_index,
  output [5:0]  io_FU_output_bits_ROB_index,
  output [1:0]  io_FU_output_bits_fetch_packet_index
);

  reg [31:0] io_FU_output_bits_fetch_PC_REG;
  reg [1:0]  io_FU_output_bits_fetch_packet_index_REG;
  reg        io_FU_output_bits_branch_valid_REG;
  reg        io_FU_output_bits_branch_taken_REG;
  reg [31:0] io_FU_output_bits_target_address_REG;
  reg [6:0]  io_FU_output_bits_PRD_REG;
  reg        io_FU_output_bits_RD_valid_REG;
  reg [31:0] io_FU_output_bits_RD_data_REG;
  reg [5:0]  io_FU_output_bits_ROB_index_REG;
  reg [3:0]  io_FU_output_bits_MOB_index_REG;
  reg        io_FU_output_valid_REG;
  always @(posedge clock) begin
    automatic logic [31:0] _instruction_PC_T_1 =
      io_FU_input_bits_fetch_PC
      + {28'h0, io_FU_input_bits_decoded_instruction_packet_index, 2'h0};
    automatic logic        BRANCH =
      io_FU_input_bits_decoded_instruction_instructionType == 5'h18;
    automatic logic        EQ =
      io_FU_input_bits_RS1_data == io_FU_input_bits_RS2_data & BRANCH
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
    automatic logic        NE =
      io_FU_input_bits_RS1_data != io_FU_input_bits_RS2_data & BRANCH
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
    automatic logic        LT =
      $signed(io_FU_input_bits_RS1_data) < $signed(io_FU_input_bits_RS2_data) & BRANCH
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h4;
    automatic logic        GE =
      $signed(io_FU_input_bits_RS1_data) >= $signed(io_FU_input_bits_RS2_data) & BRANCH
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5;
    automatic logic        LTU =
      io_FU_input_bits_RS1_data < io_FU_input_bits_RS2_data & BRANCH
      & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h6;
    automatic logic        GEU =
      io_FU_input_bits_RS1_data >= io_FU_input_bits_RS2_data & BRANCH
      & (&io_FU_input_bits_decoded_instruction_FUNCT3);
    automatic logic        JAL =
      io_FU_input_bits_decoded_instruction_instructionType == 5'h1B;
    automatic logic        JALR =
      io_FU_input_bits_decoded_instruction_instructionType == 5'h19;
    automatic logic [31:0] _io_FU_output_bits_RD_data_T = _instruction_PC_T_1 + 32'h4;
    automatic logic [31:0] _GEN =
      {{19{io_FU_input_bits_decoded_instruction_IMM[12]}},
       io_FU_input_bits_decoded_instruction_IMM[12:0]};
    automatic logic        _io_FU_output_valid_T = BRANCH | JAL;
    io_FU_output_bits_fetch_PC_REG <= io_FU_input_bits_fetch_PC;
    io_FU_output_bits_fetch_packet_index_REG <=
      io_FU_input_bits_decoded_instruction_packet_index;
    io_FU_output_bits_branch_valid_REG <= _io_FU_output_valid_T | JALR;
    io_FU_output_bits_branch_taken_REG <= EQ | NE | LT | GE | LTU | GEU | JAL | JALR;
    io_FU_output_bits_target_address_REG <=
      EQ
        ? _instruction_PC_T_1 + _GEN
        : NE
            ? _instruction_PC_T_1 + _GEN
            : LT
                ? _instruction_PC_T_1 + _GEN
                : GE
                    ? _instruction_PC_T_1 + _GEN
                    : LTU
                        ? _instruction_PC_T_1 + _GEN
                        : GEU
                            ? _instruction_PC_T_1 + _GEN
                            : JAL
                                ? _instruction_PC_T_1
                                  + {{11{io_FU_input_bits_decoded_instruction_IMM[20]}},
                                     io_FU_input_bits_decoded_instruction_IMM}
                                : JALR
                                    ? io_FU_input_bits_RS1_data
                                      + {{20{io_FU_input_bits_decoded_instruction_IMM[11]}},
                                         io_FU_input_bits_decoded_instruction_IMM[11:0]}
                                    : _io_FU_output_bits_RD_data_T;
    io_FU_output_bits_PRD_REG <= io_FU_input_bits_decoded_instruction_PRD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits_decoded_instruction_RD_valid;
    io_FU_output_bits_RD_data_REG <= _io_FU_output_bits_RD_data_T;
    io_FU_output_bits_ROB_index_REG <= io_FU_input_bits_decoded_instruction_ROB_index;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits_decoded_instruction_MOB_index;
    io_FU_output_valid_REG <=
      io_FU_input_valid & (_io_FU_output_valid_T | JALR) & ~io_flush;
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_PRD = io_FU_output_bits_PRD_REG;
  assign io_FU_output_bits_RD_data = io_FU_output_bits_RD_data_REG;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
  assign io_FU_output_bits_fetch_PC = io_FU_output_bits_fetch_PC_REG;
  assign io_FU_output_bits_branch_taken = io_FU_output_bits_branch_taken_REG;
  assign io_FU_output_bits_target_address = io_FU_output_bits_target_address_REG;
  assign io_FU_output_bits_branch_valid = io_FU_output_bits_branch_valid_REG;
  assign io_FU_output_bits_MOB_index = io_FU_output_bits_MOB_index_REG;
  assign io_FU_output_bits_ROB_index = io_FU_output_bits_ROB_index_REG;
  assign io_FU_output_bits_fetch_packet_index = io_FU_output_bits_fetch_packet_index_REG;
endmodule

