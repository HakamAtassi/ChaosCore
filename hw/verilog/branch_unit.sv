// Generated by CIRCT firtool-1.76.0
module branch_unit(
  inputclock,
io_flush,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   io_FU_input_valid,
  input  struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; } io_FU_input_bits,
  output struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }                                                                                                                                                                                                                                            io_FU_output
);

  reg  [31:0] io_FU_output_bits_fetch_PC_REG;
  reg  [1:0]  io_FU_output_bits_fetch_packet_index_REG;
  reg         io_FU_output_bits_branch_valid_REG;
  reg         io_FU_output_bits_branch_taken_REG;
  reg  [31:0] io_FU_output_bits_target_address_REG;
  reg  [6:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg  [31:0] io_FU_output_bits_RD_data_REG;
  reg  [5:0]  io_FU_output_bits_ROB_index_REG;
  reg  [3:0]  io_FU_output_bits_FTQ_index_REG;
  reg  [3:0]  io_FU_output_bits_MOB_index_REG;
  reg         io_FU_output_valid_REG;
  wire
    struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; }
    _GEN =
    '{RD: io_FU_output_bits_RD_REG,
      RD_data: io_FU_output_bits_RD_data_REG,
      RD_valid: io_FU_output_bits_RD_valid_REG,
      fetch_PC: io_FU_output_bits_fetch_PC_REG,
      branch_taken: io_FU_output_bits_branch_taken_REG,
      target_address: io_FU_output_bits_target_address_REG,
      branch_valid: io_FU_output_bits_branch_valid_REG,
      address: (32'h0),
      memory_type: (2'h0),
      access_width: (2'h0),
      is_unsigned: (1'h0),
      wr_data: (32'h0),
      MOB_index: io_FU_output_bits_MOB_index_REG,
      ROB_index: io_FU_output_bits_ROB_index_REG,
      FTQ_index: io_FU_output_bits_FTQ_index_REG,
      fetch_packet_index: io_FU_output_bits_fetch_packet_index_REG,
      exception: (1'h0)};
  always @(posedge clock) begin
    automatic logic [31:0] _instruction_PC_T_1 =
      io_FU_input_bits.fetch_PC
      + {28'h0, io_FU_input_bits.decoded_instruction.packet_index, 2'h0};
    automatic logic        BRANCH =
      io_FU_input_bits.decoded_instruction.instructionType == 5'h18;
    automatic logic        EQ =
      io_FU_input_bits.RS1_data == io_FU_input_bits.RS2_data & BRANCH
      & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h0;
    automatic logic        NE =
      io_FU_input_bits.RS1_data != io_FU_input_bits.RS2_data & BRANCH
      & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h1;
    automatic logic        LT =
      $signed(io_FU_input_bits.RS1_data) < $signed(io_FU_input_bits.RS2_data) & BRANCH
      & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h4;
    automatic logic        GE =
      $signed(io_FU_input_bits.RS1_data) >= $signed(io_FU_input_bits.RS2_data) & BRANCH
      & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h5;
    automatic logic        LTU =
      io_FU_input_bits.RS1_data < io_FU_input_bits.RS2_data & BRANCH
      & io_FU_input_bits.decoded_instruction.FUNCT3 == 3'h6;
    automatic logic        GEU =
      io_FU_input_bits.RS1_data >= io_FU_input_bits.RS2_data & BRANCH
      & (&io_FU_input_bits.decoded_instruction.FUNCT3);
    automatic logic        JAL =
      io_FU_input_bits.decoded_instruction.instructionType == 5'h1B;
    automatic logic        JALR =
      io_FU_input_bits.decoded_instruction.instructionType == 5'h19;
    automatic logic [31:0] _GEN_0 =
      {{19{io_FU_input_bits.decoded_instruction.IMM[12]}},
       io_FU_input_bits.decoded_instruction.IMM[12:0]};
    io_FU_output_bits_fetch_PC_REG <= io_FU_input_bits.fetch_PC;
    io_FU_output_bits_fetch_packet_index_REG <=
      io_FU_input_bits.decoded_instruction.packet_index;
    io_FU_output_bits_branch_valid_REG <= BRANCH | JAL | JALR;
    io_FU_output_bits_branch_taken_REG <= EQ | NE | LT | GE | LTU | GEU | JAL | JALR;
    io_FU_output_bits_target_address_REG <=
      EQ
        ? _instruction_PC_T_1 + _GEN_0
        : NE
            ? _instruction_PC_T_1 + _GEN_0
            : LT
                ? _instruction_PC_T_1 + _GEN_0
                : GE
                    ? _instruction_PC_T_1 + _GEN_0
                    : LTU
                        ? _instruction_PC_T_1 + _GEN_0
                        : GEU
                            ? _instruction_PC_T_1 + _GEN_0
                            : JAL
                                ? _instruction_PC_T_1
                                  + {{11{io_FU_input_bits.decoded_instruction.IMM[20]}},
                                     io_FU_input_bits.decoded_instruction.IMM}
                                : JALR
                                    ? io_FU_input_bits.RS1_data
                                      + {{20{io_FU_input_bits.decoded_instruction.IMM[11]}},
                                         io_FU_input_bits.decoded_instruction.IMM[11:0]}
                                    : io_FU_input_bits.fetch_PC + 32'h10;
    io_FU_output_bits_RD_REG <= io_FU_input_bits.decoded_instruction.RD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits.decoded_instruction.RD_valid;
    io_FU_output_bits_RD_data_REG <= _instruction_PC_T_1 + 32'h4;
    io_FU_output_bits_ROB_index_REG <= io_FU_input_bits.decoded_instruction.ROB_index;
    io_FU_output_bits_FTQ_index_REG <= io_FU_input_bits.decoded_instruction.FTQ_index;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits.decoded_instruction.MOB_index;
    io_FU_output_valid_REG <= io_FU_input_valid & ~io_flush;
  end // always @(posedge)
  assign io_FU_output = '{valid: io_FU_output_valid_REG, bits: _GEN};
endmodule

