// Generated by CIRCT firtool-1.62.0
// VCS coverage exclude_file
module mem_1024x32(
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [9:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  input  [9:0]  W1_addr,
  input         W1_en,
                W1_clk,
  input  [31:0] W1_data
);

  reg [31:0] Memory[0:1023];
  reg        _R0_en_d0;
  reg [9:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [9:0]  _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
    if (W1_en & 1'h1)
      Memory[W1_addr] <= W1_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 32'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 32'bx;
endmodule

module TrueDualPortMemory(
  input         clock,
                reset,
  input  [9:0]  io_addrA,
  input  [31:0] io_writeDataA,
  input         io_writeEnableA,
  output [31:0] io_readDataA,
  input  [9:0]  io_addrB,
  input  [31:0] io_writeDataB,
  input         io_writeEnableB,
  output [31:0] io_readDataB
);

  mem_1024x32 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (io_writeEnableB),
    .R0_clk  (clock),
    .R0_data (io_readDataB),
    .R1_addr (io_addrA),
    .R1_en   (io_writeEnableA),
    .R1_clk  (clock),
    .R1_data (io_readDataA),
    .W0_addr (io_addrB),
    .W0_en   (io_writeEnableB),
    .W0_clk  (clock),
    .W0_data (io_writeDataB),
    .W1_addr (io_addrA),
    .W1_en   (io_writeEnableA),
    .W1_clk  (clock),
    .W1_data (io_writeDataA)
  );
endmodule

