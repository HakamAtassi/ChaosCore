// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module decoder(
  input         clock,
                reset,
                io_instruction_valid,
  input  [31:0] io_instruction_bits_instruction,
  input  [3:0]  io_instruction_bits_packet_index,
  output [4:0]  io_decoded_instruction_bits_RD,
  output        io_decoded_instruction_bits_RD_valid,
  output [6:0]  io_decoded_instruction_bits_RS1,
  output        io_decoded_instruction_bits_RS1_valid,
  output [6:0]  io_decoded_instruction_bits_RS2,
  output        io_decoded_instruction_bits_RS2_valid,
  output [20:0] io_decoded_instruction_bits_IMM,
  output [2:0]  io_decoded_instruction_bits_FUNCT3,
  output [1:0]  io_decoded_instruction_bits_packet_index,
  output [4:0]  io_decoded_instruction_bits_instructionType,
  output [1:0]  io_decoded_instruction_bits_portID,
                io_decoded_instruction_bits_RS_type,
  output        io_decoded_instruction_bits_needs_ALU,
                io_decoded_instruction_bits_needs_branch_unit,
                io_decoded_instruction_bits_needs_CSRs,
                io_decoded_instruction_bits_needs_memory,
                io_decoded_instruction_bits_SUBTRACT,
                io_decoded_instruction_bits_MULTIPLY,
                io_decoded_instruction_bits_FENCE,
                io_decoded_instruction_bits_IS_IMM,
                io_decoded_instruction_bits_mem_signed,
  output [1:0]  io_decoded_instruction_bits_memory_type,
                io_decoded_instruction_bits_access_width
);

  wire [8:0] _GEN = {9{io_instruction_bits_instruction[31]}};
  wire [4:0] instructionType = io_instruction_bits_instruction[6:2];
  wire       _is_MEM_T = instructionType == 5'h0;
  wire       _FENCE_T = instructionType == 5'h3;
  wire       _is_INT_T_3 = instructionType == 5'h4;
  wire       _is_INT_T_13 = instructionType == 5'h5;
  wire       _is_MEM_T_1 = instructionType == 5'h8;
  wire       _is_INT_T_1 = instructionType == 5'hC;
  wire       _is_INT_T_11 = instructionType == 5'hD;
  wire       _is_INT_T_5 = instructionType == 5'h18;
  wire       _is_INT_T_9 = instructionType == 5'h19;
  wire       _is_INT_T_7 = instructionType == 5'h1B;
  wire       _is_INT_T = instructionType == 5'h1C;
  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(_is_MEM_T | instructionType == 5'h1 | instructionType == 5'h2 | _FENCE_T
              | _is_INT_T_3 | _is_INT_T_13 | instructionType == 5'h6 | _is_MEM_T_1
              | instructionType == 5'h9 | instructionType == 5'hA
              | instructionType == 5'hB | _is_INT_T_1 | _is_INT_T_11
              | instructionType == 5'hE | instructionType == 5'h10
              | instructionType == 5'h11 | instructionType == 5'h12
              | instructionType == 5'h13 | instructionType == 5'h14
              | instructionType == 5'h16 | _is_INT_T_5 | _is_INT_T_9 | _is_INT_T_7
              | _is_INT_T | instructionType == 5'h1E)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Enum state must be valid, got %d!\n    at decoder.scala:66 assert(valid, \"Enum state must be valid, got %%%%d!\", opcode(6,2))\n",
                 instructionType);
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  wire       _needs_ALU_T_1 = io_instruction_bits_instruction[31:25] == 7'h20;
  wire       needs_branch_unit = _is_INT_T_5 | _is_INT_T_7 | _is_INT_T_9 | _is_INT_T_13;
  wire       _needs_CSRs_T_1 = io_instruction_bits_instruction[14:12] == 3'h1;
  wire       _needs_CSRs_T_2 = io_instruction_bits_instruction[14:12] == 3'h2;
  wire       _needs_CSRs_T_6 = io_instruction_bits_instruction[14:12] == 3'h5;
  wire       needs_CSRs =
    _is_INT_T
    & (_needs_CSRs_T_1 | _needs_CSRs_T_2 | io_instruction_bits_instruction[14:12] == 3'h3
       | _needs_CSRs_T_6 | io_instruction_bits_instruction[14:12] == 3'h6
       | (&(io_instruction_bits_instruction[14:12])));
  wire       needs_ALU =
    _is_INT_T_1 & (_needs_ALU_T_1 | io_instruction_bits_instruction[31:25] == 7'h0)
    | _is_INT_T_3 | _is_INT_T_11;
  wire       _FENCE_T_1 = io_instruction_bits_instruction[14:12] == 3'h0;
  reg  [1:0] next_ALU_port_0;
  reg  [1:0] next_ALU_port_1;
  reg  [1:0] next_ALU_port_2;
  always @(posedge clock) begin
    if (reset) begin
      next_ALU_port_0 <= 2'h0;
      next_ALU_port_1 <= 2'h1;
      next_ALU_port_2 <= 2'h2;
    end
    else if (needs_ALU) begin
      next_ALU_port_0 <= next_ALU_port_1;
      next_ALU_port_1 <= next_ALU_port_2;
      next_ALU_port_2 <= next_ALU_port_0;
    end
  end // always @(posedge)
  assign io_decoded_instruction_bits_RD = io_instruction_bits_instruction[11:7];
  assign io_decoded_instruction_bits_RD_valid =
    (_is_INT_T_1 | _is_INT_T_3 | _is_MEM_T | _is_INT_T_7 | _is_INT_T_9 | _is_INT_T_11
     | _is_INT_T_13 | _is_INT_T) & io_instruction_valid;
  assign io_decoded_instruction_bits_RS1 = {2'h0, io_instruction_bits_instruction[19:15]};
  assign io_decoded_instruction_bits_RS1_valid =
    (_is_INT_T_1 | _is_INT_T_3 | _is_MEM_T | _is_MEM_T_1 | _is_INT_T_9 | _is_INT_T_5)
    & io_instruction_valid;
  assign io_decoded_instruction_bits_RS2 = {2'h0, io_instruction_bits_instruction[24:20]};
  assign io_decoded_instruction_bits_RS2_valid =
    (_is_INT_T_1 | _is_MEM_T_1 | _is_INT_T_5) & io_instruction_valid;
  assign io_decoded_instruction_bits_IMM =
    io_instruction_bits_instruction[6:0] == 7'h63
      ? {{9{io_instruction_bits_instruction[31]}},
         io_instruction_bits_instruction[7],
         io_instruction_bits_instruction[30:25],
         io_instruction_bits_instruction[11:8],
         1'h0}
      : io_instruction_bits_instruction[6:0] == 7'h6F
          ? {io_instruction_bits_instruction[31],
             io_instruction_bits_instruction[19:12],
             io_instruction_bits_instruction[20],
             io_instruction_bits_instruction[30:21],
             1'h0}
          : io_instruction_bits_instruction[6:0] == 7'h13
            | io_instruction_bits_instruction[6:0] == 7'h3
            | io_instruction_bits_instruction[6:0] == 7'h67
            | io_instruction_bits_instruction[6:0] == 7'h73
              ? {_GEN, io_instruction_bits_instruction[31:20]}
              : io_instruction_bits_instruction[6:0] == 7'h23
                  ? {_GEN,
                     io_instruction_bits_instruction[31:25],
                     io_instruction_bits_instruction[11:7]}
                  : io_instruction_bits_instruction[6:0] == 7'h17
                    | io_instruction_bits_instruction[6:0] == 7'h37
                      ? {io_instruction_bits_instruction[31],
                         io_instruction_bits_instruction[31:12]}
                      : 21'h0;
  assign io_decoded_instruction_bits_FUNCT3 = io_instruction_bits_instruction[14:12];
  assign io_decoded_instruction_bits_packet_index = io_instruction_bits_packet_index[1:0];
  assign io_decoded_instruction_bits_instructionType = instructionType;
  assign io_decoded_instruction_bits_portID =
    needs_ALU
      ? next_ALU_port_0
      : needs_branch_unit
          ? 2'h0
          : {1'h0,
             needs_CSRs | _is_INT_T_1 & io_instruction_bits_instruction[25] | _is_INT_T_1
               & io_instruction_bits_instruction[25]};
  assign io_decoded_instruction_bits_RS_type =
    _is_INT_T | _is_INT_T_1 | _is_INT_T_3 | _is_INT_T_5 | _is_INT_T_7 | _is_INT_T_9
    | _is_INT_T_11 | _is_INT_T_13
      ? 2'h0
      : _is_MEM_T | _is_MEM_T_1 ? 2'h1 : 2'h2;
  assign io_decoded_instruction_bits_needs_ALU = needs_ALU;
  assign io_decoded_instruction_bits_needs_branch_unit = needs_branch_unit;
  assign io_decoded_instruction_bits_needs_CSRs = needs_CSRs;
  assign io_decoded_instruction_bits_needs_memory = _is_MEM_T_1 | _is_MEM_T;
  assign io_decoded_instruction_bits_SUBTRACT =
    (_is_INT_T_1 | _is_INT_T_3) & _needs_ALU_T_1;
  assign io_decoded_instruction_bits_MULTIPLY =
    _is_INT_T_1 & io_instruction_bits_instruction[31:25] == 7'h1;
  assign io_decoded_instruction_bits_FENCE = _FENCE_T & _FENCE_T_1;
  assign io_decoded_instruction_bits_IS_IMM =
    _is_INT_T_3 | _is_INT_T_11 | _is_INT_T_13 | _is_MEM_T_1 | _is_MEM_T | _is_INT_T_5
    | _is_INT_T_7 | _is_INT_T_9 | _is_INT_T;
  assign io_decoded_instruction_bits_mem_signed =
    _FENCE_T_1 | _needs_CSRs_T_1 | _needs_CSRs_T_2;
  assign io_decoded_instruction_bits_memory_type = _is_MEM_T ? 2'h1 : {_is_MEM_T_1, 1'h0};
  assign io_decoded_instruction_bits_access_width =
    _FENCE_T_1
      ? 2'h1
      : _needs_CSRs_T_1
          ? 2'h2
          : _needs_CSRs_T_2
              ? 2'h3
              : io_instruction_bits_instruction[14:12] == 3'h4
                  ? 2'h1
                  : {_needs_CSRs_T_6, 1'h0};
endmodule

