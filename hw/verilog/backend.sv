// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module backend(
  inputclock,
reset,
io_flush,
  outputio_backend_memory_response_ready,
  inputio_backend_memory_response_valid,
  input  struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }io_backend_memory_response_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     io_backend_memory_request_ready,
  outputio_backend_memory_request_valid,
  output struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }io_backend_memory_request_bits,
  input  struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; }                                                                                                                                                                                                                                                                                                                                                                io_commit,
  outputio_PC_file_exec_addr,
  input  [31:0]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             io_PC_file_exec_data,
io_fetch_PC,
  inputio_backend_packet_valid,
  input  struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; } io_backend_packet_bits,
  outputio_MEMRS_ready,
io_INTRS_ready,
io_MOB_ready,
  output struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }[3:0]                                                                                                                                                                                                                                                                                                                io_FU_outputs
);

  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }
    _AGU_io_FU_output;
  wire        _FU2_io_FU_input_ready;
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }
    _FU2_io_FU_output;
  wire        _FU1_io_FU_input_ready;
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }
    _FU1_io_FU_output;
  wire        _FU0_io_FU_input_ready;
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }
    _FU0_io_FU_output;
  wire [31:0] _INT_PRF_io_rdata_0;
  wire [31:0] _INT_PRF_io_rdata_1;
  wire [31:0] _INT_PRF_io_rdata_2;
  wire [31:0] _INT_PRF_io_rdata_3;
  wire [31:0] _INT_PRF_io_rdata_4;
  wire [31:0] _INT_PRF_io_rdata_5;
  wire [31:0] _INT_PRF_io_rdata_6;
  wire [31:0] _INT_PRF_io_rdata_7;
  wire        _MOB_io_reserve_0_ready;
  wire        _MOB_io_reserve_1_ready;
  wire        _MOB_io_reserve_2_ready;
  wire        _MOB_io_reserve_3_ready;
  wire struct packed {logic valid; logic [3:0] bits; }[3:0] _MOB_io_reserved_pointers;
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }
    _MOB_io_MOB_output;
  wire        _MEM_RS_io_backend_packet_0_ready;
  wire        _MEM_RS_io_backend_packet_1_ready;
  wire        _MEM_RS_io_backend_packet_2_ready;
  wire        _MEM_RS_io_backend_packet_3_ready;
  wire        _MEM_RS_io_RF_inputs_3_valid;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _MEM_RS_io_RF_inputs_3_bits;
  wire        _INT_RS_io_backend_packet_0_ready;
  wire        _INT_RS_io_backend_packet_1_ready;
  wire        _INT_RS_io_backend_packet_2_ready;
  wire        _INT_RS_io_backend_packet_3_ready;
  wire        _INT_RS_io_RF_inputs_0_valid;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _INT_RS_io_RF_inputs_0_bits;
  wire        _INT_RS_io_RF_inputs_1_valid;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _INT_RS_io_RF_inputs_1_bits;
  wire        _INT_RS_io_RF_inputs_2_valid;
  wire
    struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    _INT_RS_io_RF_inputs_2_bits;
  wire        _MOB_io_reserve_0_valid_T =
    io_backend_packet_bits.decoded_instruction[2'h0].RS_type == 2'h1;
  wire        _MOB_io_reserve_1_valid_T =
    io_backend_packet_bits.decoded_instruction[2'h1].RS_type == 2'h1;
  wire        _MOB_io_reserve_2_valid_T =
    io_backend_packet_bits.decoded_instruction[2'h2].RS_type == 2'h1;
  wire        _MOB_io_reserve_3_valid_T =
    io_backend_packet_bits.decoded_instruction[2'h3].RS_type == 2'h1;
  struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    read_decoded_instructions_0_decoded_instruction_REG;
  struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    read_decoded_instructions_1_decoded_instruction_REG;
  struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    read_decoded_instructions_2_decoded_instruction_REG;
  struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }
    read_decoded_instructions_3_decoded_instruction_REG;
  reg         FU0_io_FU_input_valid_REG;
  reg         FU1_io_FU_input_valid_REG;
  reg         FU2_io_FU_input_valid_REG;
  reg         AGU_io_FU_input_valid_REG;
  wire [3:0]  _GEN =
    {{_MEM_RS_io_backend_packet_3_ready},
     {_MEM_RS_io_backend_packet_2_ready},
     {_MEM_RS_io_backend_packet_1_ready},
     {_MEM_RS_io_backend_packet_0_ready}}
    & {{_MOB_io_reserve_3_ready},
       {_MOB_io_reserve_2_ready},
       {_MOB_io_reserve_1_ready},
       {_MOB_io_reserve_0_ready}};
  wire
    struct packed {logic valid; struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } bits; }[3:0]
    _GEN_0 =
    {{_MOB_io_MOB_output}, {_FU2_io_FU_output}, {_FU1_io_FU_output}, {_FU0_io_FU_output}};
  wire
    struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; }
    _GEN_1 =
    '{decoded_instruction: read_decoded_instructions_3_decoded_instruction_REG,
      RS1_data: _INT_PRF_io_rdata_6,
      RS2_data: _INT_PRF_io_rdata_7,
      fetch_PC: (32'h0)};
  wire
    struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; }
    _GEN_2 =
    '{decoded_instruction: read_decoded_instructions_2_decoded_instruction_REG,
      RS1_data: _INT_PRF_io_rdata_4,
      RS2_data: _INT_PRF_io_rdata_5,
      fetch_PC: (32'h0)};
  wire
    struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; }
    _GEN_3 =
    '{decoded_instruction: read_decoded_instructions_1_decoded_instruction_REG,
      RS1_data: _INT_PRF_io_rdata_2,
      RS2_data: _INT_PRF_io_rdata_3,
      fetch_PC: (32'h0)};
  wire
    struct packed {struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; } decoded_instruction; logic [31:0] RS1_data; logic [31:0] RS2_data; logic [31:0] fetch_PC; }
    _GEN_4 =
    '{decoded_instruction: read_decoded_instructions_0_decoded_instruction_REG,
      RS1_data: _INT_PRF_io_rdata_0,
      RS2_data: _INT_PRF_io_rdata_1,
      fetch_PC: io_PC_file_exec_data};
  always @(posedge clock) begin
    read_decoded_instructions_0_decoded_instruction_REG <= _INT_RS_io_RF_inputs_0_bits;
    read_decoded_instructions_1_decoded_instruction_REG <= _INT_RS_io_RF_inputs_1_bits;
    read_decoded_instructions_2_decoded_instruction_REG <= _INT_RS_io_RF_inputs_2_bits;
    read_decoded_instructions_3_decoded_instruction_REG <= _MEM_RS_io_RF_inputs_3_bits;
    FU0_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_0_valid;
    FU1_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_1_valid;
    FU2_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_2_valid;
    AGU_io_FU_input_valid_REG <= _MEM_RS_io_RF_inputs_3_valid;
  end // always @(posedge)
  RS INT_RS (
    .clock                     (clock),
    .reset                     (reset),
    .io_flush                  (io_flush),
    .io_backend_packet_0_ready (_INT_RS_io_backend_packet_0_ready),
    .io_backend_packet_0_valid
      (io_backend_packet_bits.decoded_instruction[2'h0].RS_type == 2'h0
       & io_backend_packet_bits.valid_bits[2'h0] & io_backend_packet_valid),
    .io_backend_packet_0_bits  (io_backend_packet_bits.decoded_instruction[2'h0]),
    .io_backend_packet_1_ready (_INT_RS_io_backend_packet_1_ready),
    .io_backend_packet_1_valid
      (io_backend_packet_bits.decoded_instruction[2'h1].RS_type == 2'h0
       & io_backend_packet_bits.valid_bits[2'h1] & io_backend_packet_valid),
    .io_backend_packet_1_bits  (io_backend_packet_bits.decoded_instruction[2'h1]),
    .io_backend_packet_2_ready (_INT_RS_io_backend_packet_2_ready),
    .io_backend_packet_2_valid
      (io_backend_packet_bits.decoded_instruction[2'h2].RS_type == 2'h0
       & io_backend_packet_bits.valid_bits[2'h2] & io_backend_packet_valid),
    .io_backend_packet_2_bits  (io_backend_packet_bits.decoded_instruction[2'h2]),
    .io_backend_packet_3_ready (_INT_RS_io_backend_packet_3_ready),
    .io_backend_packet_3_valid
      (io_backend_packet_bits.decoded_instruction[2'h3].RS_type == 2'h0
       & io_backend_packet_bits.valid_bits[2'h3] & io_backend_packet_valid),
    .io_backend_packet_3_bits  (io_backend_packet_bits.decoded_instruction[2'h3]),
    .io_FU_outputs             (_GEN_0),
    .io_commit                 (io_commit),
    .io_RF_inputs_0_ready      (_FU0_io_FU_input_ready),
    .io_RF_inputs_0_valid      (_INT_RS_io_RF_inputs_0_valid),
    .io_RF_inputs_0_bits       (_INT_RS_io_RF_inputs_0_bits),
    .io_RF_inputs_1_ready      (_FU1_io_FU_input_ready),
    .io_RF_inputs_1_valid      (_INT_RS_io_RF_inputs_1_valid),
    .io_RF_inputs_1_bits       (_INT_RS_io_RF_inputs_1_bits),
    .io_RF_inputs_2_ready      (_FU2_io_FU_input_ready),
    .io_RF_inputs_2_valid      (_INT_RS_io_RF_inputs_2_valid),
    .io_RF_inputs_2_bits       (_INT_RS_io_RF_inputs_2_bits)
  );
  MEMRS MEM_RS (
    .clock                     (clock),
    .reset                     (reset),
    .io_flush                  (io_flush),
    .io_backend_packet_0_ready (_MEM_RS_io_backend_packet_0_ready),
    .io_backend_packet_0_valid
      (_MOB_io_reserve_0_valid_T & io_backend_packet_bits.valid_bits[2'h0]
       & io_backend_packet_valid),
    .io_backend_packet_0_bits  (io_backend_packet_bits.decoded_instruction[2'h0]),
    .io_backend_packet_1_ready (_MEM_RS_io_backend_packet_1_ready),
    .io_backend_packet_1_valid
      (_MOB_io_reserve_1_valid_T & io_backend_packet_bits.valid_bits[2'h1]
       & io_backend_packet_valid),
    .io_backend_packet_1_bits  (io_backend_packet_bits.decoded_instruction[2'h1]),
    .io_backend_packet_2_ready (_MEM_RS_io_backend_packet_2_ready),
    .io_backend_packet_2_valid
      (_MOB_io_reserve_2_valid_T & io_backend_packet_bits.valid_bits[2'h2]
       & io_backend_packet_valid),
    .io_backend_packet_2_bits  (io_backend_packet_bits.decoded_instruction[2'h2]),
    .io_backend_packet_3_ready (_MEM_RS_io_backend_packet_3_ready),
    .io_backend_packet_3_valid
      (_MOB_io_reserve_3_valid_T & io_backend_packet_bits.valid_bits[2'h3]
       & io_backend_packet_valid),
    .io_backend_packet_3_bits  (io_backend_packet_bits.decoded_instruction[2'h3]),
    .io_fetch_PC               (io_fetch_PC),
    .io_reserved_pointers      (_MOB_io_reserved_pointers),
    .io_FU_outputs             (_GEN_0),
    .io_commit                 (io_commit),
    .io_RF_inputs_0_ready      (_FU0_io_FU_input_ready),
    .io_RF_inputs_0_bits       (/* unused */),
    .io_RF_inputs_1_ready      (_FU1_io_FU_input_ready),
    .io_RF_inputs_1_bits       (/* unused */),
    .io_RF_inputs_2_ready      (_FU2_io_FU_input_ready),
    .io_RF_inputs_2_bits       (/* unused */),
    .io_RF_inputs_3_valid      (_MEM_RS_io_RF_inputs_3_valid),
    .io_RF_inputs_3_bits       (_MEM_RS_io_RF_inputs_3_bits)
  );
  MOB MOB (
    .clock                            (clock),
    .reset                            (reset),
    .io_flush                         (io_flush),
    .io_reserve_0_ready               (_MOB_io_reserve_0_ready),
    .io_reserve_0_valid
      (_MOB_io_reserve_0_valid_T & io_backend_packet_bits.valid_bits[2'h0]
       & io_backend_packet_valid),
    .io_reserve_0_bits                (io_backend_packet_bits.decoded_instruction[2'h0]),
    .io_reserve_1_ready               (_MOB_io_reserve_1_ready),
    .io_reserve_1_valid
      (_MOB_io_reserve_1_valid_T & io_backend_packet_bits.valid_bits[2'h1]
       & io_backend_packet_valid),
    .io_reserve_1_bits                (io_backend_packet_bits.decoded_instruction[2'h1]),
    .io_reserve_2_ready               (_MOB_io_reserve_2_ready),
    .io_reserve_2_valid
      (_MOB_io_reserve_2_valid_T & io_backend_packet_bits.valid_bits[2'h2]
       & io_backend_packet_valid),
    .io_reserve_2_bits                (io_backend_packet_bits.decoded_instruction[2'h2]),
    .io_reserve_3_ready               (_MOB_io_reserve_3_ready),
    .io_reserve_3_valid
      (_MOB_io_reserve_3_valid_T & io_backend_packet_bits.valid_bits[2'h3]
       & io_backend_packet_valid),
    .io_reserve_3_bits                (io_backend_packet_bits.decoded_instruction[2'h3]),
    .io_reserved_pointers             (_MOB_io_reserved_pointers),
    .io_fetch_PC                      (io_fetch_PC),
    .io_AGU_output                    (_AGU_io_FU_output),
    .io_MOB_output                    (_MOB_io_MOB_output),
    .io_commit                        (io_commit),
    .io_backend_memory_request_ready  (io_backend_memory_request_ready),
    .io_backend_memory_request_valid  (io_backend_memory_request_valid),
    .io_backend_memory_request_bits   (io_backend_memory_request_bits),
    .io_backend_memory_response_ready (io_backend_memory_response_ready),
    .io_backend_memory_response_valid (io_backend_memory_response_valid),
    .io_backend_memory_response_bits  (io_backend_memory_response_bits)
  );
  sim_nReadmWrite INT_PRF (
    .clock      (clock),
    .io_raddr_0 (_INT_RS_io_RF_inputs_0_bits.RS1[5:0]),
    .io_raddr_1 (_INT_RS_io_RF_inputs_0_bits.RS2[5:0]),
    .io_raddr_2 (_INT_RS_io_RF_inputs_1_bits.RS1[5:0]),
    .io_raddr_3 (_INT_RS_io_RF_inputs_1_bits.RS2[5:0]),
    .io_raddr_4 (_INT_RS_io_RF_inputs_2_bits.RS1[5:0]),
    .io_raddr_5 (_INT_RS_io_RF_inputs_2_bits.RS2[5:0]),
    .io_raddr_6 (_MEM_RS_io_RF_inputs_3_bits.RS1[5:0]),
    .io_raddr_7 (_MEM_RS_io_RF_inputs_3_bits.RS2[5:0]),
    .io_rdata_0 (_INT_PRF_io_rdata_0),
    .io_rdata_1 (_INT_PRF_io_rdata_1),
    .io_rdata_2 (_INT_PRF_io_rdata_2),
    .io_rdata_3 (_INT_PRF_io_rdata_3),
    .io_rdata_4 (_INT_PRF_io_rdata_4),
    .io_rdata_5 (_INT_PRF_io_rdata_5),
    .io_rdata_6 (_INT_PRF_io_rdata_6),
    .io_rdata_7 (_INT_PRF_io_rdata_7),
    .io_waddr_0 (_FU0_io_FU_output.bits.RD[5:0]),
    .io_waddr_1 (_FU1_io_FU_output.bits.RD[5:0]),
    .io_waddr_2 (_FU2_io_FU_output.bits.RD[5:0]),
    .io_waddr_3 (_MOB_io_MOB_output.bits.RD[5:0]),
    .io_wen_0   (_FU0_io_FU_output.valid & _FU0_io_FU_output.bits.RD_valid),
    .io_wen_1   (_FU1_io_FU_output.valid & _FU1_io_FU_output.bits.RD_valid),
    .io_wen_2   (_FU2_io_FU_output.valid & _FU2_io_FU_output.bits.RD_valid),
    .io_wen_3   (_MOB_io_MOB_output.valid & _MOB_io_MOB_output.bits.RD_valid),
    .io_wdata_0 (_FU0_io_FU_output.bits.RD_data),
    .io_wdata_1 (_FU1_io_FU_output.bits.RD_data),
    .io_wdata_2 (_FU2_io_FU_output.bits.RD_data),
    .io_wdata_3 (_MOB_io_MOB_output.bits.RD_data)
  );
  FU FU0 (
    .clock             (clock),
    .reset             (reset),
    .io_flush          (io_flush),
    .io_FU_input_ready (_FU0_io_FU_input_ready),
    .io_FU_input_valid (FU0_io_FU_input_valid_REG),
    .io_FU_input_bits  (_GEN_4),
    .io_FU_output      (_FU0_io_FU_output)
  );
  FU_1 FU1 (
    .clock             (clock),
    .reset             (reset),
    .io_flush          (io_flush),
    .io_FU_input_ready (_FU1_io_FU_input_ready),
    .io_FU_input_valid (FU1_io_FU_input_valid_REG),
    .io_FU_input_bits  (_GEN_3),
    .io_FU_output      (_FU1_io_FU_output)
  );
  FU_1 FU2 (
    .clock             (clock),
    .reset             (reset),
    .io_flush          (io_flush),
    .io_FU_input_ready (_FU2_io_FU_input_ready),
    .io_FU_input_valid (FU2_io_FU_input_valid_REG),
    .io_FU_input_bits  (_GEN_2),
    .io_FU_output      (_FU2_io_FU_output)
  );
  AGU AGU (
    .clock             (clock),
    .reset             (reset),
    .io_flush          (io_flush),
    .io_FU_input_valid (AGU_io_FU_input_valid_REG),
    .io_FU_input_bits  (_GEN_1),
    .io_FU_output      (_AGU_io_FU_output)
  );
  assign io_PC_file_exec_addr = _INT_RS_io_RF_inputs_0_bits.ROB_index;
  assign io_MEMRS_ready = _GEN;
  assign io_INTRS_ready =
    {{_INT_RS_io_backend_packet_3_ready},
     {_INT_RS_io_backend_packet_2_ready},
     {_INT_RS_io_backend_packet_1_ready},
     {_INT_RS_io_backend_packet_0_ready}};
  assign io_MOB_ready = _GEN;
  assign io_FU_outputs = _GEN_0;
endmodule

