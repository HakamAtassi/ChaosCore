// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module BRU(
  input  struct packed {logic valid; logic [31:0] fetch_PC; logic is_misprediction; logic [31:0] predicted_PC; logic [5:0] ROB_index; logic T_NT; logic [2:0] br_type; logic [1:0] dominant_index; logic [31:0] resolved_PC; }                                                                                                                                                                               io_FTQ,
  input  struct packed {logic row_valid; logic [31:0] fetch_PC; logic [5:0] ROB_index; logic [15:0] GHR; logic [6:0] NEXT; logic [6:0] TOS; logic [7:0] free_list_front_pointer; struct packed {logic valid; logic is_branch; logic [1:0] memory_type; logic [6:0] RD; logic RD_valid; logic [4:0] RDold; }[3:0] ROB_entries; logic [3:0] complete; logic [3:0] exception; }                                 io_ROB_output,
  output struct packed {logic valid; struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; } bits; } io_commit
);

  wire [3:0] commit_row_complete;
  assign commit_row_complete =
    io_ROB_output.complete
    & {{io_ROB_output.ROB_entries[2'h3].valid},
       {io_ROB_output.ROB_entries[2'h2].valid},
       {io_ROB_output.ROB_entries[2'h1].valid},
       {io_ROB_output.ROB_entries[2'h0].valid}}
    | {{~io_ROB_output.ROB_entries[2'h3].valid},
       {~io_ROB_output.ROB_entries[2'h2].valid},
       {~io_ROB_output.ROB_entries[2'h1].valid},
       {~io_ROB_output.ROB_entries[2'h0].valid}};
  wire       commit_valid =
    io_ROB_output.row_valid & commit_row_complete[2'h0] & commit_row_complete[2'h1]
    & commit_row_complete[2'h2] & commit_row_complete[2'h3];
  wire       branch_commit =
    commit_valid & io_ROB_output.fetch_PC == io_FTQ.fetch_PC & io_FTQ.valid;
  wire
    struct packed {logic [31:0] fetch_PC; logic T_NT; logic [5:0] ROB_index; logic [2:0] br_type; logic [1:0] fetch_packet_index; logic is_misprediction; logic exception; logic [31:0] expected_PC; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; logic [3:0][4:0] RDold; logic [3:0][6:0] RD; logic [3:0] RD_valid; }
    _GEN =
    '{fetch_PC: io_ROB_output.fetch_PC,
      T_NT: (branch_commit & io_FTQ.T_NT),
      ROB_index: io_ROB_output.ROB_index,
      br_type: (branch_commit ? io_FTQ.br_type : 3'h0),
      fetch_packet_index: (branch_commit ? io_FTQ.dominant_index : 2'h0),
      is_misprediction: (branch_commit & io_FTQ.predicted_PC != io_FTQ.resolved_PC),
      exception:
        (io_ROB_output.exception[2'h0] | io_ROB_output.exception[2'h1]
         | io_ROB_output.exception[2'h2] | io_ROB_output.exception[2'h3]),
      expected_PC: (branch_commit ? io_FTQ.resolved_PC : 32'h0),
      GHR: io_ROB_output.GHR,
      TOS: io_ROB_output.TOS,
      NEXT: io_ROB_output.NEXT,
      free_list_front_pointer: io_ROB_output.free_list_front_pointer,
      RDold:
        ({{io_ROB_output.ROB_entries[2'h3].RDold},
          {io_ROB_output.ROB_entries[2'h2].RDold},
          {io_ROB_output.ROB_entries[2'h1].RDold},
          {io_ROB_output.ROB_entries[2'h0].RDold}}),
      RD:
        ({{io_ROB_output.ROB_entries[2'h3].RD},
          {io_ROB_output.ROB_entries[2'h2].RD},
          {io_ROB_output.ROB_entries[2'h1].RD},
          {io_ROB_output.ROB_entries[2'h0].RD}}),
      RD_valid:
        ({{io_ROB_output.ROB_entries[2'h3].RD_valid},
          {io_ROB_output.ROB_entries[2'h2].RD_valid},
          {io_ROB_output.ROB_entries[2'h1].RD_valid},
          {io_ROB_output.ROB_entries[2'h0].RD_valid}})};
  assign io_commit = '{valid: commit_valid, bits: _GEN};
endmodule

