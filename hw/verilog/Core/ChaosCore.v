// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// VCS coverage exclude_file
module mem_64x2(
  input  [5:0] R0_addr,
  input        R0_en,
               R0_clk,
  output [1:0] R0_data,
  input  [5:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [1:0] W0_data
);

  reg [1:0] Memory[0:63];
  reg       _R0_en_d0;
  reg [5:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
endmodule

module SDPReadWriteSmem(
  input        clock,
               reset,
  input  [5:0] io_rd_addr,
  output [1:0] io_data_out,
  input  [5:0] io_wr_addr,
  input        io_wr_en,
  input  [1:0] io_data_in
);

  wire [1:0] _mem_ext_R0_data;
  reg        hazard_reg;
  reg  [1:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 2'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_64x2 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

// VCS coverage exclude_file
module ram_64x278(
  input  [5:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [277:0] R0_data,
  input  [5:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [277:0] W0_data
);

  reg [277:0] Memory[0:63];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 278'bx;
endmodule

module ReadWriteSmem(
  input          clock,
                 io_wr_en,
  input  [5:0]   io_addr,
  input  [277:0] io_data_in,
  output [277:0] io_data_out
);

  wire [277:0] _ram_ext_R0_data;
  reg  [277:0] dataOut;
  always @(posedge clock)
    dataOut <= _ram_ext_R0_data;
  ram_64x278 ram_ext (
    .R0_addr (io_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (io_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = dataOut;
endmodule

module instruction_validator(
  input  [1:0] io_instruction_index,
  output [3:0] io_instruction_output
);

  wire [3:0][3:0] _GEN = '{4'h1, 4'h3, 4'h7, 4'hF};
  assign io_instruction_output = _GEN[io_instruction_index];
endmodule

module instruction_cache(
  input          clock,
                 reset,
  output         io_cpu_addr_ready,
  input          io_cpu_addr_valid,
  input  [31:0]  io_cpu_addr_bits,
  input          io_DRAM_resp_valid,
  input  [255:0] io_DRAM_resp_bits_data,
  output         io_cache_data_valid,
  output [31:0]  io_cache_data_bits_fetch_PC,
  output         io_cache_data_bits_valid_bits_0,
                 io_cache_data_bits_valid_bits_1,
                 io_cache_data_bits_valid_bits_2,
                 io_cache_data_bits_valid_bits_3,
  output [31:0]  io_cache_data_bits_instructions_0_instruction,
                 io_cache_data_bits_instructions_1_instruction,
                 io_cache_data_bits_instructions_2_instruction,
                 io_cache_data_bits_instructions_3_instruction,
  input          io_DRAM_request_ready,
  output         io_DRAM_request_valid,
  output [31:0]  io_DRAM_request_bits_addr
);

  wire             miss;
  wire [1:0]       hit_oh;
  wire [29:0]      current_addr;
  wire [3:0]       _validator_io_instruction_output;
  wire [277:0]     _data_memory_1_io_data_out;
  wire [277:0]     _data_memory_0_io_data_out;
  wire [1:0]       _LRU_memory_io_data_out;
  reg  [1:0]       cache_state;
  reg  [31:0]      replay_addr;
  reg  [20:0]      replay_tag;
  reg              replay_valid;
  reg  [31:0]      fetch_PC_buf;
  reg              packet_index;
  wire [2:0]       current_addr_instruction_offset = current_addr[2:0];
  reg  [20:0]      replay_tag_REG;
  reg  [31:0]      io_DRAM_request_bits_addr_REG;
  wire [31:0]      _GEN = miss ? io_DRAM_request_bits_addr_REG & 32'hFFFFFFE0 : 32'h0;
  wire             _GEN_0 = cache_state == 2'h1;
  reg  [31:0]      io_DRAM_request_bits_addr_REG_1;
  wire             _GEN_1 = ~_GEN_0 | io_DRAM_request_ready;
  assign current_addr =
    (|cache_state) | miss ? replay_addr[31:2] : io_cpu_addr_bits[31:2];
  wire [277:0]     current_data = {1'h1, replay_tag, io_DRAM_resp_bits_data};
  reg  [5:0]       LRU_memory_io_wr_addr_REG;
  wire [1:0]       allocate_way =
    _LRU_memory_io_data_out[1] ? {1'h0, ~(_LRU_memory_io_data_out[0])} : 2'h2;
  wire [20:0]      memory_tags_vec_0 = _data_memory_0_io_data_out[276:256];
  wire [20:0]      memory_tags_vec_1 = _data_memory_1_io_data_out[276:256];
  reg  [20:0]      hit_oh_vec_0_REG;
  wire             hit_oh_vec_0 =
    memory_tags_vec_0 == hit_oh_vec_0_REG & _data_memory_0_io_data_out[277];
  reg  [20:0]      hit_oh_vec_1_REG;
  wire             hit_oh_vec_1 =
    memory_tags_vec_1 == hit_oh_vec_1_REG & _data_memory_1_io_data_out[277];
  assign hit_oh = {hit_oh_vec_1, hit_oh_vec_0};
  reg              hit_REG;
  reg              hit_REG_1;
  reg              hit_REG_3;
  wire             hit = (|hit_oh) & (hit_REG | hit_REG_1) & ~hit_REG_3;
  reg              miss_REG;
  reg              miss_REG_1;
  reg              miss_REG_3;
  assign miss = ~(|hit_oh) & (miss_REG | miss_REG_1) & ~miss_REG_3;
  wire [255:0]     hit_instruction_data =
    hit_oh_vec_1
      ? _data_memory_1_io_data_out[255:0]
      : hit_oh_vec_0 ? _data_memory_0_io_data_out[255:0] : 256'h0;
  wire [7:0][31:0] _GEN_2 =
    {{hit_instruction_data[255:224]},
     {hit_instruction_data[223:192]},
     {hit_instruction_data[191:160]},
     {hit_instruction_data[159:128]},
     {hit_instruction_data[127:96]},
     {hit_instruction_data[95:64]},
     {hit_instruction_data[63:32]},
     {hit_instruction_data[31:0]}};
  wire [2:0]       _GEN_3 = {packet_index, 2'h0};
  reg              io_cache_data_bits_valid_bits_0_REG;
  reg              io_cache_data_bits_valid_bits_1_REG;
  reg              io_cache_data_bits_valid_bits_2_REG;
  reg              io_cache_data_bits_valid_bits_3_REG;
  always @(posedge clock) begin
    if (reset) begin
      cache_state <= 2'h0;
      replay_addr <= 32'h0;
      replay_tag <= 21'h0;
      replay_valid <= 1'h0;
      fetch_PC_buf <= 32'h0;
      packet_index <= 1'h0;
    end
    else begin
      automatic logic _GEN_4;
      _GEN_4 = cache_state == 2'h2;
      if (|cache_state) begin
        if (_GEN_0) begin
          if (io_DRAM_resp_valid)
            cache_state <= 2'h2;
        end
        else if (_GEN_4)
          cache_state <= 2'h0;
      end
      else begin
        if (miss)
          cache_state <= 2'h1;
        replay_tag <= replay_tag_REG;
      end
      if (io_cpu_addr_valid)
        replay_addr <= io_cpu_addr_bits;
      replay_valid <=
        (|cache_state) & (_GEN_0 ? io_DRAM_resp_valid : ~_GEN_4 & replay_valid);
      if (~(|cache_state) & ~miss) begin
        fetch_PC_buf <= io_cpu_addr_bits;
        packet_index <= current_addr[2];
      end
    end
    replay_tag_REG <= io_cpu_addr_bits[31:11];
    io_DRAM_request_bits_addr_REG <= io_cpu_addr_bits;
    if (|cache_state) begin
      if (_GEN_1)
        io_DRAM_request_bits_addr_REG_1 <= 32'h0;
    end
    else
      io_DRAM_request_bits_addr_REG_1 <= _GEN;
    LRU_memory_io_wr_addr_REG <= current_addr[8:3];
    hit_oh_vec_0_REG <= current_addr[29:9];
    hit_oh_vec_1_REG <= current_addr[29:9];
    hit_REG <= io_cpu_addr_valid;
    hit_REG_1 <= replay_valid;
    hit_REG_3 <= reset;
    miss_REG <= io_cpu_addr_valid;
    miss_REG_1 <= replay_valid;
    miss_REG_3 <= reset;
    io_cache_data_bits_valid_bits_0_REG <= _validator_io_instruction_output[3];
    io_cache_data_bits_valid_bits_1_REG <= _validator_io_instruction_output[2];
    io_cache_data_bits_valid_bits_2_REG <= _validator_io_instruction_output[1];
    io_cache_data_bits_valid_bits_3_REG <= _validator_io_instruction_output[0];
  end // always @(posedge)
  SDPReadWriteSmem LRU_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (current_addr[8:3]),
    .io_data_out (_LRU_memory_io_data_out),
    .io_wr_addr  (LRU_memory_io_wr_addr_REG),
    .io_wr_en    (hit),
    .io_data_in
      ({2{(_LRU_memory_io_data_out | hit_oh) != 2'h3}} & _LRU_memory_io_data_out | hit_oh)
  );
  ReadWriteSmem data_memory_0 (
    .clock       (clock),
    .io_wr_en    (io_DRAM_resp_valid & allocate_way[0]),
    .io_addr     (current_addr[8:3]),
    .io_data_in  (current_data),
    .io_data_out (_data_memory_0_io_data_out)
  );
  ReadWriteSmem data_memory_1 (
    .clock       (clock),
    .io_wr_en    (io_DRAM_resp_valid & allocate_way[1]),
    .io_addr     (current_addr[8:3]),
    .io_data_in  (current_data),
    .io_data_out (_data_memory_1_io_data_out)
  );
  instruction_validator validator (
    .io_instruction_index  (current_addr_instruction_offset[1:0]),
    .io_instruction_output (_validator_io_instruction_output)
  );
  assign io_cpu_addr_ready = ~(|cache_state) & ~miss;
  assign io_cache_data_valid = hit;
  assign io_cache_data_bits_fetch_PC = fetch_PC_buf;
  assign io_cache_data_bits_valid_bits_0 = io_cache_data_bits_valid_bits_0_REG & hit;
  assign io_cache_data_bits_valid_bits_1 = io_cache_data_bits_valid_bits_1_REG & hit;
  assign io_cache_data_bits_valid_bits_2 = io_cache_data_bits_valid_bits_2_REG & hit;
  assign io_cache_data_bits_valid_bits_3 = io_cache_data_bits_valid_bits_3_REG & hit;
  assign io_cache_data_bits_instructions_0_instruction = _GEN_2[{packet_index, 2'h0}];
  assign io_cache_data_bits_instructions_1_instruction = _GEN_2[_GEN_3 + 3'h1];
  assign io_cache_data_bits_instructions_2_instruction = _GEN_2[_GEN_3 + 3'h2];
  assign io_cache_data_bits_instructions_3_instruction = _GEN_2[_GEN_3 + 3'h3];
  assign io_DRAM_request_valid = (|cache_state) ? _GEN_0 & ~io_DRAM_request_ready : miss;
  assign io_DRAM_request_bits_addr =
    (|cache_state) ? (_GEN_1 ? 32'h0 : io_DRAM_request_bits_addr_REG_1) : _GEN;
endmodule

// VCS coverage exclude_file
module mem_65536x2(
  input  [15:0] R0_addr,
  input         R0_en,
                R0_clk,
  output [1:0]  R0_data,
  input  [15:0] R1_addr,
  input         R1_en,
                R1_clk,
  output [1:0]  R1_data
);

  reg [1:0]  Memory[0:65535];
  reg        _R0_en_d0;
  reg [15:0] _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  reg        _R1_en_d0;
  reg [15:0] _R1_addr_d0;
  always @(posedge R1_clk) begin
    _R1_en_d0 <= R1_en;
    _R1_addr_d0 <= R1_addr;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 2'bx;
  assign R1_data = _R1_en_d0 ? Memory[_R1_addr_d0] : 2'bx;
endmodule

module PHT_memory(
  input         clock,
  input  [15:0] io_addrA,
  output [15:0] io_readDataA,
  input  [15:0] io_addrB,
  output [15:0] io_readDataB,
  input  [15:0] io_addrC,
  input  [1:0]  io_writeDataC
);

  wire [1:0] _mem_ext_R0_data;
  wire [1:0] _mem_ext_R1_data;
  mem_65536x2 mem_ext (
    .R0_addr (io_addrB),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .R1_addr (io_addrA),
    .R1_en   (1'h1),
    .R1_clk  (clock),
    .R1_data (_mem_ext_R1_data)
  );
  assign io_readDataA = {14'h0, _mem_ext_R1_data};
  assign io_readDataB = {14'h0, _mem_ext_R0_data};
endmodule

module gshare(
  input         clock,
  input  [15:0] io_predict_GHR,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_T_NT,
                io_valid
);

  wire [15:0] _PHT_io_readDataA;
  wire [15:0] _PHT_io_readDataB;
  wire [15:0] hashed_commit_addr = 16'h0;
  wire [15:0] hashed_predict_addr = io_predict_PC[15:0] ^ io_predict_GHR;
  reg         io_valid_REG;
  reg  [15:0] PHT_io_addrC_REG;
  always @(posedge clock) begin
    io_valid_REG <= io_predict_valid;
    PHT_io_addrC_REG <= hashed_commit_addr;
  end // always @(posedge)
  PHT_memory PHT (
    .clock         (clock),
    .io_addrA      (hashed_predict_addr),
    .io_readDataA  (_PHT_io_readDataA),
    .io_addrB      (hashed_commit_addr),
    .io_readDataB  (_PHT_io_readDataB),
    .io_addrC      (PHT_io_addrC_REG),
    .io_writeDataC
      ((|(_PHT_io_readDataB[1:0]))
         ? _PHT_io_readDataB[1:0] - 2'h1
         : _PHT_io_readDataB[1:0])
  );
  assign io_T_NT = _PHT_io_readDataA[1];
  assign io_valid = io_valid_REG;
endmodule

module SDPReadWriteSmem_1(
  input         clock,
                reset,
  output [54:0] io_data_out
);

  reg [54:0] din_buff;
  always @(posedge clock) begin
    if (reset)
      din_buff <= 55'h0;
    else
      din_buff <= 55'h40000000000000;
  end // always @(posedge)
  assign io_data_out = 55'h0;
endmodule

module hash_BTB(
  input         clock,
                reset,
  input  [31:0] io_predict_PC,
  input         io_predict_valid,
  output        io_BTB_valid,
  output [31:0] io_BTB_target,
  output [1:0]  io_BTB_type,
  output [3:0]  io_BTB_br_mask,
  output        io_BTB_hit
);

  wire [54:0] _BTB_memory_io_data_out;
  reg         io_BTB_valid_REG;
  reg  [15:0] io_BTB_hit_REG;
  always @(posedge clock) begin
    io_BTB_valid_REG <= io_predict_valid;
    io_BTB_hit_REG <= io_predict_PC[31:16];
  end // always @(posedge)
  SDPReadWriteSmem_1 BTB_memory (
    .clock       (clock),
    .reset       (reset),
    .io_data_out (_BTB_memory_io_data_out)
  );
  assign io_BTB_valid = io_BTB_valid_REG;
  assign io_BTB_target = _BTB_memory_io_data_out[37:6];
  assign io_BTB_type = _BTB_memory_io_data_out[5:4];
  assign io_BTB_br_mask = _BTB_memory_io_data_out[3:0];
  assign io_BTB_hit =
    io_BTB_hit_REG == _BTB_memory_io_data_out[53:38] & _BTB_memory_io_data_out[54];
endmodule

// VCS coverage exclude_file
module mem_128x39(
  input  [6:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [38:0] R0_data,
  input  [6:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [38:0] W0_data
);

  reg [38:0] Memory[0:127];
  reg        _R0_en_d0;
  reg [6:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 39'bx;
endmodule

module SDPReadWriteSmem_2(
  input         clock,
                reset,
  input  [6:0]  io_rd_addr,
  output [38:0] io_data_out,
  input  [6:0]  io_wr_addr,
  input         io_wr_en,
  input  [38:0] io_data_in
);

  wire [38:0] _mem_ext_R0_data;
  reg         hazard_reg;
  reg  [38:0] din_buff;
  always @(posedge clock) begin
    if (reset) begin
      hazard_reg <= 1'h0;
      din_buff <= 39'h0;
    end
    else begin
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;
      din_buff <= io_data_in;
    end
  end // always @(posedge)
  mem_128x39 mem_ext (
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;
endmodule

module RAS(
  input         clock,
                reset,
  input  [31:0] io_wr_addr,
  input         io_wr_valid,
                io_rd_valid,
  output [31:0] io_ret_addr
);

  wire [6:0]  NOS;
  wire [38:0] _RAS_memory_io_data_out;
  reg  [6:0]  NEXT;
  reg  [6:0]  TOS;
  assign NOS = _RAS_memory_io_data_out[38:32];
  always @(posedge clock) begin
    if (reset) begin
      NEXT <= 7'h0;
      TOS <= 7'h0;
    end
    else if (io_wr_valid) begin
      NEXT <= NEXT + 7'h1;
      TOS <= NEXT;
    end
    else if (io_rd_valid)
      TOS <= NOS;
  end // always @(posedge)
  SDPReadWriteSmem_2 RAS_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (io_wr_valid ? NEXT : io_rd_valid ? NOS : TOS),
    .io_data_out (_RAS_memory_io_data_out),
    .io_wr_addr  (NEXT),
    .io_wr_en    (io_wr_valid),
    .io_data_in  ({TOS, io_wr_addr})
  );
  assign io_ret_addr = _RAS_memory_io_data_out[31:0];
endmodule

module BP(
  input         clock,
                reset,
  output        io_predict_ready,
  input         io_predict_valid,
  input  [31:0] io_predict_bits,
                io_RAS_update_call_addr,
  input         io_RAS_update_call,
                io_RAS_update_ret,
  output [31:0] io_RAS_read_ret_addr,
  input         io_revert_valid,
  input  [15:0] io_revert_bits_GHR,
  output        io_prediction_valid,
                io_prediction_bits_hit,
  output [31:0] io_prediction_bits_target,
  output [1:0]  io_prediction_bits_br_type,
  output [3:0]  io_prediction_bits_br_mask,
  output [15:0] io_prediction_bits_GHR,
  output        io_prediction_bits_T_NT
);

  wire        _BTB_io_BTB_valid;
  wire [1:0]  _BTB_io_BTB_type;
  wire        _BTB_io_BTB_hit;
  wire        _gshare_io_T_NT;
  wire        _gshare_io_valid;
  reg  [15:0] GHR_reg;
  wire        GHR_update =
    _gshare_io_valid & _BTB_io_BTB_valid & _BTB_io_BTB_hit & _BTB_io_BTB_type == 2'h0;
  wire [15:0] _GEN = {GHR_reg[14:0], _gshare_io_T_NT};
  always @(posedge clock) begin
    if (reset)
      GHR_reg <= 16'h0;
    else if (io_revert_valid)
      GHR_reg <= io_revert_bits_GHR;
    else if (GHR_update)
      GHR_reg <= _GEN;
  end // always @(posedge)
  gshare gshare (
    .clock            (clock),
    .io_predict_GHR
      (io_revert_valid ? io_revert_bits_GHR : GHR_update ? _GEN : GHR_reg),
    .io_predict_PC    (io_predict_bits),
    .io_predict_valid (io_predict_valid),
    .io_T_NT          (_gshare_io_T_NT),
    .io_valid         (_gshare_io_valid)
  );
  hash_BTB BTB (
    .clock            (clock),
    .reset            (reset),
    .io_predict_PC    (io_predict_bits),
    .io_predict_valid (io_predict_valid),
    .io_BTB_valid     (_BTB_io_BTB_valid),
    .io_BTB_target    (io_prediction_bits_target),
    .io_BTB_type      (_BTB_io_BTB_type),
    .io_BTB_br_mask   (io_prediction_bits_br_mask),
    .io_BTB_hit       (_BTB_io_BTB_hit)
  );
  RAS RAS (
    .clock       (clock),
    .reset       (reset),
    .io_wr_addr  (io_RAS_update_call_addr),
    .io_wr_valid (io_RAS_update_call),
    .io_rd_valid (io_RAS_update_ret),
    .io_ret_addr (io_RAS_read_ret_addr)
  );
  assign io_predict_ready = ~io_revert_valid;
  assign io_prediction_valid = _BTB_io_BTB_valid & _gshare_io_valid;
  assign io_prediction_bits_hit = _BTB_io_BTB_hit;
  assign io_prediction_bits_br_type = _BTB_io_BTB_type;
  assign io_prediction_bits_GHR = GHR_reg;
  assign io_prediction_bits_T_NT = _gshare_io_T_NT;
endmodule

module branch_decoder(
  input  [31:0] io_fetch_PC,
                io_instruction,
                io_prediction_bits_target,
                io_RAS_read_ret_addr,
  output        io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_1(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[1])
          : BR & io_valid & io_prediction_bits_br_mask[1];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'h4;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_2(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[2])
          : BR & io_valid & io_prediction_bits_br_mask[2];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'h8;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module branch_decoder_3(
  input  [31:0] io_fetch_PC,
                io_instruction,
  input         io_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [31:0] io_RAS_read_ret_addr,
  output        io_T_NT,
                io_metadata_JAL,
                io_metadata_JALR,
                io_metadata_BR,
                io_metadata_Call,
                io_metadata_Ret,
  output [31:0] io_metadata_Imm,
                io_metadata_instruction_PC,
                io_metadata_RAS,
                io_metadata_BTB_target
);

  wire [31:0] imm;
  wire        JAL = io_instruction[6:0] == 7'h6F;
  wire        JALR = io_instruction[6:0] == 7'h67;
  wire        BR = io_instruction[6:0] == 7'h63;
  wire        _Call_T_2 = io_instruction[11:7] == 5'h1;
  wire        Ret = JALR & io_instruction[19:15] == 5'h1 & imm == 32'h0;
  assign imm =
    BR
      ? {{19{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7], 1'h0}
      : JAL
          ? {{12{io_instruction[31]}},
             io_instruction[19:12],
             io_instruction[20],
             io_instruction[30:21],
             1'h0}
          : JALR ? io_instruction : 32'h0;
  assign io_T_NT =
    JAL
      ? io_valid
      : JALR
          ? io_valid & (Ret | io_prediction_bits_hit & io_prediction_bits_br_mask[3])
          : BR & io_valid & io_prediction_bits_br_mask[3];
  assign io_metadata_JAL = JAL;
  assign io_metadata_JALR = JALR;
  assign io_metadata_BR = BR;
  assign io_metadata_Call = JAL & _Call_T_2 | JALR & _Call_T_2;
  assign io_metadata_Ret = Ret;
  assign io_metadata_Imm = imm;
  assign io_metadata_instruction_PC = io_fetch_PC + 32'hC;
  assign io_metadata_RAS = io_RAS_read_ret_addr;
  assign io_metadata_BTB_target = io_prediction_bits_target;
endmodule

module decode_validate(
  input         clock,
                reset,
  output        io_prediction_ready,
  input         io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [3:0]  io_prediction_bits_br_mask,
  input  [15:0] io_prediction_bits_GHR,
  output        io_fetch_packet_ready,
  input         io_fetch_packet_valid,
  input  [31:0] io_fetch_packet_bits_fetch_PC,
  input         io_fetch_packet_bits_valid_bits_1,
                io_fetch_packet_bits_valid_bits_2,
                io_fetch_packet_bits_valid_bits_3,
  input  [31:0] io_fetch_packet_bits_instructions_0_instruction,
                io_fetch_packet_bits_instructions_1_instruction,
                io_fetch_packet_bits_instructions_2_instruction,
                io_fetch_packet_bits_instructions_3_instruction,
                io_RAS_read_ret_addr,
  output        io_revert_valid,
  output [15:0] io_revert_bits_GHR,
  output [31:0] io_revert_bits_PC,
                io_final_fetch_packet_bits_instructions_0_instruction,
                io_final_fetch_packet_bits_instructions_1_instruction,
                io_final_fetch_packet_bits_instructions_2_instruction,
                io_final_fetch_packet_bits_instructions_3_instruction,
                io_RAS_update_call_addr,
  output        io_RAS_update_call,
                io_RAS_update_ret
);

  wire [31:0] PC_expected;
  wire        _decoders_3_io_T_NT;
  wire        _decoders_3_io_metadata_JAL;
  wire        _decoders_3_io_metadata_JALR;
  wire        _decoders_3_io_metadata_BR;
  wire        _decoders_3_io_metadata_Call;
  wire        _decoders_3_io_metadata_Ret;
  wire [31:0] _decoders_3_io_metadata_Imm;
  wire [31:0] _decoders_3_io_metadata_instruction_PC;
  wire [31:0] _decoders_3_io_metadata_RAS;
  wire [31:0] _decoders_3_io_metadata_BTB_target;
  wire        _decoders_2_io_T_NT;
  wire        _decoders_2_io_metadata_JAL;
  wire        _decoders_2_io_metadata_JALR;
  wire        _decoders_2_io_metadata_BR;
  wire        _decoders_2_io_metadata_Call;
  wire        _decoders_2_io_metadata_Ret;
  wire [31:0] _decoders_2_io_metadata_Imm;
  wire [31:0] _decoders_2_io_metadata_instruction_PC;
  wire [31:0] _decoders_2_io_metadata_RAS;
  wire [31:0] _decoders_2_io_metadata_BTB_target;
  wire        _decoders_1_io_T_NT;
  wire        _decoders_1_io_metadata_JAL;
  wire        _decoders_1_io_metadata_JALR;
  wire        _decoders_1_io_metadata_BR;
  wire        _decoders_1_io_metadata_Call;
  wire        _decoders_1_io_metadata_Ret;
  wire [31:0] _decoders_1_io_metadata_Imm;
  wire [31:0] _decoders_1_io_metadata_instruction_PC;
  wire [31:0] _decoders_1_io_metadata_RAS;
  wire [31:0] _decoders_1_io_metadata_BTB_target;
  wire        _decoders_0_io_metadata_JAL;
  wire        _decoders_0_io_metadata_JALR;
  wire        _decoders_0_io_metadata_BR;
  wire        _decoders_0_io_metadata_Call;
  wire        _decoders_0_io_metadata_Ret;
  wire [31:0] _decoders_0_io_metadata_Imm;
  wire [31:0] _decoders_0_io_metadata_instruction_PC;
  wire [31:0] _decoders_0_io_metadata_RAS;
  wire [31:0] _decoders_0_io_metadata_BTB_target;
  reg         metadata_reg_0_JAL;
  reg         metadata_reg_0_JALR;
  reg         metadata_reg_0_BR;
  reg         metadata_reg_0_Call;
  reg         metadata_reg_0_Ret;
  reg  [31:0] metadata_reg_0_Imm;
  reg  [31:0] metadata_reg_0_instruction_PC;
  reg  [31:0] metadata_reg_0_RAS;
  reg  [31:0] metadata_reg_0_BTB_target;
  reg         metadata_reg_1_JAL;
  reg         metadata_reg_1_JALR;
  reg         metadata_reg_1_BR;
  reg         metadata_reg_1_Call;
  reg         metadata_reg_1_Ret;
  reg  [31:0] metadata_reg_1_Imm;
  reg  [31:0] metadata_reg_1_instruction_PC;
  reg  [31:0] metadata_reg_1_RAS;
  reg  [31:0] metadata_reg_1_BTB_target;
  reg         metadata_reg_2_JAL;
  reg         metadata_reg_2_JALR;
  reg         metadata_reg_2_BR;
  reg         metadata_reg_2_Call;
  reg         metadata_reg_2_Ret;
  reg  [31:0] metadata_reg_2_Imm;
  reg  [31:0] metadata_reg_2_instruction_PC;
  reg  [31:0] metadata_reg_2_RAS;
  reg  [31:0] metadata_reg_2_BTB_target;
  reg         metadata_reg_3_JAL;
  reg         metadata_reg_3_JALR;
  reg         metadata_reg_3_BR;
  reg         metadata_reg_3_Call;
  reg         metadata_reg_3_Ret;
  reg  [31:0] metadata_reg_3_Imm;
  reg  [31:0] metadata_reg_3_instruction_PC;
  reg  [31:0] metadata_reg_3_RAS;
  reg  [31:0] metadata_reg_3_BTB_target;
  reg         T_NT_reg_1;
  reg         T_NT_reg_2;
  reg         T_NT_reg_3;
  reg  [15:0] GHR_reg;
  wire        use_RAS =
    T_NT_reg_3
      ? metadata_reg_3_Ret
      : T_NT_reg_2
          ? metadata_reg_2_Ret
          : T_NT_reg_1 ? metadata_reg_1_Ret : metadata_reg_0_Ret;
  wire [31:0] metadata_out_instruction_PC =
    T_NT_reg_3
      ? metadata_reg_3_instruction_PC
      : T_NT_reg_2
          ? metadata_reg_2_instruction_PC
          : T_NT_reg_1 ? metadata_reg_1_instruction_PC : metadata_reg_0_instruction_PC;
  reg  [31:0] PC_next_reg;
  wire        PC_mismatch =
    PC_expected != io_fetch_packet_bits_fetch_PC & io_fetch_packet_valid
    & io_prediction_valid;
  reg  [31:0] PC_next_REG;
  wire [31:0] PC_next =
    (T_NT_reg_3
       ? metadata_reg_3_JALR
       : T_NT_reg_2
           ? metadata_reg_2_JALR
           : T_NT_reg_1 ? metadata_reg_1_JALR : metadata_reg_0_JALR) & ~use_RAS
      ? (T_NT_reg_3
           ? metadata_reg_3_BTB_target
           : T_NT_reg_2
               ? metadata_reg_2_BTB_target
               : T_NT_reg_1 ? metadata_reg_1_BTB_target : metadata_reg_0_BTB_target)
      : use_RAS
          ? (T_NT_reg_3
               ? metadata_reg_3_RAS
               : T_NT_reg_2
                   ? metadata_reg_2_RAS
                   : T_NT_reg_1 ? metadata_reg_1_RAS : metadata_reg_0_RAS)
          : (T_NT_reg_3
               ? metadata_reg_3_BR
               : T_NT_reg_2
                   ? metadata_reg_2_BR
                   : T_NT_reg_1 ? metadata_reg_1_BR : metadata_reg_0_BR)
            | (T_NT_reg_3
                 ? metadata_reg_3_JAL
                 : T_NT_reg_2
                     ? metadata_reg_2_JAL
                     : T_NT_reg_1 ? metadata_reg_1_JAL : metadata_reg_0_JAL)
              ? metadata_out_instruction_PC
                + (T_NT_reg_3
                     ? metadata_reg_3_Imm
                     : T_NT_reg_2
                         ? metadata_reg_2_Imm
                         : T_NT_reg_1 ? metadata_reg_1_Imm : metadata_reg_0_Imm)
              : PC_next_REG;
  reg         PC_next_reg_REG;
  reg         PC_expected_REG;
  assign PC_expected = PC_expected_REG ? PC_next : PC_next_reg;
  reg  [31:0] io_final_fetch_packet_bits_instructions_0_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_1_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_2_REG_instruction;
  reg  [31:0] io_final_fetch_packet_bits_instructions_3_REG_instruction;
  always @(posedge clock) begin
    automatic logic stage_1_valid = io_fetch_packet_valid & ~PC_mismatch;
    metadata_reg_0_JAL <= _decoders_0_io_metadata_JAL;
    metadata_reg_0_JALR <= _decoders_0_io_metadata_JALR;
    metadata_reg_0_BR <= _decoders_0_io_metadata_BR;
    metadata_reg_0_Call <= _decoders_0_io_metadata_Call;
    metadata_reg_0_Ret <= _decoders_0_io_metadata_Ret;
    metadata_reg_0_Imm <= _decoders_0_io_metadata_Imm;
    metadata_reg_0_instruction_PC <= _decoders_0_io_metadata_instruction_PC;
    metadata_reg_0_RAS <= _decoders_0_io_metadata_RAS;
    metadata_reg_0_BTB_target <= _decoders_0_io_metadata_BTB_target;
    metadata_reg_1_JAL <= _decoders_1_io_metadata_JAL;
    metadata_reg_1_JALR <= _decoders_1_io_metadata_JALR;
    metadata_reg_1_BR <= _decoders_1_io_metadata_BR;
    metadata_reg_1_Call <= _decoders_1_io_metadata_Call;
    metadata_reg_1_Ret <= _decoders_1_io_metadata_Ret;
    metadata_reg_1_Imm <= _decoders_1_io_metadata_Imm;
    metadata_reg_1_instruction_PC <= _decoders_1_io_metadata_instruction_PC;
    metadata_reg_1_RAS <= _decoders_1_io_metadata_RAS;
    metadata_reg_1_BTB_target <= _decoders_1_io_metadata_BTB_target;
    metadata_reg_2_JAL <= _decoders_2_io_metadata_JAL;
    metadata_reg_2_JALR <= _decoders_2_io_metadata_JALR;
    metadata_reg_2_BR <= _decoders_2_io_metadata_BR;
    metadata_reg_2_Call <= _decoders_2_io_metadata_Call;
    metadata_reg_2_Ret <= _decoders_2_io_metadata_Ret;
    metadata_reg_2_Imm <= _decoders_2_io_metadata_Imm;
    metadata_reg_2_instruction_PC <= _decoders_2_io_metadata_instruction_PC;
    metadata_reg_2_RAS <= _decoders_2_io_metadata_RAS;
    metadata_reg_2_BTB_target <= _decoders_2_io_metadata_BTB_target;
    metadata_reg_3_JAL <= _decoders_3_io_metadata_JAL;
    metadata_reg_3_JALR <= _decoders_3_io_metadata_JALR;
    metadata_reg_3_BR <= _decoders_3_io_metadata_BR;
    metadata_reg_3_Call <= _decoders_3_io_metadata_Call;
    metadata_reg_3_Ret <= _decoders_3_io_metadata_Ret;
    metadata_reg_3_Imm <= _decoders_3_io_metadata_Imm;
    metadata_reg_3_instruction_PC <= _decoders_3_io_metadata_instruction_PC;
    metadata_reg_3_RAS <= _decoders_3_io_metadata_RAS;
    metadata_reg_3_BTB_target <= _decoders_3_io_metadata_BTB_target;
    T_NT_reg_1 <= _decoders_1_io_T_NT;
    T_NT_reg_2 <= _decoders_2_io_T_NT;
    T_NT_reg_3 <= _decoders_3_io_T_NT;
    GHR_reg <= io_prediction_bits_GHR;
    PC_next_REG <= io_fetch_packet_bits_fetch_PC + 32'h10;
    PC_next_reg_REG <= stage_1_valid;
    PC_expected_REG <= stage_1_valid;
    io_final_fetch_packet_bits_instructions_0_REG_instruction <=
      io_fetch_packet_bits_instructions_0_instruction;
    io_final_fetch_packet_bits_instructions_1_REG_instruction <=
      io_fetch_packet_bits_instructions_1_instruction;
    io_final_fetch_packet_bits_instructions_2_REG_instruction <=
      io_fetch_packet_bits_instructions_2_instruction;
    io_final_fetch_packet_bits_instructions_3_REG_instruction <=
      io_fetch_packet_bits_instructions_3_instruction;
    if (reset)
      PC_next_reg <= 32'h0;
    else if (PC_next_reg_REG)
      PC_next_reg <= PC_next;
  end // always @(posedge)
  branch_decoder decoders_0 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_0_instruction),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_metadata_JAL            (_decoders_0_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_0_io_metadata_JALR),
    .io_metadata_BR             (_decoders_0_io_metadata_BR),
    .io_metadata_Call           (_decoders_0_io_metadata_Call),
    .io_metadata_Ret            (_decoders_0_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_0_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_0_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_0_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_0_io_metadata_BTB_target)
  );
  branch_decoder_1 decoders_1 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_1_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_1),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_1_io_T_NT),
    .io_metadata_JAL            (_decoders_1_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_1_io_metadata_JALR),
    .io_metadata_BR             (_decoders_1_io_metadata_BR),
    .io_metadata_Call           (_decoders_1_io_metadata_Call),
    .io_metadata_Ret            (_decoders_1_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_1_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_1_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_1_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_1_io_metadata_BTB_target)
  );
  branch_decoder_2 decoders_2 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_2_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_2),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_2_io_T_NT),
    .io_metadata_JAL            (_decoders_2_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_2_io_metadata_JALR),
    .io_metadata_BR             (_decoders_2_io_metadata_BR),
    .io_metadata_Call           (_decoders_2_io_metadata_Call),
    .io_metadata_Ret            (_decoders_2_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_2_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_2_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_2_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_2_io_metadata_BTB_target)
  );
  branch_decoder_3 decoders_3 (
    .io_fetch_PC                (io_fetch_packet_bits_fetch_PC),
    .io_instruction             (io_fetch_packet_bits_instructions_3_instruction),
    .io_valid                   (io_fetch_packet_bits_valid_bits_3),
    .io_prediction_bits_hit     (io_prediction_bits_hit),
    .io_prediction_bits_target  (io_prediction_bits_target),
    .io_prediction_bits_br_mask (io_prediction_bits_br_mask),
    .io_RAS_read_ret_addr       (io_RAS_read_ret_addr),
    .io_T_NT                    (_decoders_3_io_T_NT),
    .io_metadata_JAL            (_decoders_3_io_metadata_JAL),
    .io_metadata_JALR           (_decoders_3_io_metadata_JALR),
    .io_metadata_BR             (_decoders_3_io_metadata_BR),
    .io_metadata_Call           (_decoders_3_io_metadata_Call),
    .io_metadata_Ret            (_decoders_3_io_metadata_Ret),
    .io_metadata_Imm            (_decoders_3_io_metadata_Imm),
    .io_metadata_instruction_PC (_decoders_3_io_metadata_instruction_PC),
    .io_metadata_RAS            (_decoders_3_io_metadata_RAS),
    .io_metadata_BTB_target     (_decoders_3_io_metadata_BTB_target)
  );
  assign io_prediction_ready = ~PC_mismatch;
  assign io_fetch_packet_ready = ~PC_mismatch;
  assign io_revert_valid = PC_mismatch;
  assign io_revert_bits_GHR = GHR_reg;
  assign io_revert_bits_PC = PC_expected;
  assign io_final_fetch_packet_bits_instructions_0_instruction =
    io_final_fetch_packet_bits_instructions_0_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_1_instruction =
    io_final_fetch_packet_bits_instructions_1_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_2_instruction =
    io_final_fetch_packet_bits_instructions_2_REG_instruction;
  assign io_final_fetch_packet_bits_instructions_3_instruction =
    io_final_fetch_packet_bits_instructions_3_REG_instruction;
  assign io_RAS_update_call_addr = metadata_out_instruction_PC;
  assign io_RAS_update_call =
    T_NT_reg_3
      ? metadata_reg_3_Call
      : T_NT_reg_2
          ? metadata_reg_2_Call
          : T_NT_reg_1 ? metadata_reg_1_Call : metadata_reg_0_Call;
  assign io_RAS_update_ret = use_RAS;
endmodule

module PC_arbit(
  input         clock,
                reset,
                io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [1:0]  io_prediction_bits_br_type,
  input         io_revert_valid,
  input  [31:0] io_revert_bits_PC,
                io_RAS_read_ret_addr,
  input         io_PC_next_ready,
  output        io_PC_next_valid,
  output [31:0] io_PC_next_bits
);

  wire [31:0] io_PC_next_bits_0;
  reg  [31:0] PC;
  reg  [31:0] correction_address_reg;
  wire        is_ret = io_prediction_bits_br_type == 2'h2;
  reg         REG;
  assign io_PC_next_bits_0 =
    REG
      ? correction_address_reg
      : io_prediction_valid & io_prediction_bits_hit & ~is_ret & ~io_revert_valid
          ? io_prediction_bits_target
          : is_ret & ~io_revert_valid ? io_RAS_read_ret_addr : PC;
  wire        io_PC_next_valid_0 = ~io_revert_valid & io_PC_next_ready;
  always @(posedge clock) begin
    if (reset) begin
      PC <= 32'h0;
      correction_address_reg <= 32'h0;
    end
    else begin
      if (io_revert_valid)
        PC <= io_revert_bits_PC;
      else if (io_PC_next_valid_0)
        PC <= io_PC_next_bits_0 + {27'h0, 3'h4 - {1'h0, io_PC_next_bits_0[3:2]}, 2'h0};
      correction_address_reg <= io_revert_valid ? io_revert_bits_PC : 32'h0;
    end
    REG <= io_revert_valid;
  end // always @(posedge)
  assign io_PC_next_valid = io_PC_next_valid_0;
  assign io_PC_next_bits = io_PC_next_bits_0;
endmodule

// VCS coverage exclude_file
module ram_16x179(
  input  [3:0]   R0_addr,
  input          R0_en,
                 R0_clk,
  output [178:0] R0_data,
  input  [3:0]   W0_addr,
  input          W0_en,
                 W0_clk,
  input  [178:0] W0_data
);

  reg [178:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 179'bx;
endmodule

module Queue16_fetch_packet(
  input         clock,
                reset,
                io_enq_valid,
  input  [31:0] io_enq_bits_fetch_PC,
  input         io_enq_bits_valid_bits_0,
                io_enq_bits_valid_bits_1,
                io_enq_bits_valid_bits_2,
                io_enq_bits_valid_bits_3,
  input  [31:0] io_enq_bits_instructions_0_instruction,
                io_enq_bits_instructions_1_instruction,
                io_enq_bits_instructions_2_instruction,
                io_enq_bits_instructions_3_instruction,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits_fetch_PC,
  output        io_deq_bits_valid_bits_1,
                io_deq_bits_valid_bits_2,
                io_deq_bits_valid_bits_3,
  output [31:0] io_deq_bits_instructions_0_instruction,
                io_deq_bits_instructions_1_instruction,
                io_deq_bits_instructions_2_instruction,
                io_deq_bits_instructions_3_instruction
);

  wire         io_enq_ready;
  wire [178:0] _ram_ext_R0_data;
  reg  [3:0]   enq_ptr_value;
  reg  [3:0]   deq_ptr_value;
  reg          maybe_full;
  wire         ptr_match = enq_ptr_value == deq_ptr_value;
  wire         empty = ptr_match & ~maybe_full;
  wire         do_enq = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~(ptr_match & maybe_full);
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x179 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({4'h0,
        io_enq_bits_instructions_3_instruction,
        4'h0,
        io_enq_bits_instructions_2_instruction,
        4'h0,
        io_enq_bits_instructions_1_instruction,
        4'h0,
        io_enq_bits_instructions_0_instruction,
        io_enq_bits_valid_bits_3,
        io_enq_bits_valid_bits_2,
        io_enq_bits_valid_bits_1,
        io_enq_bits_fetch_PC})
  );
  assign io_deq_valid = ~empty;
  assign io_deq_bits_fetch_PC = _ram_ext_R0_data[31:0];
  assign io_deq_bits_valid_bits_1 = _ram_ext_R0_data[32];
  assign io_deq_bits_valid_bits_2 = _ram_ext_R0_data[33];
  assign io_deq_bits_valid_bits_3 = _ram_ext_R0_data[34];
  assign io_deq_bits_instructions_0_instruction = _ram_ext_R0_data[66:35];
  assign io_deq_bits_instructions_1_instruction = _ram_ext_R0_data[102:71];
  assign io_deq_bits_instructions_2_instruction = _ram_ext_R0_data[138:107];
  assign io_deq_bits_instructions_3_instruction = _ram_ext_R0_data[174:143];
endmodule

module Q(
  input         clock,
                reset,
  input  [31:0] io_data_in_fetch_PC,
  input         io_data_in_valid_bits_0,
                io_data_in_valid_bits_1,
                io_data_in_valid_bits_2,
                io_data_in_valid_bits_3,
  input  [31:0] io_data_in_instructions_0_instruction,
                io_data_in_instructions_1_instruction,
                io_data_in_instructions_2_instruction,
                io_data_in_instructions_3_instruction,
  input         io_wr_en,
                io_rd_en,
  output [31:0] io_data_out_fetch_PC,
  output        io_data_out_valid_bits_1,
                io_data_out_valid_bits_2,
                io_data_out_valid_bits_3,
  output [31:0] io_data_out_instructions_0_instruction,
                io_data_out_instructions_1_instruction,
                io_data_out_instructions_2_instruction,
                io_data_out_instructions_3_instruction,
  output        io_empty
);

  wire _queue_io_deq_valid;
  Queue16_fetch_packet queue (
    .clock                                  (clock),
    .reset                                  (reset),
    .io_enq_valid                           (io_wr_en),
    .io_enq_bits_fetch_PC                   (io_data_in_fetch_PC),
    .io_enq_bits_valid_bits_0               (io_data_in_valid_bits_0),
    .io_enq_bits_valid_bits_1               (io_data_in_valid_bits_1),
    .io_enq_bits_valid_bits_2               (io_data_in_valid_bits_2),
    .io_enq_bits_valid_bits_3               (io_data_in_valid_bits_3),
    .io_enq_bits_instructions_0_instruction (io_data_in_instructions_0_instruction),
    .io_enq_bits_instructions_1_instruction (io_data_in_instructions_1_instruction),
    .io_enq_bits_instructions_2_instruction (io_data_in_instructions_2_instruction),
    .io_enq_bits_instructions_3_instruction (io_data_in_instructions_3_instruction),
    .io_deq_ready                           (io_rd_en),
    .io_deq_valid                           (_queue_io_deq_valid),
    .io_deq_bits_fetch_PC                   (io_data_out_fetch_PC),
    .io_deq_bits_valid_bits_1               (io_data_out_valid_bits_1),
    .io_deq_bits_valid_bits_2               (io_data_out_valid_bits_2),
    .io_deq_bits_valid_bits_3               (io_data_out_valid_bits_3),
    .io_deq_bits_instructions_0_instruction (io_data_out_instructions_0_instruction),
    .io_deq_bits_instructions_1_instruction (io_data_out_instructions_1_instruction),
    .io_deq_bits_instructions_2_instruction (io_data_out_instructions_2_instruction),
    .io_deq_bits_instructions_3_instruction (io_data_out_instructions_3_instruction)
  );
  assign io_empty = ~_queue_io_deq_valid;
endmodule

// VCS coverage exclude_file
module ram_16x32(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;
endmodule

module Queue16_UInt32(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits,
  input         io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits
);

  reg  [3:0] enq_ptr_value;
  reg  [3:0] deq_ptr_value;
  reg        maybe_full;
  wire       ptr_match = enq_ptr_value == deq_ptr_value;
  wire       empty = ptr_match & ~maybe_full;
  wire       full = ptr_match & maybe_full;
  wire       do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x32 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
endmodule

module Q_1(
  input         clock,
                reset,
  input  [31:0] io_data_in,
  input         io_wr_en,
                io_rd_en,
  output [31:0] io_data_out,
  output        io_full,
                io_empty
);

  wire _queue_io_enq_ready;
  wire _queue_io_deq_valid;
  Queue16_UInt32 queue (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_queue_io_enq_ready),
    .io_enq_valid (io_wr_en),
    .io_enq_bits  (io_data_in),
    .io_deq_ready (io_rd_en),
    .io_deq_valid (_queue_io_deq_valid),
    .io_deq_bits  (io_data_out)
  );
  assign io_full = ~_queue_io_enq_ready;
  assign io_empty = ~_queue_io_deq_valid;
endmodule

// VCS coverage exclude_file
module ram_16x53(
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [52:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [52:0] W0_data
);

  reg [52:0] Memory[0:15];
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = R0_en ? Memory[R0_addr] : 53'bx;
endmodule

module Queue16_prediction(
  input         clock,
                reset,
                io_enq_valid,
                io_enq_bits_hit,
  input  [31:0] io_enq_bits_target,
  input  [1:0]  io_enq_bits_br_type,
  input  [3:0]  io_enq_bits_br_mask,
  input  [15:0] io_enq_bits_GHR,
  input         io_enq_bits_T_NT,
                io_deq_ready,
  output        io_deq_valid,
                io_deq_bits_hit,
  output [31:0] io_deq_bits_target,
  output [3:0]  io_deq_bits_br_mask,
  output [15:0] io_deq_bits_GHR
);

  wire        io_enq_ready;
  wire [52:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        do_enq = io_enq_ready & io_enq_valid;
  assign io_enq_ready = ~(ptr_match & maybe_full);
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      if (do_enq)
        enq_ptr_value <= enq_ptr_value + 4'h1;
      if (do_deq)
        deq_ptr_value <= deq_ptr_value + 4'h1;
      if (~(do_enq == do_deq))
        maybe_full <= do_enq;
    end
  end // always @(posedge)
  ram_16x53 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_GHR, io_enq_bits_br_mask, io_enq_bits_target, io_enq_bits_hit})
  );
  assign io_deq_valid = ~empty;
  assign io_deq_bits_hit = _ram_ext_R0_data[0];
  assign io_deq_bits_target = _ram_ext_R0_data[32:1];
  assign io_deq_bits_br_mask = _ram_ext_R0_data[36:33];
  assign io_deq_bits_GHR = _ram_ext_R0_data[52:37];
endmodule

module Q_2(
  input         clock,
                reset,
                io_data_in_hit,
  input  [31:0] io_data_in_target,
  input  [1:0]  io_data_in_br_type,
  input  [3:0]  io_data_in_br_mask,
  input  [15:0] io_data_in_GHR,
  input         io_data_in_T_NT,
                io_wr_en,
                io_rd_en,
  output        io_data_out_hit,
  output [31:0] io_data_out_target,
  output [3:0]  io_data_out_br_mask,
  output [15:0] io_data_out_GHR,
  output        io_empty
);

  wire _queue_io_deq_valid;
  Queue16_prediction queue (
    .clock               (clock),
    .reset               (reset),
    .io_enq_valid        (io_wr_en),
    .io_enq_bits_hit     (io_data_in_hit),
    .io_enq_bits_target  (io_data_in_target),
    .io_enq_bits_br_type (io_data_in_br_type),
    .io_enq_bits_br_mask (io_data_in_br_mask),
    .io_enq_bits_GHR     (io_data_in_GHR),
    .io_enq_bits_T_NT    (io_data_in_T_NT),
    .io_deq_ready        (io_rd_en),
    .io_deq_valid        (_queue_io_deq_valid),
    .io_deq_bits_hit     (io_data_out_hit),
    .io_deq_bits_target  (io_data_out_target),
    .io_deq_bits_br_mask (io_data_out_br_mask),
    .io_deq_bits_GHR     (io_data_out_GHR)
  );
  assign io_empty = ~_queue_io_deq_valid;
endmodule

module instruction_fetch(
  input          clock,
                 reset,
                 io_DRAM_request_ready,
  output         io_DRAM_request_valid,
  output [31:0]  io_DRAM_request_bits_addr,
  output         io_DRAM_resp_ready,
  input          io_DRAM_resp_valid,
  input  [255:0] io_DRAM_resp_bits_data,
  output [31:0]  io_fetch_packet_bits_instructions_0_instruction,
                 io_fetch_packet_bits_instructions_1_instruction,
                 io_fetch_packet_bits_instructions_2_instruction,
                 io_fetch_packet_bits_instructions_3_instruction
);

  wire        _BTB_Q_io_data_out_hit;
  wire [31:0] _BTB_Q_io_data_out_target;
  wire [3:0]  _BTB_Q_io_data_out_br_mask;
  wire [15:0] _BTB_Q_io_data_out_GHR;
  wire        _BTB_Q_io_empty;
  wire [31:0] _PC_Q_io_data_out;
  wire        _PC_Q_io_full;
  wire        _PC_Q_io_empty;
  wire [31:0] _instruction_Q_io_data_out_fetch_PC;
  wire        _instruction_Q_io_data_out_valid_bits_1;
  wire        _instruction_Q_io_data_out_valid_bits_2;
  wire        _instruction_Q_io_data_out_valid_bits_3;
  wire [31:0] _instruction_Q_io_data_out_instructions_0_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_1_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_2_instruction;
  wire [31:0] _instruction_Q_io_data_out_instructions_3_instruction;
  wire        _instruction_Q_io_empty;
  wire        _PC_gen_io_PC_next_valid;
  wire [31:0] _PC_gen_io_PC_next_bits;
  wire        _predecoder_io_prediction_ready;
  wire        _predecoder_io_fetch_packet_ready;
  wire        _predecoder_io_revert_valid;
  wire [15:0] _predecoder_io_revert_bits_GHR;
  wire [31:0] _predecoder_io_revert_bits_PC;
  wire [31:0] _predecoder_io_RAS_update_call_addr;
  wire        _predecoder_io_RAS_update_call;
  wire        _predecoder_io_RAS_update_ret;
  wire        _bp_io_predict_ready;
  wire [31:0] _bp_io_RAS_read_ret_addr;
  wire        _bp_io_prediction_valid;
  wire        _bp_io_prediction_bits_hit;
  wire [31:0] _bp_io_prediction_bits_target;
  wire [1:0]  _bp_io_prediction_bits_br_type;
  wire [3:0]  _bp_io_prediction_bits_br_mask;
  wire [15:0] _bp_io_prediction_bits_GHR;
  wire        _bp_io_prediction_bits_T_NT;
  wire        _instruction_cache_io_cpu_addr_ready;
  wire        _instruction_cache_io_cache_data_valid;
  wire [31:0] _instruction_cache_io_cache_data_bits_fetch_PC;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_0;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_1;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_2;
  wire        _instruction_cache_io_cache_data_bits_valid_bits_3;
  wire [31:0] _instruction_cache_io_cache_data_bits_instructions_0_instruction;
  wire [31:0] _instruction_cache_io_cache_data_bits_instructions_1_instruction;
  wire [31:0] _instruction_cache_io_cache_data_bits_instructions_2_instruction;
  wire [31:0] _instruction_cache_io_cache_data_bits_instructions_3_instruction;
  instruction_cache instruction_cache (
    .clock                                         (clock),
    .reset                                         (reset),
    .io_cpu_addr_ready                             (_instruction_cache_io_cpu_addr_ready),
    .io_cpu_addr_valid                             (~_PC_Q_io_empty),
    .io_cpu_addr_bits                              (_PC_Q_io_data_out),
    .io_DRAM_resp_valid                            (io_DRAM_resp_valid),
    .io_DRAM_resp_bits_data                        (io_DRAM_resp_bits_data),
    .io_cache_data_valid
      (_instruction_cache_io_cache_data_valid),
    .io_cache_data_bits_fetch_PC
      (_instruction_cache_io_cache_data_bits_fetch_PC),
    .io_cache_data_bits_valid_bits_0
      (_instruction_cache_io_cache_data_bits_valid_bits_0),
    .io_cache_data_bits_valid_bits_1
      (_instruction_cache_io_cache_data_bits_valid_bits_1),
    .io_cache_data_bits_valid_bits_2
      (_instruction_cache_io_cache_data_bits_valid_bits_2),
    .io_cache_data_bits_valid_bits_3
      (_instruction_cache_io_cache_data_bits_valid_bits_3),
    .io_cache_data_bits_instructions_0_instruction
      (_instruction_cache_io_cache_data_bits_instructions_0_instruction),
    .io_cache_data_bits_instructions_1_instruction
      (_instruction_cache_io_cache_data_bits_instructions_1_instruction),
    .io_cache_data_bits_instructions_2_instruction
      (_instruction_cache_io_cache_data_bits_instructions_2_instruction),
    .io_cache_data_bits_instructions_3_instruction
      (_instruction_cache_io_cache_data_bits_instructions_3_instruction),
    .io_DRAM_request_ready                         (io_DRAM_request_ready),
    .io_DRAM_request_valid                         (io_DRAM_request_valid),
    .io_DRAM_request_bits_addr                     (io_DRAM_request_bits_addr)
  );
  BP bp (
    .clock                      (clock),
    .reset                      (reset),
    .io_predict_ready           (_bp_io_predict_ready),
    .io_predict_valid           (_PC_gen_io_PC_next_valid),
    .io_predict_bits            (_PC_gen_io_PC_next_bits),
    .io_RAS_update_call_addr    (_predecoder_io_RAS_update_call_addr),
    .io_RAS_update_call         (_predecoder_io_RAS_update_call),
    .io_RAS_update_ret          (_predecoder_io_RAS_update_ret),
    .io_RAS_read_ret_addr       (_bp_io_RAS_read_ret_addr),
    .io_revert_valid            (_predecoder_io_revert_valid),
    .io_revert_bits_GHR         (_predecoder_io_revert_bits_GHR),
    .io_prediction_valid        (_bp_io_prediction_valid),
    .io_prediction_bits_hit     (_bp_io_prediction_bits_hit),
    .io_prediction_bits_target  (_bp_io_prediction_bits_target),
    .io_prediction_bits_br_type (_bp_io_prediction_bits_br_type),
    .io_prediction_bits_br_mask (_bp_io_prediction_bits_br_mask),
    .io_prediction_bits_GHR     (_bp_io_prediction_bits_GHR),
    .io_prediction_bits_T_NT    (_bp_io_prediction_bits_T_NT)
  );
  decode_validate predecoder (
    .clock                                                 (clock),
    .reset                                                 (reset),
    .io_prediction_ready
      (_predecoder_io_prediction_ready),
    .io_prediction_valid                                   (~_BTB_Q_io_empty),
    .io_prediction_bits_hit                                (_BTB_Q_io_data_out_hit),
    .io_prediction_bits_target                             (_BTB_Q_io_data_out_target),
    .io_prediction_bits_br_mask                            (_BTB_Q_io_data_out_br_mask),
    .io_prediction_bits_GHR                                (_BTB_Q_io_data_out_GHR),
    .io_fetch_packet_ready
      (_predecoder_io_fetch_packet_ready),
    .io_fetch_packet_valid                                 (~_instruction_Q_io_empty),
    .io_fetch_packet_bits_fetch_PC
      (_instruction_Q_io_data_out_fetch_PC),
    .io_fetch_packet_bits_valid_bits_1
      (_instruction_Q_io_data_out_valid_bits_1),
    .io_fetch_packet_bits_valid_bits_2
      (_instruction_Q_io_data_out_valid_bits_2),
    .io_fetch_packet_bits_valid_bits_3
      (_instruction_Q_io_data_out_valid_bits_3),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_Q_io_data_out_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_Q_io_data_out_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_Q_io_data_out_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_Q_io_data_out_instructions_3_instruction),
    .io_RAS_read_ret_addr                                  (_bp_io_RAS_read_ret_addr),
    .io_revert_valid                                       (_predecoder_io_revert_valid),
    .io_revert_bits_GHR
      (_predecoder_io_revert_bits_GHR),
    .io_revert_bits_PC
      (_predecoder_io_revert_bits_PC),
    .io_final_fetch_packet_bits_instructions_0_instruction
      (io_fetch_packet_bits_instructions_0_instruction),
    .io_final_fetch_packet_bits_instructions_1_instruction
      (io_fetch_packet_bits_instructions_1_instruction),
    .io_final_fetch_packet_bits_instructions_2_instruction
      (io_fetch_packet_bits_instructions_2_instruction),
    .io_final_fetch_packet_bits_instructions_3_instruction
      (io_fetch_packet_bits_instructions_3_instruction),
    .io_RAS_update_call_addr
      (_predecoder_io_RAS_update_call_addr),
    .io_RAS_update_call
      (_predecoder_io_RAS_update_call),
    .io_RAS_update_ret                                     (_predecoder_io_RAS_update_ret)
  );
  PC_arbit PC_gen (
    .clock                      (clock),
    .reset                      (reset),
    .io_prediction_valid        (_bp_io_prediction_valid),
    .io_prediction_bits_hit     (_bp_io_prediction_bits_hit),
    .io_prediction_bits_target  (_bp_io_prediction_bits_target),
    .io_prediction_bits_br_type (_bp_io_prediction_bits_br_type),
    .io_revert_valid            (_predecoder_io_revert_valid),
    .io_revert_bits_PC          (_predecoder_io_revert_bits_PC),
    .io_RAS_read_ret_addr       (_bp_io_RAS_read_ret_addr),
    .io_PC_next_ready           (~_PC_Q_io_full & _bp_io_predict_ready),
    .io_PC_next_valid           (_PC_gen_io_PC_next_valid),
    .io_PC_next_bits            (_PC_gen_io_PC_next_bits)
  );
  Q instruction_Q (
    .clock                                  (clock),
    .reset                                  (reset),
    .io_data_in_fetch_PC
      (_instruction_cache_io_cache_data_bits_fetch_PC),
    .io_data_in_valid_bits_0
      (_instruction_cache_io_cache_data_bits_valid_bits_0),
    .io_data_in_valid_bits_1
      (_instruction_cache_io_cache_data_bits_valid_bits_1),
    .io_data_in_valid_bits_2
      (_instruction_cache_io_cache_data_bits_valid_bits_2),
    .io_data_in_valid_bits_3
      (_instruction_cache_io_cache_data_bits_valid_bits_3),
    .io_data_in_instructions_0_instruction
      (_instruction_cache_io_cache_data_bits_instructions_0_instruction),
    .io_data_in_instructions_1_instruction
      (_instruction_cache_io_cache_data_bits_instructions_1_instruction),
    .io_data_in_instructions_2_instruction
      (_instruction_cache_io_cache_data_bits_instructions_2_instruction),
    .io_data_in_instructions_3_instruction
      (_instruction_cache_io_cache_data_bits_instructions_3_instruction),
    .io_wr_en                               (_instruction_cache_io_cache_data_valid),
    .io_rd_en
      (~_BTB_Q_io_empty & _predecoder_io_fetch_packet_ready),
    .io_data_out_fetch_PC                   (_instruction_Q_io_data_out_fetch_PC),
    .io_data_out_valid_bits_1               (_instruction_Q_io_data_out_valid_bits_1),
    .io_data_out_valid_bits_2               (_instruction_Q_io_data_out_valid_bits_2),
    .io_data_out_valid_bits_3               (_instruction_Q_io_data_out_valid_bits_3),
    .io_data_out_instructions_0_instruction
      (_instruction_Q_io_data_out_instructions_0_instruction),
    .io_data_out_instructions_1_instruction
      (_instruction_Q_io_data_out_instructions_1_instruction),
    .io_data_out_instructions_2_instruction
      (_instruction_Q_io_data_out_instructions_2_instruction),
    .io_data_out_instructions_3_instruction
      (_instruction_Q_io_data_out_instructions_3_instruction),
    .io_empty                               (_instruction_Q_io_empty)
  );
  Q_1 PC_Q (
    .clock       (clock),
    .reset       (reset),
    .io_data_in  (_PC_gen_io_PC_next_bits),
    .io_wr_en    (_PC_gen_io_PC_next_valid),
    .io_rd_en    (_instruction_cache_io_cpu_addr_ready),
    .io_data_out (_PC_Q_io_data_out),
    .io_full     (_PC_Q_io_full),
    .io_empty    (_PC_Q_io_empty)
  );
  Q_2 BTB_Q (
    .clock               (clock),
    .reset               (reset),
    .io_data_in_hit      (_bp_io_prediction_bits_hit),
    .io_data_in_target   (_bp_io_prediction_bits_target),
    .io_data_in_br_type  (_bp_io_prediction_bits_br_type),
    .io_data_in_br_mask  (_bp_io_prediction_bits_br_mask),
    .io_data_in_GHR      (_bp_io_prediction_bits_GHR),
    .io_data_in_T_NT     (_bp_io_prediction_bits_T_NT),
    .io_wr_en            (_bp_io_prediction_valid),
    .io_rd_en            (~_instruction_Q_io_empty & _predecoder_io_prediction_ready),
    .io_data_out_hit     (_BTB_Q_io_data_out_hit),
    .io_data_out_target  (_BTB_Q_io_data_out_target),
    .io_data_out_br_mask (_BTB_Q_io_data_out_br_mask),
    .io_data_out_GHR     (_BTB_Q_io_data_out_GHR),
    .io_empty            (_BTB_Q_io_empty)
  );
  assign io_DRAM_resp_ready = io_DRAM_request_ready;
endmodule

module decoder(
  input        clock,
               reset,
  input [31:0] io_instruction_instruction
);

  `ifndef SYNTHESIS
    always @(posedge clock) begin
      if (~reset
          & ~(io_instruction_instruction[6:2] == 5'h0
              | io_instruction_instruction[6:2] == 5'h1
              | io_instruction_instruction[6:2] == 5'h2
              | io_instruction_instruction[6:2] == 5'h3
              | io_instruction_instruction[6:2] == 5'h4
              | io_instruction_instruction[6:2] == 5'h5
              | io_instruction_instruction[6:2] == 5'h6
              | io_instruction_instruction[6:2] == 5'h8
              | io_instruction_instruction[6:2] == 5'h9
              | io_instruction_instruction[6:2] == 5'hA
              | io_instruction_instruction[6:2] == 5'hB
              | io_instruction_instruction[6:2] == 5'hC
              | io_instruction_instruction[6:2] == 5'hD
              | io_instruction_instruction[6:2] == 5'hE
              | io_instruction_instruction[6:2] == 5'h10
              | io_instruction_instruction[6:2] == 5'h11
              | io_instruction_instruction[6:2] == 5'h12
              | io_instruction_instruction[6:2] == 5'h13
              | io_instruction_instruction[6:2] == 5'h14
              | io_instruction_instruction[6:2] == 5'h16
              | io_instruction_instruction[6:2] == 5'h18
              | io_instruction_instruction[6:2] == 5'h19
              | io_instruction_instruction[6:2] == 5'h1B
              | io_instruction_instruction[6:2] == 5'h1C
              | io_instruction_instruction[6:2] == 5'h1E)) begin
        if (`ASSERT_VERBOSE_COND_)
          $error("Assertion failed: Enum state must be valid, got %d!\n    at decoder.scala:66 assert(valid, \"Enum state must be valid, got %%%%d!\", opcode(6,2))\n",
                 io_instruction_instruction[6:2]);
        if (`STOP_COND_)
          $fatal;
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
endmodule

module fetch_packet_decoder(
  input        clock,
               reset,
  input [31:0] io_fetch_packet_bits_instructions_0_instruction,
               io_fetch_packet_bits_instructions_1_instruction,
               io_fetch_packet_bits_instructions_2_instruction,
               io_fetch_packet_bits_instructions_3_instruction
);

  decoder decoders_0 (
    .clock                      (clock),
    .reset                      (reset),
    .io_instruction_instruction (io_fetch_packet_bits_instructions_0_instruction)
  );
  decoder decoders_1 (
    .clock                      (clock),
    .reset                      (reset),
    .io_instruction_instruction (io_fetch_packet_bits_instructions_1_instruction)
  );
  decoder decoders_2 (
    .clock                      (clock),
    .reset                      (reset),
    .io_instruction_instruction (io_fetch_packet_bits_instructions_2_instruction)
  );
  decoder decoders_3 (
    .clock                      (clock),
    .reset                      (reset),
    .io_instruction_instruction (io_fetch_packet_bits_instructions_3_instruction)
  );
endmodule

module reorder_free_inputs(
  input io_free_valid_0,
        io_free_valid_1,
        io_free_valid_2,
        io_free_valid_3
);

  wire [3:0] sels_0 =
    io_free_valid_0
      ? 4'h1
      : io_free_valid_1 ? 4'h2 : io_free_valid_2 ? 4'h4 : {io_free_valid_3, 3'h0};
  wire [3:0] _sels_T_10 = ~sels_0;
  wire [3:0] sels_1 =
    io_free_valid_0 & _sels_T_10[0]
      ? 4'h1
      : io_free_valid_1 & _sels_T_10[1]
          ? 4'h2
          : io_free_valid_2 & _sels_T_10[2]
              ? 4'h4
              : {io_free_valid_3 & _sels_T_10[3], 3'h0};
  wire [3:0] _sels_T_12 = ~sels_1;
  wire       _GEN = io_free_valid_0 & _sels_T_10[0];
  wire       _GEN_0 = io_free_valid_1 & _sels_T_10[1];
  wire       _GEN_1 = io_free_valid_2 & _sels_T_10[2];
  wire       _GEN_2 = io_free_valid_3 & _sels_T_10[3];
  wire [3:0] sels_2 =
    _GEN & _sels_T_12[0]
      ? 4'h1
      : _GEN_0 & _sels_T_12[1]
          ? 4'h2
          : _GEN_1 & _sels_T_12[2] ? 4'h4 : {_GEN_2 & _sels_T_12[3], 3'h0};
  wire [3:0] _sels_T_14 = ~sels_2;
  wire [3:0] sels_3 =
    _GEN & _sels_T_12[0] & _sels_T_14[0]
      ? 4'h1
      : _GEN_0 & _sels_T_12[1] & _sels_T_14[1]
          ? 4'h2
          : _GEN_1 & _sels_T_12[2] & _sels_T_14[2]
              ? 4'h4
              : {_GEN_2 & _sels_T_12[3] & _sels_T_14[3], 3'h0};
endmodule

module free_list(
  input io_free_valid_0,
        io_free_valid_1,
        io_free_valid_2,
        io_free_valid_3
);

  reorder_free_inputs input_sorter (
    .io_free_valid_0 (io_free_valid_0),
    .io_free_valid_1 (io_free_valid_1),
    .io_free_valid_2 (io_free_valid_2),
    .io_free_valid_3 (io_free_valid_3)
  );
endmodule

module renamer(
  input io_FU_outputs_0_bits_RD_valid,
        io_FU_outputs_1_bits_RD_valid,
        io_FU_outputs_2_bits_RD_valid,
        io_FU_outputs_3_bits_RD_valid
);

  free_list free_list (
    .io_free_valid_0 (io_FU_outputs_0_bits_RD_valid),
    .io_free_valid_1 (io_FU_outputs_1_bits_RD_valid),
    .io_free_valid_2 (io_FU_outputs_2_bits_RD_valid),
    .io_free_valid_3 (io_FU_outputs_3_bits_RD_valid)
  );
endmodule

module frontend(
  input          clock,
                 reset,
  output         io_DRAM_resp_ready,
  input          io_DRAM_resp_valid,
  input  [255:0] io_DRAM_resp_bits_data,
  input          io_DRAM_request_ready,
  output         io_DRAM_request_valid,
  output [31:0]  io_DRAM_request_bits_addr,
  input          io_FU_outputs_0_bits_RD_valid,
                 io_FU_outputs_1_bits_RD_valid,
                 io_FU_outputs_2_bits_RD_valid,
                 io_FU_outputs_3_bits_RD_valid
);

  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_0_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_1_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_2_instruction;
  wire [31:0] _instruction_fetch_io_fetch_packet_bits_instructions_3_instruction;
  instruction_fetch instruction_fetch (
    .clock                                           (clock),
    .reset                                           (reset),
    .io_DRAM_request_ready                           (io_DRAM_request_ready),
    .io_DRAM_request_valid                           (io_DRAM_request_valid),
    .io_DRAM_request_bits_addr                       (io_DRAM_request_bits_addr),
    .io_DRAM_resp_ready                              (io_DRAM_resp_ready),
    .io_DRAM_resp_valid                              (io_DRAM_resp_valid),
    .io_DRAM_resp_bits_data                          (io_DRAM_resp_bits_data),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_3_instruction)
  );
  fetch_packet_decoder decoders (
    .clock                                           (clock),
    .reset                                           (reset),
    .io_fetch_packet_bits_instructions_0_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_0_instruction),
    .io_fetch_packet_bits_instructions_1_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_1_instruction),
    .io_fetch_packet_bits_instructions_2_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_2_instruction),
    .io_fetch_packet_bits_instructions_3_instruction
      (_instruction_fetch_io_fetch_packet_bits_instructions_3_instruction)
  );
  renamer renamer (
    .io_FU_outputs_0_bits_RD_valid (io_FU_outputs_0_bits_RD_valid),
    .io_FU_outputs_1_bits_RD_valid (io_FU_outputs_1_bits_RD_valid),
    .io_FU_outputs_2_bits_RD_valid (io_FU_outputs_2_bits_RD_valid),
    .io_FU_outputs_3_bits_RD_valid (io_FU_outputs_3_bits_RD_valid)
  );
endmodule

module RS(
  input         clock,
                reset,
                io_FU_outputs_0_valid,
  input  [63:0] io_FU_outputs_0_bits_RD,
  input         io_FU_outputs_0_bits_RD_valid,
                io_FU_outputs_1_valid,
  input  [63:0] io_FU_outputs_1_bits_RD,
  input         io_FU_outputs_1_bits_RD_valid,
                io_FU_outputs_2_valid,
  input  [63:0] io_FU_outputs_2_bits_RD,
  input         io_FU_outputs_2_bits_RD_valid,
                io_FU_outputs_3_valid,
  input  [63:0] io_FU_outputs_3_bits_RD,
  input         io_FU_outputs_3_bits_RD_valid,
  output        io_RF_inputs_0_valid,
  output [5:0]  io_RF_inputs_0_bits_RD,
  output        io_RF_inputs_0_bits_RD_valid,
  output [5:0]  io_RF_inputs_0_bits_RS1,
                io_RF_inputs_0_bits_RS2,
  output [31:0] io_RF_inputs_0_bits_IMM,
  output [2:0]  io_RF_inputs_0_bits_FUNCT3,
  output [3:0]  io_RF_inputs_0_bits_packet_index,
  output [4:0]  io_RF_inputs_0_bits_instructionType,
  output        io_RF_inputs_0_bits_needs_ALU,
                io_RF_inputs_0_bits_SUBTRACT,
                io_RF_inputs_0_bits_MULTIPLY,
                io_RF_inputs_0_bits_IMMEDIATE,
                io_RF_inputs_1_valid,
  output [5:0]  io_RF_inputs_1_bits_RD,
  output        io_RF_inputs_1_bits_RD_valid,
  output [5:0]  io_RF_inputs_1_bits_RS1,
                io_RF_inputs_1_bits_RS2,
  output [31:0] io_RF_inputs_1_bits_IMM,
  output [2:0]  io_RF_inputs_1_bits_FUNCT3,
  output [4:0]  io_RF_inputs_1_bits_instructionType,
  output        io_RF_inputs_1_bits_SUBTRACT,
                io_RF_inputs_1_bits_MULTIPLY,
                io_RF_inputs_1_bits_IMMEDIATE,
                io_RF_inputs_2_valid,
  output [5:0]  io_RF_inputs_2_bits_RD,
  output        io_RF_inputs_2_bits_RD_valid,
  output [5:0]  io_RF_inputs_2_bits_RS1,
                io_RF_inputs_2_bits_RS2,
  output [31:0] io_RF_inputs_2_bits_IMM,
  output [2:0]  io_RF_inputs_2_bits_FUNCT3,
  output [4:0]  io_RF_inputs_2_bits_instructionType,
  output        io_RF_inputs_2_bits_SUBTRACT,
                io_RF_inputs_2_bits_MULTIPLY,
                io_RF_inputs_2_bits_IMMEDIATE
);

  reg  [5:0]        reservation_station_0_decoded_instruction_RD;
  reg               reservation_station_0_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_0_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_0_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_0_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_0_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_0_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_0_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_0_decoded_instruction_portID;
  reg               reservation_station_0_decoded_instruction_needs_ALU;
  reg               reservation_station_0_decoded_instruction_SUBTRACT;
  reg               reservation_station_0_decoded_instruction_MULTIPLY;
  reg               reservation_station_0_decoded_instruction_IMMEDIATE;
  reg               reservation_station_0_ready_bits_RS1_ready;
  reg               reservation_station_0_ready_bits_RS2_ready;
  reg               reservation_station_0_valid;
  reg  [5:0]        reservation_station_1_decoded_instruction_RD;
  reg               reservation_station_1_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_1_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_1_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_1_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_1_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_1_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_1_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_1_decoded_instruction_portID;
  reg               reservation_station_1_decoded_instruction_needs_ALU;
  reg               reservation_station_1_decoded_instruction_SUBTRACT;
  reg               reservation_station_1_decoded_instruction_MULTIPLY;
  reg               reservation_station_1_decoded_instruction_IMMEDIATE;
  reg               reservation_station_1_ready_bits_RS1_ready;
  reg               reservation_station_1_ready_bits_RS2_ready;
  reg               reservation_station_1_valid;
  reg  [5:0]        reservation_station_2_decoded_instruction_RD;
  reg               reservation_station_2_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_2_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_2_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_2_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_2_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_2_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_2_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_2_decoded_instruction_portID;
  reg               reservation_station_2_decoded_instruction_needs_ALU;
  reg               reservation_station_2_decoded_instruction_SUBTRACT;
  reg               reservation_station_2_decoded_instruction_MULTIPLY;
  reg               reservation_station_2_decoded_instruction_IMMEDIATE;
  reg               reservation_station_2_ready_bits_RS1_ready;
  reg               reservation_station_2_ready_bits_RS2_ready;
  reg               reservation_station_2_valid;
  reg  [5:0]        reservation_station_3_decoded_instruction_RD;
  reg               reservation_station_3_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_3_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_3_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_3_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_3_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_3_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_3_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_3_decoded_instruction_portID;
  reg               reservation_station_3_decoded_instruction_needs_ALU;
  reg               reservation_station_3_decoded_instruction_SUBTRACT;
  reg               reservation_station_3_decoded_instruction_MULTIPLY;
  reg               reservation_station_3_decoded_instruction_IMMEDIATE;
  reg               reservation_station_3_ready_bits_RS1_ready;
  reg               reservation_station_3_ready_bits_RS2_ready;
  reg               reservation_station_3_valid;
  reg  [5:0]        reservation_station_4_decoded_instruction_RD;
  reg               reservation_station_4_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_4_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_4_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_4_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_4_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_4_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_4_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_4_decoded_instruction_portID;
  reg               reservation_station_4_decoded_instruction_needs_ALU;
  reg               reservation_station_4_decoded_instruction_SUBTRACT;
  reg               reservation_station_4_decoded_instruction_MULTIPLY;
  reg               reservation_station_4_decoded_instruction_IMMEDIATE;
  reg               reservation_station_4_ready_bits_RS1_ready;
  reg               reservation_station_4_ready_bits_RS2_ready;
  reg               reservation_station_4_valid;
  reg  [5:0]        reservation_station_5_decoded_instruction_RD;
  reg               reservation_station_5_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_5_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_5_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_5_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_5_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_5_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_5_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_5_decoded_instruction_portID;
  reg               reservation_station_5_decoded_instruction_needs_ALU;
  reg               reservation_station_5_decoded_instruction_SUBTRACT;
  reg               reservation_station_5_decoded_instruction_MULTIPLY;
  reg               reservation_station_5_decoded_instruction_IMMEDIATE;
  reg               reservation_station_5_ready_bits_RS1_ready;
  reg               reservation_station_5_ready_bits_RS2_ready;
  reg               reservation_station_5_valid;
  reg  [5:0]        reservation_station_6_decoded_instruction_RD;
  reg               reservation_station_6_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_6_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_6_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_6_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_6_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_6_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_6_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_6_decoded_instruction_portID;
  reg               reservation_station_6_decoded_instruction_needs_ALU;
  reg               reservation_station_6_decoded_instruction_SUBTRACT;
  reg               reservation_station_6_decoded_instruction_MULTIPLY;
  reg               reservation_station_6_decoded_instruction_IMMEDIATE;
  reg               reservation_station_6_ready_bits_RS1_ready;
  reg               reservation_station_6_ready_bits_RS2_ready;
  reg               reservation_station_6_valid;
  reg  [5:0]        reservation_station_7_decoded_instruction_RD;
  reg               reservation_station_7_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_7_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_7_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_7_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_7_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_7_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_7_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_7_decoded_instruction_portID;
  reg               reservation_station_7_decoded_instruction_needs_ALU;
  reg               reservation_station_7_decoded_instruction_SUBTRACT;
  reg               reservation_station_7_decoded_instruction_MULTIPLY;
  reg               reservation_station_7_decoded_instruction_IMMEDIATE;
  reg               reservation_station_7_ready_bits_RS1_ready;
  reg               reservation_station_7_ready_bits_RS2_ready;
  reg               reservation_station_7_valid;
  reg  [5:0]        reservation_station_8_decoded_instruction_RD;
  reg               reservation_station_8_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_8_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_8_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_8_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_8_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_8_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_8_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_8_decoded_instruction_portID;
  reg               reservation_station_8_decoded_instruction_needs_ALU;
  reg               reservation_station_8_decoded_instruction_SUBTRACT;
  reg               reservation_station_8_decoded_instruction_MULTIPLY;
  reg               reservation_station_8_decoded_instruction_IMMEDIATE;
  reg               reservation_station_8_ready_bits_RS1_ready;
  reg               reservation_station_8_ready_bits_RS2_ready;
  reg               reservation_station_8_valid;
  reg  [5:0]        reservation_station_9_decoded_instruction_RD;
  reg               reservation_station_9_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_9_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_9_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_9_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_9_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_9_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_9_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_9_decoded_instruction_portID;
  reg               reservation_station_9_decoded_instruction_needs_ALU;
  reg               reservation_station_9_decoded_instruction_SUBTRACT;
  reg               reservation_station_9_decoded_instruction_MULTIPLY;
  reg               reservation_station_9_decoded_instruction_IMMEDIATE;
  reg               reservation_station_9_ready_bits_RS1_ready;
  reg               reservation_station_9_ready_bits_RS2_ready;
  reg               reservation_station_9_valid;
  reg  [5:0]        reservation_station_10_decoded_instruction_RD;
  reg               reservation_station_10_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_10_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_10_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_10_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_10_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_10_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_10_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_10_decoded_instruction_portID;
  reg               reservation_station_10_decoded_instruction_needs_ALU;
  reg               reservation_station_10_decoded_instruction_SUBTRACT;
  reg               reservation_station_10_decoded_instruction_MULTIPLY;
  reg               reservation_station_10_decoded_instruction_IMMEDIATE;
  reg               reservation_station_10_ready_bits_RS1_ready;
  reg               reservation_station_10_ready_bits_RS2_ready;
  reg               reservation_station_10_valid;
  reg  [5:0]        reservation_station_11_decoded_instruction_RD;
  reg               reservation_station_11_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_11_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_11_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_11_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_11_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_11_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_11_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_11_decoded_instruction_portID;
  reg               reservation_station_11_decoded_instruction_needs_ALU;
  reg               reservation_station_11_decoded_instruction_SUBTRACT;
  reg               reservation_station_11_decoded_instruction_MULTIPLY;
  reg               reservation_station_11_decoded_instruction_IMMEDIATE;
  reg               reservation_station_11_ready_bits_RS1_ready;
  reg               reservation_station_11_ready_bits_RS2_ready;
  reg               reservation_station_11_valid;
  reg  [5:0]        reservation_station_12_decoded_instruction_RD;
  reg               reservation_station_12_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_12_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_12_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_12_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_12_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_12_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_12_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_12_decoded_instruction_portID;
  reg               reservation_station_12_decoded_instruction_needs_ALU;
  reg               reservation_station_12_decoded_instruction_SUBTRACT;
  reg               reservation_station_12_decoded_instruction_MULTIPLY;
  reg               reservation_station_12_decoded_instruction_IMMEDIATE;
  reg               reservation_station_12_ready_bits_RS1_ready;
  reg               reservation_station_12_ready_bits_RS2_ready;
  reg               reservation_station_12_valid;
  reg  [5:0]        reservation_station_13_decoded_instruction_RD;
  reg               reservation_station_13_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_13_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_13_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_13_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_13_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_13_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_13_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_13_decoded_instruction_portID;
  reg               reservation_station_13_decoded_instruction_needs_ALU;
  reg               reservation_station_13_decoded_instruction_SUBTRACT;
  reg               reservation_station_13_decoded_instruction_MULTIPLY;
  reg               reservation_station_13_decoded_instruction_IMMEDIATE;
  reg               reservation_station_13_ready_bits_RS1_ready;
  reg               reservation_station_13_ready_bits_RS2_ready;
  reg               reservation_station_13_valid;
  reg  [5:0]        reservation_station_14_decoded_instruction_RD;
  reg               reservation_station_14_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_14_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_14_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_14_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_14_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_14_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_14_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_14_decoded_instruction_portID;
  reg               reservation_station_14_decoded_instruction_needs_ALU;
  reg               reservation_station_14_decoded_instruction_SUBTRACT;
  reg               reservation_station_14_decoded_instruction_MULTIPLY;
  reg               reservation_station_14_decoded_instruction_IMMEDIATE;
  reg               reservation_station_14_ready_bits_RS1_ready;
  reg               reservation_station_14_ready_bits_RS2_ready;
  reg               reservation_station_14_valid;
  reg  [5:0]        reservation_station_15_decoded_instruction_RD;
  reg               reservation_station_15_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_15_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_15_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_15_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_15_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_15_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_15_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_15_decoded_instruction_portID;
  reg               reservation_station_15_decoded_instruction_needs_ALU;
  reg               reservation_station_15_decoded_instruction_SUBTRACT;
  reg               reservation_station_15_decoded_instruction_MULTIPLY;
  reg               reservation_station_15_decoded_instruction_IMMEDIATE;
  reg               reservation_station_15_ready_bits_RS1_ready;
  reg               reservation_station_15_ready_bits_RS2_ready;
  reg               reservation_station_15_valid;
  reg  [5:0]        reservation_station_16_decoded_instruction_RD;
  reg               reservation_station_16_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_16_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_16_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_16_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_16_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_16_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_16_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_16_decoded_instruction_portID;
  reg               reservation_station_16_decoded_instruction_needs_ALU;
  reg               reservation_station_16_decoded_instruction_SUBTRACT;
  reg               reservation_station_16_decoded_instruction_MULTIPLY;
  reg               reservation_station_16_decoded_instruction_IMMEDIATE;
  reg               reservation_station_16_ready_bits_RS1_ready;
  reg               reservation_station_16_ready_bits_RS2_ready;
  reg               reservation_station_16_valid;
  reg  [5:0]        reservation_station_17_decoded_instruction_RD;
  reg               reservation_station_17_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_17_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_17_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_17_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_17_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_17_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_17_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_17_decoded_instruction_portID;
  reg               reservation_station_17_decoded_instruction_needs_ALU;
  reg               reservation_station_17_decoded_instruction_SUBTRACT;
  reg               reservation_station_17_decoded_instruction_MULTIPLY;
  reg               reservation_station_17_decoded_instruction_IMMEDIATE;
  reg               reservation_station_17_ready_bits_RS1_ready;
  reg               reservation_station_17_ready_bits_RS2_ready;
  reg               reservation_station_17_valid;
  reg  [5:0]        reservation_station_18_decoded_instruction_RD;
  reg               reservation_station_18_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_18_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_18_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_18_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_18_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_18_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_18_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_18_decoded_instruction_portID;
  reg               reservation_station_18_decoded_instruction_needs_ALU;
  reg               reservation_station_18_decoded_instruction_SUBTRACT;
  reg               reservation_station_18_decoded_instruction_MULTIPLY;
  reg               reservation_station_18_decoded_instruction_IMMEDIATE;
  reg               reservation_station_18_ready_bits_RS1_ready;
  reg               reservation_station_18_ready_bits_RS2_ready;
  reg               reservation_station_18_valid;
  reg  [5:0]        reservation_station_19_decoded_instruction_RD;
  reg               reservation_station_19_decoded_instruction_RD_valid;
  reg  [5:0]        reservation_station_19_decoded_instruction_RS1;
  reg  [5:0]        reservation_station_19_decoded_instruction_RS2;
  reg  [31:0]       reservation_station_19_decoded_instruction_IMM;
  reg  [2:0]        reservation_station_19_decoded_instruction_FUNCT3;
  reg  [3:0]        reservation_station_19_decoded_instruction_packet_index;
  reg  [4:0]        reservation_station_19_decoded_instruction_instructionType;
  reg  [1:0]        reservation_station_19_decoded_instruction_portID;
  reg               reservation_station_19_decoded_instruction_needs_ALU;
  reg               reservation_station_19_decoded_instruction_SUBTRACT;
  reg               reservation_station_19_decoded_instruction_MULTIPLY;
  reg               reservation_station_19_decoded_instruction_IMMEDIATE;
  reg               reservation_station_19_ready_bits_RS1_ready;
  reg               reservation_station_19_ready_bits_RS2_ready;
  reg               reservation_station_19_valid;
  wire [19:0]       _allocate_index_T =
    ~{reservation_station_19_valid,
      reservation_station_18_valid,
      reservation_station_17_valid,
      reservation_station_16_valid,
      reservation_station_15_valid,
      reservation_station_14_valid,
      reservation_station_13_valid,
      reservation_station_12_valid,
      reservation_station_11_valid,
      reservation_station_10_valid,
      reservation_station_9_valid,
      reservation_station_8_valid,
      reservation_station_7_valid,
      reservation_station_6_valid,
      reservation_station_5_valid,
      reservation_station_4_valid,
      reservation_station_3_valid,
      reservation_station_2_valid,
      reservation_station_1_valid,
      reservation_station_0_valid};
  wire [19:0]       allocate_index_0 =
    _allocate_index_T[0]
      ? 20'h1
      : _allocate_index_T[1]
          ? 20'h2
          : _allocate_index_T[2]
              ? 20'h4
              : _allocate_index_T[3]
                  ? 20'h8
                  : _allocate_index_T[4]
                      ? 20'h10
                      : _allocate_index_T[5]
                          ? 20'h20
                          : _allocate_index_T[6]
                              ? 20'h40
                              : _allocate_index_T[7]
                                  ? 20'h80
                                  : _allocate_index_T[8]
                                      ? 20'h100
                                      : _allocate_index_T[9]
                                          ? 20'h200
                                          : _allocate_index_T[10]
                                              ? 20'h400
                                              : _allocate_index_T[11]
                                                  ? 20'h800
                                                  : _allocate_index_T[12]
                                                      ? 20'h1000
                                                      : _allocate_index_T[13]
                                                          ? 20'h2000
                                                          : _allocate_index_T[14]
                                                              ? 20'h4000
                                                              : _allocate_index_T[15]
                                                                  ? 20'h8000
                                                                  : _allocate_index_T[16]
                                                                      ? 20'h10000
                                                                      : _allocate_index_T[17]
                                                                          ? 20'h20000
                                                                          : _allocate_index_T[18]
                                                                              ? 20'h40000
                                                                              : {_allocate_index_T[19],
                                                                                 19'h0};
  wire [19:0]       _allocate_index_T_1 = ~allocate_index_0;
  wire [19:0]       allocate_index_1 =
    _allocate_index_T[0] & _allocate_index_T_1[0]
      ? 20'h1
      : _allocate_index_T[1] & _allocate_index_T_1[1]
          ? 20'h2
          : _allocate_index_T[2] & _allocate_index_T_1[2]
              ? 20'h4
              : _allocate_index_T[3] & _allocate_index_T_1[3]
                  ? 20'h8
                  : _allocate_index_T[4] & _allocate_index_T_1[4]
                      ? 20'h10
                      : _allocate_index_T[5] & _allocate_index_T_1[5]
                          ? 20'h20
                          : _allocate_index_T[6] & _allocate_index_T_1[6]
                              ? 20'h40
                              : _allocate_index_T[7] & _allocate_index_T_1[7]
                                  ? 20'h80
                                  : _allocate_index_T[8] & _allocate_index_T_1[8]
                                      ? 20'h100
                                      : _allocate_index_T[9] & _allocate_index_T_1[9]
                                          ? 20'h200
                                          : _allocate_index_T[10]
                                            & _allocate_index_T_1[10]
                                              ? 20'h400
                                              : _allocate_index_T[11]
                                                & _allocate_index_T_1[11]
                                                  ? 20'h800
                                                  : _allocate_index_T[12]
                                                    & _allocate_index_T_1[12]
                                                      ? 20'h1000
                                                      : _allocate_index_T[13]
                                                        & _allocate_index_T_1[13]
                                                          ? 20'h2000
                                                          : _allocate_index_T[14]
                                                            & _allocate_index_T_1[14]
                                                              ? 20'h4000
                                                              : _allocate_index_T[15]
                                                                & _allocate_index_T_1[15]
                                                                  ? 20'h8000
                                                                  : _allocate_index_T[16]
                                                                    & _allocate_index_T_1[16]
                                                                      ? 20'h10000
                                                                      : _allocate_index_T[17]
                                                                        & _allocate_index_T_1[17]
                                                                          ? 20'h20000
                                                                          : _allocate_index_T[18]
                                                                            & _allocate_index_T_1[18]
                                                                              ? 20'h40000
                                                                              : {_allocate_index_T[19]
                                                                                   & _allocate_index_T_1[19],
                                                                                 19'h0};
  wire [19:0]       _allocate_index_T_3 = ~allocate_index_1;
  wire              _GEN = _allocate_index_T[0] & _allocate_index_T_1[0];
  wire              _GEN_0 = _allocate_index_T[1] & _allocate_index_T_1[1];
  wire              _GEN_1 = _allocate_index_T[2] & _allocate_index_T_1[2];
  wire              _GEN_2 = _allocate_index_T[3] & _allocate_index_T_1[3];
  wire              _GEN_3 = _allocate_index_T[4] & _allocate_index_T_1[4];
  wire              _GEN_4 = _allocate_index_T[5] & _allocate_index_T_1[5];
  wire              _GEN_5 = _allocate_index_T[6] & _allocate_index_T_1[6];
  wire              _GEN_6 = _allocate_index_T[7] & _allocate_index_T_1[7];
  wire              _GEN_7 = _allocate_index_T[8] & _allocate_index_T_1[8];
  wire              _GEN_8 = _allocate_index_T[9] & _allocate_index_T_1[9];
  wire              _GEN_9 = _allocate_index_T[10] & _allocate_index_T_1[10];
  wire              _GEN_10 = _allocate_index_T[11] & _allocate_index_T_1[11];
  wire              _GEN_11 = _allocate_index_T[12] & _allocate_index_T_1[12];
  wire              _GEN_12 = _allocate_index_T[13] & _allocate_index_T_1[13];
  wire              _GEN_13 = _allocate_index_T[14] & _allocate_index_T_1[14];
  wire              _GEN_14 = _allocate_index_T[15] & _allocate_index_T_1[15];
  wire              _GEN_15 = _allocate_index_T[16] & _allocate_index_T_1[16];
  wire              _GEN_16 = _allocate_index_T[17] & _allocate_index_T_1[17];
  wire              _GEN_17 = _allocate_index_T[18] & _allocate_index_T_1[18];
  wire              _GEN_18 = _allocate_index_T[19] & _allocate_index_T_1[19];
  wire [19:0]       allocate_index_2 =
    _GEN & _allocate_index_T_3[0]
      ? 20'h1
      : _GEN_0 & _allocate_index_T_3[1]
          ? 20'h2
          : _GEN_1 & _allocate_index_T_3[2]
              ? 20'h4
              : _GEN_2 & _allocate_index_T_3[3]
                  ? 20'h8
                  : _GEN_3 & _allocate_index_T_3[4]
                      ? 20'h10
                      : _GEN_4 & _allocate_index_T_3[5]
                          ? 20'h20
                          : _GEN_5 & _allocate_index_T_3[6]
                              ? 20'h40
                              : _GEN_6 & _allocate_index_T_3[7]
                                  ? 20'h80
                                  : _GEN_7 & _allocate_index_T_3[8]
                                      ? 20'h100
                                      : _GEN_8 & _allocate_index_T_3[9]
                                          ? 20'h200
                                          : _GEN_9 & _allocate_index_T_3[10]
                                              ? 20'h400
                                              : _GEN_10 & _allocate_index_T_3[11]
                                                  ? 20'h800
                                                  : _GEN_11 & _allocate_index_T_3[12]
                                                      ? 20'h1000
                                                      : _GEN_12 & _allocate_index_T_3[13]
                                                          ? 20'h2000
                                                          : _GEN_13
                                                            & _allocate_index_T_3[14]
                                                              ? 20'h4000
                                                              : _GEN_14
                                                                & _allocate_index_T_3[15]
                                                                  ? 20'h8000
                                                                  : _GEN_15
                                                                    & _allocate_index_T_3[16]
                                                                      ? 20'h10000
                                                                      : _GEN_16
                                                                        & _allocate_index_T_3[17]
                                                                          ? 20'h20000
                                                                          : _GEN_17
                                                                            & _allocate_index_T_3[18]
                                                                              ? 20'h40000
                                                                              : {_GEN_18
                                                                                   & _allocate_index_T_3[19],
                                                                                 19'h0};
  wire [19:0]       _allocate_index_T_5 = ~allocate_index_2;
  wire [19:0]       allocate_index_3 =
    _GEN & _allocate_index_T_3[0] & _allocate_index_T_5[0]
      ? 20'h1
      : _GEN_0 & _allocate_index_T_3[1] & _allocate_index_T_5[1]
          ? 20'h2
          : _GEN_1 & _allocate_index_T_3[2] & _allocate_index_T_5[2]
              ? 20'h4
              : _GEN_2 & _allocate_index_T_3[3] & _allocate_index_T_5[3]
                  ? 20'h8
                  : _GEN_3 & _allocate_index_T_3[4] & _allocate_index_T_5[4]
                      ? 20'h10
                      : _GEN_4 & _allocate_index_T_3[5] & _allocate_index_T_5[5]
                          ? 20'h20
                          : _GEN_5 & _allocate_index_T_3[6] & _allocate_index_T_5[6]
                              ? 20'h40
                              : _GEN_6 & _allocate_index_T_3[7] & _allocate_index_T_5[7]
                                  ? 20'h80
                                  : _GEN_7 & _allocate_index_T_3[8]
                                    & _allocate_index_T_5[8]
                                      ? 20'h100
                                      : _GEN_8 & _allocate_index_T_3[9]
                                        & _allocate_index_T_5[9]
                                          ? 20'h200
                                          : _GEN_9 & _allocate_index_T_3[10]
                                            & _allocate_index_T_5[10]
                                              ? 20'h400
                                              : _GEN_10 & _allocate_index_T_3[11]
                                                & _allocate_index_T_5[11]
                                                  ? 20'h800
                                                  : _GEN_11 & _allocate_index_T_3[12]
                                                    & _allocate_index_T_5[12]
                                                      ? 20'h1000
                                                      : _GEN_12 & _allocate_index_T_3[13]
                                                        & _allocate_index_T_5[13]
                                                          ? 20'h2000
                                                          : _GEN_13
                                                            & _allocate_index_T_3[14]
                                                            & _allocate_index_T_5[14]
                                                              ? 20'h4000
                                                              : _GEN_14
                                                                & _allocate_index_T_3[15]
                                                                & _allocate_index_T_5[15]
                                                                  ? 20'h8000
                                                                  : _GEN_15
                                                                    & _allocate_index_T_3[16]
                                                                    & _allocate_index_T_5[16]
                                                                      ? 20'h10000
                                                                      : _GEN_16
                                                                        & _allocate_index_T_3[17]
                                                                        & _allocate_index_T_5[17]
                                                                          ? 20'h20000
                                                                          : _GEN_17
                                                                            & _allocate_index_T_3[18]
                                                                            & _allocate_index_T_5[18]
                                                                              ? 20'h40000
                                                                              : {_GEN_18
                                                                                   & _allocate_index_T_3[19]
                                                                                   & _allocate_index_T_5[19],
                                                                                 19'h0};
  wire [63:0]       _GEN_19 = {58'h0, reservation_station_0_decoded_instruction_RS1};
  wire              RS1_match_0 =
    io_FU_outputs_0_bits_RD == _GEN_19 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_19
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_19 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_19
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_20 = {58'h0, reservation_station_0_decoded_instruction_RS2};
  wire              RS2_match_0 =
    io_FU_outputs_0_bits_RD == _GEN_20 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_20
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_20 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_20
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_21 = {58'h0, reservation_station_1_decoded_instruction_RS1};
  wire              RS1_match_1 =
    io_FU_outputs_0_bits_RD == _GEN_21 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_21
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_21 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_21
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_22 = {58'h0, reservation_station_1_decoded_instruction_RS2};
  wire              RS2_match_1 =
    io_FU_outputs_0_bits_RD == _GEN_22 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_22
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_22 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_22
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_23 = {58'h0, reservation_station_2_decoded_instruction_RS1};
  wire              RS1_match_2 =
    io_FU_outputs_0_bits_RD == _GEN_23 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_23
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_23 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_23
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_24 = {58'h0, reservation_station_2_decoded_instruction_RS2};
  wire              RS2_match_2 =
    io_FU_outputs_0_bits_RD == _GEN_24 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_24
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_24 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_24
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_25 = {58'h0, reservation_station_3_decoded_instruction_RS1};
  wire              RS1_match_3 =
    io_FU_outputs_0_bits_RD == _GEN_25 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_25
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_25 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_25
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_26 = {58'h0, reservation_station_3_decoded_instruction_RS2};
  wire              RS2_match_3 =
    io_FU_outputs_0_bits_RD == _GEN_26 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_26
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_26 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_26
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_27 = {58'h0, reservation_station_4_decoded_instruction_RS1};
  wire              RS1_match_4 =
    io_FU_outputs_0_bits_RD == _GEN_27 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_27
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_27 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_27
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_28 = {58'h0, reservation_station_4_decoded_instruction_RS2};
  wire              RS2_match_4 =
    io_FU_outputs_0_bits_RD == _GEN_28 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_28
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_28 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_28
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_29 = {58'h0, reservation_station_5_decoded_instruction_RS1};
  wire              RS1_match_5 =
    io_FU_outputs_0_bits_RD == _GEN_29 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_29
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_29 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_29
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_30 = {58'h0, reservation_station_5_decoded_instruction_RS2};
  wire              RS2_match_5 =
    io_FU_outputs_0_bits_RD == _GEN_30 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_30
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_30 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_30
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_31 = {58'h0, reservation_station_6_decoded_instruction_RS1};
  wire              RS1_match_6 =
    io_FU_outputs_0_bits_RD == _GEN_31 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_31
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_31 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_31
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_32 = {58'h0, reservation_station_6_decoded_instruction_RS2};
  wire              RS2_match_6 =
    io_FU_outputs_0_bits_RD == _GEN_32 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_32
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_32 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_32
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_33 = {58'h0, reservation_station_7_decoded_instruction_RS1};
  wire              RS1_match_7 =
    io_FU_outputs_0_bits_RD == _GEN_33 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_33
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_33 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_33
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_34 = {58'h0, reservation_station_7_decoded_instruction_RS2};
  wire              RS2_match_7 =
    io_FU_outputs_0_bits_RD == _GEN_34 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_34
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_34 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_34
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_35 = {58'h0, reservation_station_8_decoded_instruction_RS1};
  wire              RS1_match_8 =
    io_FU_outputs_0_bits_RD == _GEN_35 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_35
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_35 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_35
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_36 = {58'h0, reservation_station_8_decoded_instruction_RS2};
  wire              RS2_match_8 =
    io_FU_outputs_0_bits_RD == _GEN_36 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_36
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_36 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_36
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_37 = {58'h0, reservation_station_9_decoded_instruction_RS1};
  wire              RS1_match_9 =
    io_FU_outputs_0_bits_RD == _GEN_37 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_37
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_37 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_37
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_38 = {58'h0, reservation_station_9_decoded_instruction_RS2};
  wire              RS2_match_9 =
    io_FU_outputs_0_bits_RD == _GEN_38 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_38
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_38 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_38
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_39 = {58'h0, reservation_station_10_decoded_instruction_RS1};
  wire              RS1_match_10 =
    io_FU_outputs_0_bits_RD == _GEN_39 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_39
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_39 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_39
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_40 = {58'h0, reservation_station_10_decoded_instruction_RS2};
  wire              RS2_match_10 =
    io_FU_outputs_0_bits_RD == _GEN_40 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_40
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_40 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_40
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_41 = {58'h0, reservation_station_11_decoded_instruction_RS1};
  wire              RS1_match_11 =
    io_FU_outputs_0_bits_RD == _GEN_41 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_41
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_41 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_41
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_42 = {58'h0, reservation_station_11_decoded_instruction_RS2};
  wire              RS2_match_11 =
    io_FU_outputs_0_bits_RD == _GEN_42 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_42
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_42 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_42
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_43 = {58'h0, reservation_station_12_decoded_instruction_RS1};
  wire              RS1_match_12 =
    io_FU_outputs_0_bits_RD == _GEN_43 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_43
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_43 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_43
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_44 = {58'h0, reservation_station_12_decoded_instruction_RS2};
  wire              RS2_match_12 =
    io_FU_outputs_0_bits_RD == _GEN_44 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_44
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_44 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_44
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_45 = {58'h0, reservation_station_13_decoded_instruction_RS1};
  wire              RS1_match_13 =
    io_FU_outputs_0_bits_RD == _GEN_45 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_45
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_45 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_45
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_46 = {58'h0, reservation_station_13_decoded_instruction_RS2};
  wire              RS2_match_13 =
    io_FU_outputs_0_bits_RD == _GEN_46 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_46
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_46 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_46
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_47 = {58'h0, reservation_station_14_decoded_instruction_RS1};
  wire              RS1_match_14 =
    io_FU_outputs_0_bits_RD == _GEN_47 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_47
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_47 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_47
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_48 = {58'h0, reservation_station_14_decoded_instruction_RS2};
  wire              RS2_match_14 =
    io_FU_outputs_0_bits_RD == _GEN_48 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_48
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_48 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_48
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_49 = {58'h0, reservation_station_15_decoded_instruction_RS1};
  wire              RS1_match_15 =
    io_FU_outputs_0_bits_RD == _GEN_49 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_49
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_49 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_49
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_50 = {58'h0, reservation_station_15_decoded_instruction_RS2};
  wire              RS2_match_15 =
    io_FU_outputs_0_bits_RD == _GEN_50 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_50
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_50 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_50
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_51 = {58'h0, reservation_station_16_decoded_instruction_RS1};
  wire              RS1_match_16 =
    io_FU_outputs_0_bits_RD == _GEN_51 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_51
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_51 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_51
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_52 = {58'h0, reservation_station_16_decoded_instruction_RS2};
  wire              RS2_match_16 =
    io_FU_outputs_0_bits_RD == _GEN_52 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_52
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_52 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_52
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_53 = {58'h0, reservation_station_17_decoded_instruction_RS1};
  wire              RS1_match_17 =
    io_FU_outputs_0_bits_RD == _GEN_53 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_53
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_53 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_53
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_54 = {58'h0, reservation_station_17_decoded_instruction_RS2};
  wire              RS2_match_17 =
    io_FU_outputs_0_bits_RD == _GEN_54 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_54
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_54 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_54
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_55 = {58'h0, reservation_station_18_decoded_instruction_RS1};
  wire              RS1_match_18 =
    io_FU_outputs_0_bits_RD == _GEN_55 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_55
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_55 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_55
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_56 = {58'h0, reservation_station_18_decoded_instruction_RS2};
  wire              RS2_match_18 =
    io_FU_outputs_0_bits_RD == _GEN_56 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_56
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_56 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_56
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_57 = {58'h0, reservation_station_19_decoded_instruction_RS1};
  wire              RS1_match_19 =
    io_FU_outputs_0_bits_RD == _GEN_57 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_57
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_57 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_57
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire [63:0]       _GEN_58 = {58'h0, reservation_station_19_decoded_instruction_RS2};
  wire              RS2_match_19 =
    io_FU_outputs_0_bits_RD == _GEN_58 & io_FU_outputs_0_bits_RD_valid
    & io_FU_outputs_0_valid | io_FU_outputs_1_bits_RD == _GEN_58
    & io_FU_outputs_1_bits_RD_valid & io_FU_outputs_1_valid
    | io_FU_outputs_2_bits_RD == _GEN_58 & io_FU_outputs_2_bits_RD_valid
    & io_FU_outputs_2_valid | io_FU_outputs_3_bits_RD == _GEN_58
    & io_FU_outputs_3_bits_RD_valid & io_FU_outputs_3_valid;
  wire              schedulable_instructions_0 =
    (reservation_station_0_ready_bits_RS1_ready | RS1_match_0)
    & (reservation_station_0_ready_bits_RS2_ready | RS2_match_0)
    & reservation_station_0_valid;
  wire              schedulable_instructions_1 =
    (reservation_station_1_ready_bits_RS1_ready | RS1_match_1)
    & (reservation_station_1_ready_bits_RS2_ready | RS2_match_1)
    & reservation_station_1_valid;
  wire              schedulable_instructions_2 =
    (reservation_station_2_ready_bits_RS1_ready | RS1_match_2)
    & (reservation_station_2_ready_bits_RS2_ready | RS2_match_2)
    & reservation_station_2_valid;
  wire              schedulable_instructions_3 =
    (reservation_station_3_ready_bits_RS1_ready | RS1_match_3)
    & (reservation_station_3_ready_bits_RS2_ready | RS2_match_3)
    & reservation_station_3_valid;
  wire              schedulable_instructions_4 =
    (reservation_station_4_ready_bits_RS1_ready | RS1_match_4)
    & (reservation_station_4_ready_bits_RS2_ready | RS2_match_4)
    & reservation_station_4_valid;
  wire              schedulable_instructions_5 =
    (reservation_station_5_ready_bits_RS1_ready | RS1_match_5)
    & (reservation_station_5_ready_bits_RS2_ready | RS2_match_5)
    & reservation_station_5_valid;
  wire              schedulable_instructions_6 =
    (reservation_station_6_ready_bits_RS1_ready | RS1_match_6)
    & (reservation_station_6_ready_bits_RS2_ready | RS2_match_6)
    & reservation_station_6_valid;
  wire              schedulable_instructions_7 =
    (reservation_station_7_ready_bits_RS1_ready | RS1_match_7)
    & (reservation_station_7_ready_bits_RS2_ready | RS2_match_7)
    & reservation_station_7_valid;
  wire              schedulable_instructions_8 =
    (reservation_station_8_ready_bits_RS1_ready | RS1_match_8)
    & (reservation_station_8_ready_bits_RS2_ready | RS2_match_8)
    & reservation_station_8_valid;
  wire              schedulable_instructions_9 =
    (reservation_station_9_ready_bits_RS1_ready | RS1_match_9)
    & (reservation_station_9_ready_bits_RS2_ready | RS2_match_9)
    & reservation_station_9_valid;
  wire              schedulable_instructions_10 =
    (reservation_station_10_ready_bits_RS1_ready | RS1_match_10)
    & (reservation_station_10_ready_bits_RS2_ready | RS2_match_10)
    & reservation_station_10_valid;
  wire              schedulable_instructions_11 =
    (reservation_station_11_ready_bits_RS1_ready | RS1_match_11)
    & (reservation_station_11_ready_bits_RS2_ready | RS2_match_11)
    & reservation_station_11_valid;
  wire              schedulable_instructions_12 =
    (reservation_station_12_ready_bits_RS1_ready | RS1_match_12)
    & (reservation_station_12_ready_bits_RS2_ready | RS2_match_12)
    & reservation_station_12_valid;
  wire              schedulable_instructions_13 =
    (reservation_station_13_ready_bits_RS1_ready | RS1_match_13)
    & (reservation_station_13_ready_bits_RS2_ready | RS2_match_13)
    & reservation_station_13_valid;
  wire              schedulable_instructions_14 =
    (reservation_station_14_ready_bits_RS1_ready | RS1_match_14)
    & (reservation_station_14_ready_bits_RS2_ready | RS2_match_14)
    & reservation_station_14_valid;
  wire              schedulable_instructions_15 =
    (reservation_station_15_ready_bits_RS1_ready | RS1_match_15)
    & (reservation_station_15_ready_bits_RS2_ready | RS2_match_15)
    & reservation_station_15_valid;
  wire              schedulable_instructions_16 =
    (reservation_station_16_ready_bits_RS1_ready | RS1_match_16)
    & (reservation_station_16_ready_bits_RS2_ready | RS2_match_16)
    & reservation_station_16_valid;
  wire              schedulable_instructions_17 =
    (reservation_station_17_ready_bits_RS1_ready | RS1_match_17)
    & (reservation_station_17_ready_bits_RS2_ready | RS2_match_17)
    & reservation_station_17_valid;
  wire              schedulable_instructions_18 =
    (reservation_station_18_ready_bits_RS1_ready | RS1_match_18)
    & (reservation_station_18_ready_bits_RS2_ready | RS2_match_18)
    & reservation_station_18_valid;
  wire              schedulable_instructions_19 =
    (reservation_station_19_ready_bits_RS1_ready | RS1_match_19)
    & (reservation_station_19_ready_bits_RS2_ready | RS2_match_19)
    & reservation_station_19_valid;
  wire              _GEN_59 =
    reservation_station_1_decoded_instruction_portID == 2'h0 & schedulable_instructions_1;
  wire              _GEN_60 =
    reservation_station_2_decoded_instruction_portID == 2'h0 & schedulable_instructions_2;
  wire              _GEN_61 =
    reservation_station_3_decoded_instruction_portID == 2'h0 & schedulable_instructions_3;
  wire              _GEN_62 =
    reservation_station_4_decoded_instruction_portID == 2'h0 & schedulable_instructions_4;
  wire              _GEN_63 =
    reservation_station_5_decoded_instruction_portID == 2'h0 & schedulable_instructions_5;
  wire              _GEN_64 =
    reservation_station_6_decoded_instruction_portID == 2'h0 & schedulable_instructions_6;
  wire              _GEN_65 =
    reservation_station_7_decoded_instruction_portID == 2'h0 & schedulable_instructions_7;
  wire              _GEN_66 =
    reservation_station_8_decoded_instruction_portID == 2'h0 & schedulable_instructions_8;
  wire              _GEN_67 =
    reservation_station_9_decoded_instruction_portID == 2'h0 & schedulable_instructions_9;
  wire              _GEN_68 =
    reservation_station_10_decoded_instruction_portID == 2'h0
    & schedulable_instructions_10;
  wire              _GEN_69 =
    reservation_station_11_decoded_instruction_portID == 2'h0
    & schedulable_instructions_11;
  wire              _GEN_70 =
    reservation_station_12_decoded_instruction_portID == 2'h0
    & schedulable_instructions_12;
  wire              _GEN_71 =
    reservation_station_13_decoded_instruction_portID == 2'h0
    & schedulable_instructions_13;
  wire              _GEN_72 =
    reservation_station_14_decoded_instruction_portID == 2'h0
    & schedulable_instructions_14;
  wire              _GEN_73 =
    reservation_station_15_decoded_instruction_portID == 2'h0
    & schedulable_instructions_15;
  wire              _GEN_74 =
    reservation_station_16_decoded_instruction_portID == 2'h0
    & schedulable_instructions_16;
  wire              _GEN_75 =
    reservation_station_17_decoded_instruction_portID == 2'h0
    & schedulable_instructions_17;
  wire              _GEN_76 =
    reservation_station_18_decoded_instruction_portID == 2'h0
    & schedulable_instructions_18;
  wire              _GEN_77 =
    reservation_station_19_decoded_instruction_portID == 2'h0
    & schedulable_instructions_19;
  wire [4:0]        port0_RS_index =
    _GEN_77
      ? 5'h13
      : _GEN_76
          ? 5'h12
          : _GEN_75
              ? 5'h11
              : _GEN_74
                  ? 5'h10
                  : _GEN_73
                      ? 5'hF
                      : _GEN_72
                          ? 5'hE
                          : _GEN_71
                              ? 5'hD
                              : _GEN_70
                                  ? 5'hC
                                  : _GEN_69
                                      ? 5'hB
                                      : _GEN_68
                                          ? 5'hA
                                          : _GEN_67
                                              ? 5'h9
                                              : _GEN_66
                                                  ? 5'h8
                                                  : _GEN_65
                                                      ? 5'h7
                                                      : _GEN_64
                                                          ? 5'h6
                                                          : _GEN_63
                                                              ? 5'h5
                                                              : _GEN_62
                                                                  ? 5'h4
                                                                  : _GEN_61
                                                                      ? 5'h3
                                                                      : _GEN_60
                                                                          ? 5'h2
                                                                          : {4'h0,
                                                                             _GEN_59};
  wire              port0_valid =
    _GEN_77 | _GEN_76 | _GEN_75 | _GEN_74 | _GEN_73 | _GEN_72 | _GEN_71 | _GEN_70
    | _GEN_69 | _GEN_68 | _GEN_67 | _GEN_66 | _GEN_65 | _GEN_64 | _GEN_63 | _GEN_62
    | _GEN_61 | _GEN_60 | _GEN_59
    | reservation_station_0_decoded_instruction_portID == 2'h0
    & schedulable_instructions_0;
  wire              _GEN_78 =
    reservation_station_1_decoded_instruction_portID == 2'h1 & schedulable_instructions_1;
  wire              _GEN_79 =
    reservation_station_2_decoded_instruction_portID == 2'h1 & schedulable_instructions_2;
  wire              _GEN_80 =
    reservation_station_3_decoded_instruction_portID == 2'h1 & schedulable_instructions_3;
  wire              _GEN_81 =
    reservation_station_4_decoded_instruction_portID == 2'h1 & schedulable_instructions_4;
  wire              _GEN_82 =
    reservation_station_5_decoded_instruction_portID == 2'h1 & schedulable_instructions_5;
  wire              _GEN_83 =
    reservation_station_6_decoded_instruction_portID == 2'h1 & schedulable_instructions_6;
  wire              _GEN_84 =
    reservation_station_7_decoded_instruction_portID == 2'h1 & schedulable_instructions_7;
  wire              _GEN_85 =
    reservation_station_8_decoded_instruction_portID == 2'h1 & schedulable_instructions_8;
  wire              _GEN_86 =
    reservation_station_9_decoded_instruction_portID == 2'h1 & schedulable_instructions_9;
  wire              _GEN_87 =
    reservation_station_10_decoded_instruction_portID == 2'h1
    & schedulable_instructions_10;
  wire              _GEN_88 =
    reservation_station_11_decoded_instruction_portID == 2'h1
    & schedulable_instructions_11;
  wire              _GEN_89 =
    reservation_station_12_decoded_instruction_portID == 2'h1
    & schedulable_instructions_12;
  wire              _GEN_90 =
    reservation_station_13_decoded_instruction_portID == 2'h1
    & schedulable_instructions_13;
  wire              _GEN_91 =
    reservation_station_14_decoded_instruction_portID == 2'h1
    & schedulable_instructions_14;
  wire              _GEN_92 =
    reservation_station_15_decoded_instruction_portID == 2'h1
    & schedulable_instructions_15;
  wire              _GEN_93 =
    reservation_station_16_decoded_instruction_portID == 2'h1
    & schedulable_instructions_16;
  wire              _GEN_94 =
    reservation_station_17_decoded_instruction_portID == 2'h1
    & schedulable_instructions_17;
  wire              _GEN_95 =
    reservation_station_18_decoded_instruction_portID == 2'h1
    & schedulable_instructions_18;
  wire              _GEN_96 =
    reservation_station_19_decoded_instruction_portID == 2'h1
    & schedulable_instructions_19;
  wire [4:0]        port1_RS_index =
    _GEN_96
      ? 5'h13
      : _GEN_95
          ? 5'h12
          : _GEN_94
              ? 5'h11
              : _GEN_93
                  ? 5'h10
                  : _GEN_92
                      ? 5'hF
                      : _GEN_91
                          ? 5'hE
                          : _GEN_90
                              ? 5'hD
                              : _GEN_89
                                  ? 5'hC
                                  : _GEN_88
                                      ? 5'hB
                                      : _GEN_87
                                          ? 5'hA
                                          : _GEN_86
                                              ? 5'h9
                                              : _GEN_85
                                                  ? 5'h8
                                                  : _GEN_84
                                                      ? 5'h7
                                                      : _GEN_83
                                                          ? 5'h6
                                                          : _GEN_82
                                                              ? 5'h5
                                                              : _GEN_81
                                                                  ? 5'h4
                                                                  : _GEN_80
                                                                      ? 5'h3
                                                                      : _GEN_79
                                                                          ? 5'h2
                                                                          : {4'h0,
                                                                             _GEN_78};
  wire              port1_valid =
    _GEN_96 | _GEN_95 | _GEN_94 | _GEN_93 | _GEN_92 | _GEN_91 | _GEN_90 | _GEN_89
    | _GEN_88 | _GEN_87 | _GEN_86 | _GEN_85 | _GEN_84 | _GEN_83 | _GEN_82 | _GEN_81
    | _GEN_80 | _GEN_79 | _GEN_78
    | reservation_station_0_decoded_instruction_portID == 2'h1
    & schedulable_instructions_0;
  wire              _GEN_97 =
    reservation_station_1_decoded_instruction_portID == 2'h2 & schedulable_instructions_1;
  wire              _GEN_98 =
    reservation_station_2_decoded_instruction_portID == 2'h2 & schedulable_instructions_2;
  wire              _GEN_99 =
    reservation_station_3_decoded_instruction_portID == 2'h2 & schedulable_instructions_3;
  wire              _GEN_100 =
    reservation_station_4_decoded_instruction_portID == 2'h2 & schedulable_instructions_4;
  wire              _GEN_101 =
    reservation_station_5_decoded_instruction_portID == 2'h2 & schedulable_instructions_5;
  wire              _GEN_102 =
    reservation_station_6_decoded_instruction_portID == 2'h2 & schedulable_instructions_6;
  wire              _GEN_103 =
    reservation_station_7_decoded_instruction_portID == 2'h2 & schedulable_instructions_7;
  wire              _GEN_104 =
    reservation_station_8_decoded_instruction_portID == 2'h2 & schedulable_instructions_8;
  wire              _GEN_105 =
    reservation_station_9_decoded_instruction_portID == 2'h2 & schedulable_instructions_9;
  wire              _GEN_106 =
    reservation_station_10_decoded_instruction_portID == 2'h2
    & schedulable_instructions_10;
  wire              _GEN_107 =
    reservation_station_11_decoded_instruction_portID == 2'h2
    & schedulable_instructions_11;
  wire              _GEN_108 =
    reservation_station_12_decoded_instruction_portID == 2'h2
    & schedulable_instructions_12;
  wire              _GEN_109 =
    reservation_station_13_decoded_instruction_portID == 2'h2
    & schedulable_instructions_13;
  wire              _GEN_110 =
    reservation_station_14_decoded_instruction_portID == 2'h2
    & schedulable_instructions_14;
  wire              _GEN_111 =
    reservation_station_15_decoded_instruction_portID == 2'h2
    & schedulable_instructions_15;
  wire              _GEN_112 =
    reservation_station_16_decoded_instruction_portID == 2'h2
    & schedulable_instructions_16;
  wire              _GEN_113 =
    reservation_station_17_decoded_instruction_portID == 2'h2
    & schedulable_instructions_17;
  wire              _GEN_114 =
    reservation_station_18_decoded_instruction_portID == 2'h2
    & schedulable_instructions_18;
  wire              _GEN_115 =
    reservation_station_19_decoded_instruction_portID == 2'h2
    & schedulable_instructions_19;
  wire [4:0]        port2_RS_index =
    _GEN_115
      ? 5'h13
      : _GEN_114
          ? 5'h12
          : _GEN_113
              ? 5'h11
              : _GEN_112
                  ? 5'h10
                  : _GEN_111
                      ? 5'hF
                      : _GEN_110
                          ? 5'hE
                          : _GEN_109
                              ? 5'hD
                              : _GEN_108
                                  ? 5'hC
                                  : _GEN_107
                                      ? 5'hB
                                      : _GEN_106
                                          ? 5'hA
                                          : _GEN_105
                                              ? 5'h9
                                              : _GEN_104
                                                  ? 5'h8
                                                  : _GEN_103
                                                      ? 5'h7
                                                      : _GEN_102
                                                          ? 5'h6
                                                          : _GEN_101
                                                              ? 5'h5
                                                              : _GEN_100
                                                                  ? 5'h4
                                                                  : _GEN_99
                                                                      ? 5'h3
                                                                      : _GEN_98
                                                                          ? 5'h2
                                                                          : {4'h0,
                                                                             _GEN_97};
  wire              port2_valid =
    _GEN_115 | _GEN_114 | _GEN_113 | _GEN_112 | _GEN_111 | _GEN_110 | _GEN_109 | _GEN_108
    | _GEN_107 | _GEN_106 | _GEN_105 | _GEN_104 | _GEN_103 | _GEN_102 | _GEN_101
    | _GEN_100 | _GEN_99 | _GEN_98 | _GEN_97
    | reservation_station_0_decoded_instruction_portID == 2'h2
    & schedulable_instructions_0;
  wire [31:0]       _GEN_116 =
    {{schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_0},
     {schedulable_instructions_19},
     {schedulable_instructions_18},
     {schedulable_instructions_17},
     {schedulable_instructions_16},
     {schedulable_instructions_15},
     {schedulable_instructions_14},
     {schedulable_instructions_13},
     {schedulable_instructions_12},
     {schedulable_instructions_11},
     {schedulable_instructions_10},
     {schedulable_instructions_9},
     {schedulable_instructions_8},
     {schedulable_instructions_7},
     {schedulable_instructions_6},
     {schedulable_instructions_5},
     {schedulable_instructions_4},
     {schedulable_instructions_3},
     {schedulable_instructions_2},
     {schedulable_instructions_1},
     {schedulable_instructions_0}};
  wire [31:0][5:0]  _GEN_117 =
    {{reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD},
     {reservation_station_19_decoded_instruction_RD},
     {reservation_station_18_decoded_instruction_RD},
     {reservation_station_17_decoded_instruction_RD},
     {reservation_station_16_decoded_instruction_RD},
     {reservation_station_15_decoded_instruction_RD},
     {reservation_station_14_decoded_instruction_RD},
     {reservation_station_13_decoded_instruction_RD},
     {reservation_station_12_decoded_instruction_RD},
     {reservation_station_11_decoded_instruction_RD},
     {reservation_station_10_decoded_instruction_RD},
     {reservation_station_9_decoded_instruction_RD},
     {reservation_station_8_decoded_instruction_RD},
     {reservation_station_7_decoded_instruction_RD},
     {reservation_station_6_decoded_instruction_RD},
     {reservation_station_5_decoded_instruction_RD},
     {reservation_station_4_decoded_instruction_RD},
     {reservation_station_3_decoded_instruction_RD},
     {reservation_station_2_decoded_instruction_RD},
     {reservation_station_1_decoded_instruction_RD},
     {reservation_station_0_decoded_instruction_RD}};
  wire [31:0]       _GEN_118 =
    {{reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid},
     {reservation_station_19_decoded_instruction_RD_valid},
     {reservation_station_18_decoded_instruction_RD_valid},
     {reservation_station_17_decoded_instruction_RD_valid},
     {reservation_station_16_decoded_instruction_RD_valid},
     {reservation_station_15_decoded_instruction_RD_valid},
     {reservation_station_14_decoded_instruction_RD_valid},
     {reservation_station_13_decoded_instruction_RD_valid},
     {reservation_station_12_decoded_instruction_RD_valid},
     {reservation_station_11_decoded_instruction_RD_valid},
     {reservation_station_10_decoded_instruction_RD_valid},
     {reservation_station_9_decoded_instruction_RD_valid},
     {reservation_station_8_decoded_instruction_RD_valid},
     {reservation_station_7_decoded_instruction_RD_valid},
     {reservation_station_6_decoded_instruction_RD_valid},
     {reservation_station_5_decoded_instruction_RD_valid},
     {reservation_station_4_decoded_instruction_RD_valid},
     {reservation_station_3_decoded_instruction_RD_valid},
     {reservation_station_2_decoded_instruction_RD_valid},
     {reservation_station_1_decoded_instruction_RD_valid},
     {reservation_station_0_decoded_instruction_RD_valid}};
  wire [31:0][5:0]  _GEN_119 =
    {{reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1},
     {reservation_station_19_decoded_instruction_RS1},
     {reservation_station_18_decoded_instruction_RS1},
     {reservation_station_17_decoded_instruction_RS1},
     {reservation_station_16_decoded_instruction_RS1},
     {reservation_station_15_decoded_instruction_RS1},
     {reservation_station_14_decoded_instruction_RS1},
     {reservation_station_13_decoded_instruction_RS1},
     {reservation_station_12_decoded_instruction_RS1},
     {reservation_station_11_decoded_instruction_RS1},
     {reservation_station_10_decoded_instruction_RS1},
     {reservation_station_9_decoded_instruction_RS1},
     {reservation_station_8_decoded_instruction_RS1},
     {reservation_station_7_decoded_instruction_RS1},
     {reservation_station_6_decoded_instruction_RS1},
     {reservation_station_5_decoded_instruction_RS1},
     {reservation_station_4_decoded_instruction_RS1},
     {reservation_station_3_decoded_instruction_RS1},
     {reservation_station_2_decoded_instruction_RS1},
     {reservation_station_1_decoded_instruction_RS1},
     {reservation_station_0_decoded_instruction_RS1}};
  wire [31:0][5:0]  _GEN_120 =
    {{reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2},
     {reservation_station_19_decoded_instruction_RS2},
     {reservation_station_18_decoded_instruction_RS2},
     {reservation_station_17_decoded_instruction_RS2},
     {reservation_station_16_decoded_instruction_RS2},
     {reservation_station_15_decoded_instruction_RS2},
     {reservation_station_14_decoded_instruction_RS2},
     {reservation_station_13_decoded_instruction_RS2},
     {reservation_station_12_decoded_instruction_RS2},
     {reservation_station_11_decoded_instruction_RS2},
     {reservation_station_10_decoded_instruction_RS2},
     {reservation_station_9_decoded_instruction_RS2},
     {reservation_station_8_decoded_instruction_RS2},
     {reservation_station_7_decoded_instruction_RS2},
     {reservation_station_6_decoded_instruction_RS2},
     {reservation_station_5_decoded_instruction_RS2},
     {reservation_station_4_decoded_instruction_RS2},
     {reservation_station_3_decoded_instruction_RS2},
     {reservation_station_2_decoded_instruction_RS2},
     {reservation_station_1_decoded_instruction_RS2},
     {reservation_station_0_decoded_instruction_RS2}};
  wire [31:0][31:0] _GEN_121 =
    {{reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM},
     {reservation_station_19_decoded_instruction_IMM},
     {reservation_station_18_decoded_instruction_IMM},
     {reservation_station_17_decoded_instruction_IMM},
     {reservation_station_16_decoded_instruction_IMM},
     {reservation_station_15_decoded_instruction_IMM},
     {reservation_station_14_decoded_instruction_IMM},
     {reservation_station_13_decoded_instruction_IMM},
     {reservation_station_12_decoded_instruction_IMM},
     {reservation_station_11_decoded_instruction_IMM},
     {reservation_station_10_decoded_instruction_IMM},
     {reservation_station_9_decoded_instruction_IMM},
     {reservation_station_8_decoded_instruction_IMM},
     {reservation_station_7_decoded_instruction_IMM},
     {reservation_station_6_decoded_instruction_IMM},
     {reservation_station_5_decoded_instruction_IMM},
     {reservation_station_4_decoded_instruction_IMM},
     {reservation_station_3_decoded_instruction_IMM},
     {reservation_station_2_decoded_instruction_IMM},
     {reservation_station_1_decoded_instruction_IMM},
     {reservation_station_0_decoded_instruction_IMM}};
  wire [31:0][2:0]  _GEN_122 =
    {{reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3},
     {reservation_station_19_decoded_instruction_FUNCT3},
     {reservation_station_18_decoded_instruction_FUNCT3},
     {reservation_station_17_decoded_instruction_FUNCT3},
     {reservation_station_16_decoded_instruction_FUNCT3},
     {reservation_station_15_decoded_instruction_FUNCT3},
     {reservation_station_14_decoded_instruction_FUNCT3},
     {reservation_station_13_decoded_instruction_FUNCT3},
     {reservation_station_12_decoded_instruction_FUNCT3},
     {reservation_station_11_decoded_instruction_FUNCT3},
     {reservation_station_10_decoded_instruction_FUNCT3},
     {reservation_station_9_decoded_instruction_FUNCT3},
     {reservation_station_8_decoded_instruction_FUNCT3},
     {reservation_station_7_decoded_instruction_FUNCT3},
     {reservation_station_6_decoded_instruction_FUNCT3},
     {reservation_station_5_decoded_instruction_FUNCT3},
     {reservation_station_4_decoded_instruction_FUNCT3},
     {reservation_station_3_decoded_instruction_FUNCT3},
     {reservation_station_2_decoded_instruction_FUNCT3},
     {reservation_station_1_decoded_instruction_FUNCT3},
     {reservation_station_0_decoded_instruction_FUNCT3}};
  wire [31:0][3:0]  _GEN_123 =
    {{reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index},
     {reservation_station_19_decoded_instruction_packet_index},
     {reservation_station_18_decoded_instruction_packet_index},
     {reservation_station_17_decoded_instruction_packet_index},
     {reservation_station_16_decoded_instruction_packet_index},
     {reservation_station_15_decoded_instruction_packet_index},
     {reservation_station_14_decoded_instruction_packet_index},
     {reservation_station_13_decoded_instruction_packet_index},
     {reservation_station_12_decoded_instruction_packet_index},
     {reservation_station_11_decoded_instruction_packet_index},
     {reservation_station_10_decoded_instruction_packet_index},
     {reservation_station_9_decoded_instruction_packet_index},
     {reservation_station_8_decoded_instruction_packet_index},
     {reservation_station_7_decoded_instruction_packet_index},
     {reservation_station_6_decoded_instruction_packet_index},
     {reservation_station_5_decoded_instruction_packet_index},
     {reservation_station_4_decoded_instruction_packet_index},
     {reservation_station_3_decoded_instruction_packet_index},
     {reservation_station_2_decoded_instruction_packet_index},
     {reservation_station_1_decoded_instruction_packet_index},
     {reservation_station_0_decoded_instruction_packet_index}};
  wire [31:0][4:0]  _GEN_124 =
    {{reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType},
     {reservation_station_19_decoded_instruction_instructionType},
     {reservation_station_18_decoded_instruction_instructionType},
     {reservation_station_17_decoded_instruction_instructionType},
     {reservation_station_16_decoded_instruction_instructionType},
     {reservation_station_15_decoded_instruction_instructionType},
     {reservation_station_14_decoded_instruction_instructionType},
     {reservation_station_13_decoded_instruction_instructionType},
     {reservation_station_12_decoded_instruction_instructionType},
     {reservation_station_11_decoded_instruction_instructionType},
     {reservation_station_10_decoded_instruction_instructionType},
     {reservation_station_9_decoded_instruction_instructionType},
     {reservation_station_8_decoded_instruction_instructionType},
     {reservation_station_7_decoded_instruction_instructionType},
     {reservation_station_6_decoded_instruction_instructionType},
     {reservation_station_5_decoded_instruction_instructionType},
     {reservation_station_4_decoded_instruction_instructionType},
     {reservation_station_3_decoded_instruction_instructionType},
     {reservation_station_2_decoded_instruction_instructionType},
     {reservation_station_1_decoded_instruction_instructionType},
     {reservation_station_0_decoded_instruction_instructionType}};
  wire [31:0]       _GEN_125 =
    {{reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU},
     {reservation_station_19_decoded_instruction_needs_ALU},
     {reservation_station_18_decoded_instruction_needs_ALU},
     {reservation_station_17_decoded_instruction_needs_ALU},
     {reservation_station_16_decoded_instruction_needs_ALU},
     {reservation_station_15_decoded_instruction_needs_ALU},
     {reservation_station_14_decoded_instruction_needs_ALU},
     {reservation_station_13_decoded_instruction_needs_ALU},
     {reservation_station_12_decoded_instruction_needs_ALU},
     {reservation_station_11_decoded_instruction_needs_ALU},
     {reservation_station_10_decoded_instruction_needs_ALU},
     {reservation_station_9_decoded_instruction_needs_ALU},
     {reservation_station_8_decoded_instruction_needs_ALU},
     {reservation_station_7_decoded_instruction_needs_ALU},
     {reservation_station_6_decoded_instruction_needs_ALU},
     {reservation_station_5_decoded_instruction_needs_ALU},
     {reservation_station_4_decoded_instruction_needs_ALU},
     {reservation_station_3_decoded_instruction_needs_ALU},
     {reservation_station_2_decoded_instruction_needs_ALU},
     {reservation_station_1_decoded_instruction_needs_ALU},
     {reservation_station_0_decoded_instruction_needs_ALU}};
  wire [31:0]       _GEN_126 =
    {{reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT},
     {reservation_station_19_decoded_instruction_SUBTRACT},
     {reservation_station_18_decoded_instruction_SUBTRACT},
     {reservation_station_17_decoded_instruction_SUBTRACT},
     {reservation_station_16_decoded_instruction_SUBTRACT},
     {reservation_station_15_decoded_instruction_SUBTRACT},
     {reservation_station_14_decoded_instruction_SUBTRACT},
     {reservation_station_13_decoded_instruction_SUBTRACT},
     {reservation_station_12_decoded_instruction_SUBTRACT},
     {reservation_station_11_decoded_instruction_SUBTRACT},
     {reservation_station_10_decoded_instruction_SUBTRACT},
     {reservation_station_9_decoded_instruction_SUBTRACT},
     {reservation_station_8_decoded_instruction_SUBTRACT},
     {reservation_station_7_decoded_instruction_SUBTRACT},
     {reservation_station_6_decoded_instruction_SUBTRACT},
     {reservation_station_5_decoded_instruction_SUBTRACT},
     {reservation_station_4_decoded_instruction_SUBTRACT},
     {reservation_station_3_decoded_instruction_SUBTRACT},
     {reservation_station_2_decoded_instruction_SUBTRACT},
     {reservation_station_1_decoded_instruction_SUBTRACT},
     {reservation_station_0_decoded_instruction_SUBTRACT}};
  wire [31:0]       _GEN_127 =
    {{reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY},
     {reservation_station_19_decoded_instruction_MULTIPLY},
     {reservation_station_18_decoded_instruction_MULTIPLY},
     {reservation_station_17_decoded_instruction_MULTIPLY},
     {reservation_station_16_decoded_instruction_MULTIPLY},
     {reservation_station_15_decoded_instruction_MULTIPLY},
     {reservation_station_14_decoded_instruction_MULTIPLY},
     {reservation_station_13_decoded_instruction_MULTIPLY},
     {reservation_station_12_decoded_instruction_MULTIPLY},
     {reservation_station_11_decoded_instruction_MULTIPLY},
     {reservation_station_10_decoded_instruction_MULTIPLY},
     {reservation_station_9_decoded_instruction_MULTIPLY},
     {reservation_station_8_decoded_instruction_MULTIPLY},
     {reservation_station_7_decoded_instruction_MULTIPLY},
     {reservation_station_6_decoded_instruction_MULTIPLY},
     {reservation_station_5_decoded_instruction_MULTIPLY},
     {reservation_station_4_decoded_instruction_MULTIPLY},
     {reservation_station_3_decoded_instruction_MULTIPLY},
     {reservation_station_2_decoded_instruction_MULTIPLY},
     {reservation_station_1_decoded_instruction_MULTIPLY},
     {reservation_station_0_decoded_instruction_MULTIPLY}};
  wire [31:0]       _GEN_128 =
    {{reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE},
     {reservation_station_19_decoded_instruction_IMMEDIATE},
     {reservation_station_18_decoded_instruction_IMMEDIATE},
     {reservation_station_17_decoded_instruction_IMMEDIATE},
     {reservation_station_16_decoded_instruction_IMMEDIATE},
     {reservation_station_15_decoded_instruction_IMMEDIATE},
     {reservation_station_14_decoded_instruction_IMMEDIATE},
     {reservation_station_13_decoded_instruction_IMMEDIATE},
     {reservation_station_12_decoded_instruction_IMMEDIATE},
     {reservation_station_11_decoded_instruction_IMMEDIATE},
     {reservation_station_10_decoded_instruction_IMMEDIATE},
     {reservation_station_9_decoded_instruction_IMMEDIATE},
     {reservation_station_8_decoded_instruction_IMMEDIATE},
     {reservation_station_7_decoded_instruction_IMMEDIATE},
     {reservation_station_6_decoded_instruction_IMMEDIATE},
     {reservation_station_5_decoded_instruction_IMMEDIATE},
     {reservation_station_4_decoded_instruction_IMMEDIATE},
     {reservation_station_3_decoded_instruction_IMMEDIATE},
     {reservation_station_2_decoded_instruction_IMMEDIATE},
     {reservation_station_1_decoded_instruction_IMMEDIATE},
     {reservation_station_0_decoded_instruction_IMMEDIATE}};
  always @(posedge clock) begin
    if (reset) begin
      reservation_station_0_decoded_instruction_RD <= 6'h0;
      reservation_station_0_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_0_decoded_instruction_RS1 <= 6'h0;
      reservation_station_0_decoded_instruction_RS2 <= 6'h0;
      reservation_station_0_decoded_instruction_IMM <= 32'h0;
      reservation_station_0_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_0_decoded_instruction_packet_index <= 4'h0;
      reservation_station_0_decoded_instruction_instructionType <= 5'h0;
      reservation_station_0_decoded_instruction_portID <= 2'h0;
      reservation_station_0_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_0_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_0_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_0_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_0_ready_bits_RS1_ready <= 1'h0;
      reservation_station_0_ready_bits_RS2_ready <= 1'h0;
      reservation_station_0_valid <= 1'h0;
      reservation_station_1_decoded_instruction_RD <= 6'h0;
      reservation_station_1_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_1_decoded_instruction_RS1 <= 6'h0;
      reservation_station_1_decoded_instruction_RS2 <= 6'h0;
      reservation_station_1_decoded_instruction_IMM <= 32'h0;
      reservation_station_1_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_1_decoded_instruction_packet_index <= 4'h0;
      reservation_station_1_decoded_instruction_instructionType <= 5'h0;
      reservation_station_1_decoded_instruction_portID <= 2'h0;
      reservation_station_1_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_1_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_1_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_1_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_1_ready_bits_RS1_ready <= 1'h0;
      reservation_station_1_ready_bits_RS2_ready <= 1'h0;
      reservation_station_1_valid <= 1'h0;
      reservation_station_2_decoded_instruction_RD <= 6'h0;
      reservation_station_2_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_2_decoded_instruction_RS1 <= 6'h0;
      reservation_station_2_decoded_instruction_RS2 <= 6'h0;
      reservation_station_2_decoded_instruction_IMM <= 32'h0;
      reservation_station_2_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_2_decoded_instruction_packet_index <= 4'h0;
      reservation_station_2_decoded_instruction_instructionType <= 5'h0;
      reservation_station_2_decoded_instruction_portID <= 2'h0;
      reservation_station_2_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_2_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_2_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_2_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_2_ready_bits_RS1_ready <= 1'h0;
      reservation_station_2_ready_bits_RS2_ready <= 1'h0;
      reservation_station_2_valid <= 1'h0;
      reservation_station_3_decoded_instruction_RD <= 6'h0;
      reservation_station_3_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_3_decoded_instruction_RS1 <= 6'h0;
      reservation_station_3_decoded_instruction_RS2 <= 6'h0;
      reservation_station_3_decoded_instruction_IMM <= 32'h0;
      reservation_station_3_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_3_decoded_instruction_packet_index <= 4'h0;
      reservation_station_3_decoded_instruction_instructionType <= 5'h0;
      reservation_station_3_decoded_instruction_portID <= 2'h0;
      reservation_station_3_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_3_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_3_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_3_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_3_ready_bits_RS1_ready <= 1'h0;
      reservation_station_3_ready_bits_RS2_ready <= 1'h0;
      reservation_station_3_valid <= 1'h0;
      reservation_station_4_decoded_instruction_RD <= 6'h0;
      reservation_station_4_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_4_decoded_instruction_RS1 <= 6'h0;
      reservation_station_4_decoded_instruction_RS2 <= 6'h0;
      reservation_station_4_decoded_instruction_IMM <= 32'h0;
      reservation_station_4_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_4_decoded_instruction_packet_index <= 4'h0;
      reservation_station_4_decoded_instruction_instructionType <= 5'h0;
      reservation_station_4_decoded_instruction_portID <= 2'h0;
      reservation_station_4_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_4_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_4_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_4_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_4_ready_bits_RS1_ready <= 1'h0;
      reservation_station_4_ready_bits_RS2_ready <= 1'h0;
      reservation_station_4_valid <= 1'h0;
      reservation_station_5_decoded_instruction_RD <= 6'h0;
      reservation_station_5_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_5_decoded_instruction_RS1 <= 6'h0;
      reservation_station_5_decoded_instruction_RS2 <= 6'h0;
      reservation_station_5_decoded_instruction_IMM <= 32'h0;
      reservation_station_5_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_5_decoded_instruction_packet_index <= 4'h0;
      reservation_station_5_decoded_instruction_instructionType <= 5'h0;
      reservation_station_5_decoded_instruction_portID <= 2'h0;
      reservation_station_5_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_5_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_5_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_5_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_5_ready_bits_RS1_ready <= 1'h0;
      reservation_station_5_ready_bits_RS2_ready <= 1'h0;
      reservation_station_5_valid <= 1'h0;
      reservation_station_6_decoded_instruction_RD <= 6'h0;
      reservation_station_6_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_6_decoded_instruction_RS1 <= 6'h0;
      reservation_station_6_decoded_instruction_RS2 <= 6'h0;
      reservation_station_6_decoded_instruction_IMM <= 32'h0;
      reservation_station_6_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_6_decoded_instruction_packet_index <= 4'h0;
      reservation_station_6_decoded_instruction_instructionType <= 5'h0;
      reservation_station_6_decoded_instruction_portID <= 2'h0;
      reservation_station_6_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_6_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_6_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_6_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_6_ready_bits_RS1_ready <= 1'h0;
      reservation_station_6_ready_bits_RS2_ready <= 1'h0;
      reservation_station_6_valid <= 1'h0;
      reservation_station_7_decoded_instruction_RD <= 6'h0;
      reservation_station_7_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_7_decoded_instruction_RS1 <= 6'h0;
      reservation_station_7_decoded_instruction_RS2 <= 6'h0;
      reservation_station_7_decoded_instruction_IMM <= 32'h0;
      reservation_station_7_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_7_decoded_instruction_packet_index <= 4'h0;
      reservation_station_7_decoded_instruction_instructionType <= 5'h0;
      reservation_station_7_decoded_instruction_portID <= 2'h0;
      reservation_station_7_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_7_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_7_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_7_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_7_ready_bits_RS1_ready <= 1'h0;
      reservation_station_7_ready_bits_RS2_ready <= 1'h0;
      reservation_station_7_valid <= 1'h0;
      reservation_station_8_decoded_instruction_RD <= 6'h0;
      reservation_station_8_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_8_decoded_instruction_RS1 <= 6'h0;
      reservation_station_8_decoded_instruction_RS2 <= 6'h0;
      reservation_station_8_decoded_instruction_IMM <= 32'h0;
      reservation_station_8_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_8_decoded_instruction_packet_index <= 4'h0;
      reservation_station_8_decoded_instruction_instructionType <= 5'h0;
      reservation_station_8_decoded_instruction_portID <= 2'h0;
      reservation_station_8_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_8_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_8_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_8_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_8_ready_bits_RS1_ready <= 1'h0;
      reservation_station_8_ready_bits_RS2_ready <= 1'h0;
      reservation_station_8_valid <= 1'h0;
      reservation_station_9_decoded_instruction_RD <= 6'h0;
      reservation_station_9_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_9_decoded_instruction_RS1 <= 6'h0;
      reservation_station_9_decoded_instruction_RS2 <= 6'h0;
      reservation_station_9_decoded_instruction_IMM <= 32'h0;
      reservation_station_9_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_9_decoded_instruction_packet_index <= 4'h0;
      reservation_station_9_decoded_instruction_instructionType <= 5'h0;
      reservation_station_9_decoded_instruction_portID <= 2'h0;
      reservation_station_9_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_9_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_9_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_9_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_9_ready_bits_RS1_ready <= 1'h0;
      reservation_station_9_ready_bits_RS2_ready <= 1'h0;
      reservation_station_9_valid <= 1'h0;
      reservation_station_10_decoded_instruction_RD <= 6'h0;
      reservation_station_10_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_10_decoded_instruction_RS1 <= 6'h0;
      reservation_station_10_decoded_instruction_RS2 <= 6'h0;
      reservation_station_10_decoded_instruction_IMM <= 32'h0;
      reservation_station_10_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_10_decoded_instruction_packet_index <= 4'h0;
      reservation_station_10_decoded_instruction_instructionType <= 5'h0;
      reservation_station_10_decoded_instruction_portID <= 2'h0;
      reservation_station_10_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_10_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_10_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_10_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_10_ready_bits_RS1_ready <= 1'h0;
      reservation_station_10_ready_bits_RS2_ready <= 1'h0;
      reservation_station_10_valid <= 1'h0;
      reservation_station_11_decoded_instruction_RD <= 6'h0;
      reservation_station_11_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_11_decoded_instruction_RS1 <= 6'h0;
      reservation_station_11_decoded_instruction_RS2 <= 6'h0;
      reservation_station_11_decoded_instruction_IMM <= 32'h0;
      reservation_station_11_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_11_decoded_instruction_packet_index <= 4'h0;
      reservation_station_11_decoded_instruction_instructionType <= 5'h0;
      reservation_station_11_decoded_instruction_portID <= 2'h0;
      reservation_station_11_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_11_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_11_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_11_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_11_ready_bits_RS1_ready <= 1'h0;
      reservation_station_11_ready_bits_RS2_ready <= 1'h0;
      reservation_station_11_valid <= 1'h0;
      reservation_station_12_decoded_instruction_RD <= 6'h0;
      reservation_station_12_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_12_decoded_instruction_RS1 <= 6'h0;
      reservation_station_12_decoded_instruction_RS2 <= 6'h0;
      reservation_station_12_decoded_instruction_IMM <= 32'h0;
      reservation_station_12_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_12_decoded_instruction_packet_index <= 4'h0;
      reservation_station_12_decoded_instruction_instructionType <= 5'h0;
      reservation_station_12_decoded_instruction_portID <= 2'h0;
      reservation_station_12_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_12_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_12_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_12_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_12_ready_bits_RS1_ready <= 1'h0;
      reservation_station_12_ready_bits_RS2_ready <= 1'h0;
      reservation_station_12_valid <= 1'h0;
      reservation_station_13_decoded_instruction_RD <= 6'h0;
      reservation_station_13_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_13_decoded_instruction_RS1 <= 6'h0;
      reservation_station_13_decoded_instruction_RS2 <= 6'h0;
      reservation_station_13_decoded_instruction_IMM <= 32'h0;
      reservation_station_13_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_13_decoded_instruction_packet_index <= 4'h0;
      reservation_station_13_decoded_instruction_instructionType <= 5'h0;
      reservation_station_13_decoded_instruction_portID <= 2'h0;
      reservation_station_13_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_13_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_13_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_13_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_13_ready_bits_RS1_ready <= 1'h0;
      reservation_station_13_ready_bits_RS2_ready <= 1'h0;
      reservation_station_13_valid <= 1'h0;
      reservation_station_14_decoded_instruction_RD <= 6'h0;
      reservation_station_14_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_14_decoded_instruction_RS1 <= 6'h0;
      reservation_station_14_decoded_instruction_RS2 <= 6'h0;
      reservation_station_14_decoded_instruction_IMM <= 32'h0;
      reservation_station_14_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_14_decoded_instruction_packet_index <= 4'h0;
      reservation_station_14_decoded_instruction_instructionType <= 5'h0;
      reservation_station_14_decoded_instruction_portID <= 2'h0;
      reservation_station_14_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_14_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_14_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_14_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_14_ready_bits_RS1_ready <= 1'h0;
      reservation_station_14_ready_bits_RS2_ready <= 1'h0;
      reservation_station_14_valid <= 1'h0;
      reservation_station_15_decoded_instruction_RD <= 6'h0;
      reservation_station_15_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_15_decoded_instruction_RS1 <= 6'h0;
      reservation_station_15_decoded_instruction_RS2 <= 6'h0;
      reservation_station_15_decoded_instruction_IMM <= 32'h0;
      reservation_station_15_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_15_decoded_instruction_packet_index <= 4'h0;
      reservation_station_15_decoded_instruction_instructionType <= 5'h0;
      reservation_station_15_decoded_instruction_portID <= 2'h0;
      reservation_station_15_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_15_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_15_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_15_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_15_ready_bits_RS1_ready <= 1'h0;
      reservation_station_15_ready_bits_RS2_ready <= 1'h0;
      reservation_station_15_valid <= 1'h0;
      reservation_station_16_decoded_instruction_RD <= 6'h0;
      reservation_station_16_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_16_decoded_instruction_RS1 <= 6'h0;
      reservation_station_16_decoded_instruction_RS2 <= 6'h0;
      reservation_station_16_decoded_instruction_IMM <= 32'h0;
      reservation_station_16_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_16_decoded_instruction_packet_index <= 4'h0;
      reservation_station_16_decoded_instruction_instructionType <= 5'h0;
      reservation_station_16_decoded_instruction_portID <= 2'h0;
      reservation_station_16_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_16_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_16_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_16_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_16_ready_bits_RS1_ready <= 1'h0;
      reservation_station_16_ready_bits_RS2_ready <= 1'h0;
      reservation_station_16_valid <= 1'h0;
      reservation_station_17_decoded_instruction_RD <= 6'h0;
      reservation_station_17_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_17_decoded_instruction_RS1 <= 6'h0;
      reservation_station_17_decoded_instruction_RS2 <= 6'h0;
      reservation_station_17_decoded_instruction_IMM <= 32'h0;
      reservation_station_17_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_17_decoded_instruction_packet_index <= 4'h0;
      reservation_station_17_decoded_instruction_instructionType <= 5'h0;
      reservation_station_17_decoded_instruction_portID <= 2'h0;
      reservation_station_17_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_17_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_17_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_17_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_17_ready_bits_RS1_ready <= 1'h0;
      reservation_station_17_ready_bits_RS2_ready <= 1'h0;
      reservation_station_17_valid <= 1'h0;
      reservation_station_18_decoded_instruction_RD <= 6'h0;
      reservation_station_18_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_18_decoded_instruction_RS1 <= 6'h0;
      reservation_station_18_decoded_instruction_RS2 <= 6'h0;
      reservation_station_18_decoded_instruction_IMM <= 32'h0;
      reservation_station_18_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_18_decoded_instruction_packet_index <= 4'h0;
      reservation_station_18_decoded_instruction_instructionType <= 5'h0;
      reservation_station_18_decoded_instruction_portID <= 2'h0;
      reservation_station_18_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_18_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_18_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_18_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_18_ready_bits_RS1_ready <= 1'h0;
      reservation_station_18_ready_bits_RS2_ready <= 1'h0;
      reservation_station_18_valid <= 1'h0;
      reservation_station_19_decoded_instruction_RD <= 6'h0;
      reservation_station_19_decoded_instruction_RD_valid <= 1'h0;
      reservation_station_19_decoded_instruction_RS1 <= 6'h0;
      reservation_station_19_decoded_instruction_RS2 <= 6'h0;
      reservation_station_19_decoded_instruction_IMM <= 32'h0;
      reservation_station_19_decoded_instruction_FUNCT3 <= 3'h0;
      reservation_station_19_decoded_instruction_packet_index <= 4'h0;
      reservation_station_19_decoded_instruction_instructionType <= 5'h0;
      reservation_station_19_decoded_instruction_portID <= 2'h0;
      reservation_station_19_decoded_instruction_needs_ALU <= 1'h0;
      reservation_station_19_decoded_instruction_SUBTRACT <= 1'h0;
      reservation_station_19_decoded_instruction_MULTIPLY <= 1'h0;
      reservation_station_19_decoded_instruction_IMMEDIATE <= 1'h0;
      reservation_station_19_ready_bits_RS1_ready <= 1'h0;
      reservation_station_19_ready_bits_RS2_ready <= 1'h0;
      reservation_station_19_valid <= 1'h0;
    end
    else begin
      automatic logic _GEN_129 =
        ~reservation_station_0_ready_bits_RS2_ready & reservation_station_0_valid
          ? RS2_match_0
          : reservation_station_0_ready_bits_RS2_ready;
      automatic logic _GEN_130 =
        ~reservation_station_1_ready_bits_RS2_ready & reservation_station_1_valid
          ? RS2_match_1
          : reservation_station_1_ready_bits_RS2_ready;
      automatic logic _GEN_131 =
        ~reservation_station_2_ready_bits_RS2_ready & reservation_station_2_valid
          ? RS2_match_2
          : reservation_station_2_ready_bits_RS2_ready;
      automatic logic _GEN_132 =
        ~reservation_station_3_ready_bits_RS2_ready & reservation_station_3_valid
          ? RS2_match_3
          : reservation_station_3_ready_bits_RS2_ready;
      automatic logic _GEN_133 =
        ~reservation_station_4_ready_bits_RS2_ready & reservation_station_4_valid
          ? RS2_match_4
          : reservation_station_4_ready_bits_RS2_ready;
      automatic logic _GEN_134 =
        ~reservation_station_5_ready_bits_RS2_ready & reservation_station_5_valid
          ? RS2_match_5
          : reservation_station_5_ready_bits_RS2_ready;
      automatic logic _GEN_135 =
        ~reservation_station_6_ready_bits_RS2_ready & reservation_station_6_valid
          ? RS2_match_6
          : reservation_station_6_ready_bits_RS2_ready;
      automatic logic _GEN_136 =
        ~reservation_station_7_ready_bits_RS2_ready & reservation_station_7_valid
          ? RS2_match_7
          : reservation_station_7_ready_bits_RS2_ready;
      automatic logic _GEN_137 =
        ~reservation_station_8_ready_bits_RS2_ready & reservation_station_8_valid
          ? RS2_match_8
          : reservation_station_8_ready_bits_RS2_ready;
      automatic logic _GEN_138 =
        ~reservation_station_9_ready_bits_RS2_ready & reservation_station_9_valid
          ? RS2_match_9
          : reservation_station_9_ready_bits_RS2_ready;
      automatic logic _GEN_139 =
        ~reservation_station_10_ready_bits_RS2_ready & reservation_station_10_valid
          ? RS2_match_10
          : reservation_station_10_ready_bits_RS2_ready;
      automatic logic _GEN_140 =
        ~reservation_station_11_ready_bits_RS2_ready & reservation_station_11_valid
          ? RS2_match_11
          : reservation_station_11_ready_bits_RS2_ready;
      automatic logic _GEN_141 =
        ~reservation_station_12_ready_bits_RS2_ready & reservation_station_12_valid
          ? RS2_match_12
          : reservation_station_12_ready_bits_RS2_ready;
      automatic logic _GEN_142 =
        ~reservation_station_13_ready_bits_RS2_ready & reservation_station_13_valid
          ? RS2_match_13
          : reservation_station_13_ready_bits_RS2_ready;
      automatic logic _GEN_143 =
        ~reservation_station_14_ready_bits_RS2_ready & reservation_station_14_valid
          ? RS2_match_14
          : reservation_station_14_ready_bits_RS2_ready;
      automatic logic _GEN_144 =
        ~reservation_station_15_ready_bits_RS2_ready & reservation_station_15_valid
          ? RS2_match_15
          : reservation_station_15_ready_bits_RS2_ready;
      automatic logic _GEN_145 =
        ~reservation_station_16_ready_bits_RS2_ready & reservation_station_16_valid
          ? RS2_match_16
          : reservation_station_16_ready_bits_RS2_ready;
      automatic logic _GEN_146 =
        ~reservation_station_17_ready_bits_RS2_ready & reservation_station_17_valid
          ? RS2_match_17
          : reservation_station_17_ready_bits_RS2_ready;
      automatic logic _GEN_147 =
        ~reservation_station_18_ready_bits_RS2_ready & reservation_station_18_valid
          ? RS2_match_18
          : reservation_station_18_ready_bits_RS2_ready;
      automatic logic _GEN_148 =
        ~reservation_station_19_ready_bits_RS2_ready & reservation_station_19_valid
          ? RS2_match_19
          : reservation_station_19_ready_bits_RS2_ready;
      automatic logic _GEN_149 =
        ~reservation_station_0_ready_bits_RS1_ready & reservation_station_0_valid
          ? RS1_match_0
          : reservation_station_0_ready_bits_RS1_ready;
      automatic logic _GEN_150 =
        ~reservation_station_1_ready_bits_RS1_ready & reservation_station_1_valid
          ? RS1_match_1
          : reservation_station_1_ready_bits_RS1_ready;
      automatic logic _GEN_151 =
        ~reservation_station_2_ready_bits_RS1_ready & reservation_station_2_valid
          ? RS1_match_2
          : reservation_station_2_ready_bits_RS1_ready;
      automatic logic _GEN_152 =
        ~reservation_station_3_ready_bits_RS1_ready & reservation_station_3_valid
          ? RS1_match_3
          : reservation_station_3_ready_bits_RS1_ready;
      automatic logic _GEN_153 =
        ~reservation_station_4_ready_bits_RS1_ready & reservation_station_4_valid
          ? RS1_match_4
          : reservation_station_4_ready_bits_RS1_ready;
      automatic logic _GEN_154 =
        ~reservation_station_5_ready_bits_RS1_ready & reservation_station_5_valid
          ? RS1_match_5
          : reservation_station_5_ready_bits_RS1_ready;
      automatic logic _GEN_155 =
        ~reservation_station_6_ready_bits_RS1_ready & reservation_station_6_valid
          ? RS1_match_6
          : reservation_station_6_ready_bits_RS1_ready;
      automatic logic _GEN_156 =
        ~reservation_station_7_ready_bits_RS1_ready & reservation_station_7_valid
          ? RS1_match_7
          : reservation_station_7_ready_bits_RS1_ready;
      automatic logic _GEN_157 =
        ~reservation_station_8_ready_bits_RS1_ready & reservation_station_8_valid
          ? RS1_match_8
          : reservation_station_8_ready_bits_RS1_ready;
      automatic logic _GEN_158 =
        ~reservation_station_9_ready_bits_RS1_ready & reservation_station_9_valid
          ? RS1_match_9
          : reservation_station_9_ready_bits_RS1_ready;
      automatic logic _GEN_159 =
        ~reservation_station_10_ready_bits_RS1_ready & reservation_station_10_valid
          ? RS1_match_10
          : reservation_station_10_ready_bits_RS1_ready;
      automatic logic _GEN_160 =
        ~reservation_station_11_ready_bits_RS1_ready & reservation_station_11_valid
          ? RS1_match_11
          : reservation_station_11_ready_bits_RS1_ready;
      automatic logic _GEN_161 =
        ~reservation_station_12_ready_bits_RS1_ready & reservation_station_12_valid
          ? RS1_match_12
          : reservation_station_12_ready_bits_RS1_ready;
      automatic logic _GEN_162 =
        ~reservation_station_13_ready_bits_RS1_ready & reservation_station_13_valid
          ? RS1_match_13
          : reservation_station_13_ready_bits_RS1_ready;
      automatic logic _GEN_163 =
        ~reservation_station_14_ready_bits_RS1_ready & reservation_station_14_valid
          ? RS1_match_14
          : reservation_station_14_ready_bits_RS1_ready;
      automatic logic _GEN_164 =
        ~reservation_station_15_ready_bits_RS1_ready & reservation_station_15_valid
          ? RS1_match_15
          : reservation_station_15_ready_bits_RS1_ready;
      automatic logic _GEN_165 =
        ~reservation_station_16_ready_bits_RS1_ready & reservation_station_16_valid
          ? RS1_match_16
          : reservation_station_16_ready_bits_RS1_ready;
      automatic logic _GEN_166 =
        ~reservation_station_17_ready_bits_RS1_ready & reservation_station_17_valid
          ? RS1_match_17
          : reservation_station_17_ready_bits_RS1_ready;
      automatic logic _GEN_167 =
        ~reservation_station_18_ready_bits_RS1_ready & reservation_station_18_valid
          ? RS1_match_18
          : reservation_station_18_ready_bits_RS1_ready;
      automatic logic _GEN_168 =
        ~reservation_station_19_ready_bits_RS1_ready & reservation_station_19_valid
          ? RS1_match_19
          : reservation_station_19_ready_bits_RS1_ready;
      automatic logic _GEN_169 = _GEN_116[port0_RS_index] & port0_valid;
      automatic logic _GEN_170 = _GEN_169 & port0_RS_index == 5'h0;
      automatic logic _GEN_171 = _GEN_169 & port0_RS_index == 5'h1;
      automatic logic _GEN_172 = _GEN_169 & port0_RS_index == 5'h2;
      automatic logic _GEN_173 = _GEN_169 & port0_RS_index == 5'h3;
      automatic logic _GEN_174 = _GEN_169 & port0_RS_index == 5'h4;
      automatic logic _GEN_175 = _GEN_169 & port0_RS_index == 5'h5;
      automatic logic _GEN_176 = _GEN_169 & port0_RS_index == 5'h6;
      automatic logic _GEN_177 = _GEN_169 & port0_RS_index == 5'h7;
      automatic logic _GEN_178 = _GEN_169 & port0_RS_index == 5'h8;
      automatic logic _GEN_179 = _GEN_169 & port0_RS_index == 5'h9;
      automatic logic _GEN_180 = _GEN_169 & port0_RS_index == 5'hA;
      automatic logic _GEN_181 = _GEN_169 & port0_RS_index == 5'hB;
      automatic logic _GEN_182 = _GEN_169 & port0_RS_index == 5'hC;
      automatic logic _GEN_183 = _GEN_169 & port0_RS_index == 5'hD;
      automatic logic _GEN_184 = _GEN_169 & port0_RS_index == 5'hE;
      automatic logic _GEN_185 = _GEN_169 & port0_RS_index == 5'hF;
      automatic logic _GEN_186 = _GEN_169 & port0_RS_index == 5'h10;
      automatic logic _GEN_187 = _GEN_169 & port0_RS_index == 5'h11;
      automatic logic _GEN_188 = _GEN_169 & port0_RS_index == 5'h12;
      automatic logic _GEN_189 = _GEN_169 & port0_RS_index == 5'h13;
      automatic logic _GEN_190 = _GEN_116[port1_RS_index] & port1_valid;
      automatic logic _GEN_191 = port1_RS_index == 5'h0;
      automatic logic _GEN_192 = port1_RS_index == 5'h1;
      automatic logic _GEN_193 = port1_RS_index == 5'h2;
      automatic logic _GEN_194 = port1_RS_index == 5'h3;
      automatic logic _GEN_195 = port1_RS_index == 5'h4;
      automatic logic _GEN_196 = port1_RS_index == 5'h5;
      automatic logic _GEN_197 = port1_RS_index == 5'h6;
      automatic logic _GEN_198 = port1_RS_index == 5'h7;
      automatic logic _GEN_199 = port1_RS_index == 5'h8;
      automatic logic _GEN_200 = port1_RS_index == 5'h9;
      automatic logic _GEN_201 = port1_RS_index == 5'hA;
      automatic logic _GEN_202 = port1_RS_index == 5'hB;
      automatic logic _GEN_203 = port1_RS_index == 5'hC;
      automatic logic _GEN_204 = port1_RS_index == 5'hD;
      automatic logic _GEN_205 = port1_RS_index == 5'hE;
      automatic logic _GEN_206 = port1_RS_index == 5'hF;
      automatic logic _GEN_207 = port1_RS_index == 5'h10;
      automatic logic _GEN_208 = port1_RS_index == 5'h11;
      automatic logic _GEN_209 = port1_RS_index == 5'h12;
      automatic logic _GEN_210 = port1_RS_index == 5'h13;
      automatic logic _GEN_211 = _GEN_191 | _GEN_170;
      automatic logic _GEN_212 = _GEN_192 | _GEN_171;
      automatic logic _GEN_213 = _GEN_193 | _GEN_172;
      automatic logic _GEN_214 = _GEN_194 | _GEN_173;
      automatic logic _GEN_215 = _GEN_195 | _GEN_174;
      automatic logic _GEN_216 = _GEN_196 | _GEN_175;
      automatic logic _GEN_217 = _GEN_197 | _GEN_176;
      automatic logic _GEN_218 = _GEN_198 | _GEN_177;
      automatic logic _GEN_219 = _GEN_199 | _GEN_178;
      automatic logic _GEN_220 = _GEN_200 | _GEN_179;
      automatic logic _GEN_221 = _GEN_201 | _GEN_180;
      automatic logic _GEN_222 = _GEN_202 | _GEN_181;
      automatic logic _GEN_223 = _GEN_203 | _GEN_182;
      automatic logic _GEN_224 = _GEN_204 | _GEN_183;
      automatic logic _GEN_225 = _GEN_205 | _GEN_184;
      automatic logic _GEN_226 = _GEN_206 | _GEN_185;
      automatic logic _GEN_227 = _GEN_207 | _GEN_186;
      automatic logic _GEN_228 = _GEN_208 | _GEN_187;
      automatic logic _GEN_229 = _GEN_209 | _GEN_188;
      automatic logic _GEN_230 = _GEN_210 | _GEN_189;
      automatic logic _GEN_231 = _GEN_116[port2_RS_index] & port2_valid;
      automatic logic _GEN_232 = _GEN_231 & port2_RS_index == 5'h0;
      automatic logic _GEN_233 = _GEN_232 | _GEN_190 & _GEN_191 | _GEN_170;
      automatic logic _GEN_234 = _GEN_231 & port2_RS_index == 5'h1;
      automatic logic _GEN_235 = _GEN_234 | _GEN_190 & _GEN_192 | _GEN_171;
      automatic logic _GEN_236 = _GEN_231 & port2_RS_index == 5'h2;
      automatic logic _GEN_237 = _GEN_236 | _GEN_190 & _GEN_193 | _GEN_172;
      automatic logic _GEN_238 = _GEN_231 & port2_RS_index == 5'h3;
      automatic logic _GEN_239 = _GEN_238 | _GEN_190 & _GEN_194 | _GEN_173;
      automatic logic _GEN_240 = _GEN_231 & port2_RS_index == 5'h4;
      automatic logic _GEN_241 = _GEN_240 | _GEN_190 & _GEN_195 | _GEN_174;
      automatic logic _GEN_242 = _GEN_231 & port2_RS_index == 5'h5;
      automatic logic _GEN_243 = _GEN_242 | _GEN_190 & _GEN_196 | _GEN_175;
      automatic logic _GEN_244 = _GEN_231 & port2_RS_index == 5'h6;
      automatic logic _GEN_245 = _GEN_244 | _GEN_190 & _GEN_197 | _GEN_176;
      automatic logic _GEN_246 = _GEN_231 & port2_RS_index == 5'h7;
      automatic logic _GEN_247 = _GEN_246 | _GEN_190 & _GEN_198 | _GEN_177;
      automatic logic _GEN_248 = _GEN_231 & port2_RS_index == 5'h8;
      automatic logic _GEN_249 = _GEN_248 | _GEN_190 & _GEN_199 | _GEN_178;
      automatic logic _GEN_250 = _GEN_231 & port2_RS_index == 5'h9;
      automatic logic _GEN_251 = _GEN_250 | _GEN_190 & _GEN_200 | _GEN_179;
      automatic logic _GEN_252 = _GEN_231 & port2_RS_index == 5'hA;
      automatic logic _GEN_253 = _GEN_252 | _GEN_190 & _GEN_201 | _GEN_180;
      automatic logic _GEN_254 = _GEN_231 & port2_RS_index == 5'hB;
      automatic logic _GEN_255 = _GEN_254 | _GEN_190 & _GEN_202 | _GEN_181;
      automatic logic _GEN_256 = _GEN_231 & port2_RS_index == 5'hC;
      automatic logic _GEN_257 = _GEN_256 | _GEN_190 & _GEN_203 | _GEN_182;
      automatic logic _GEN_258 = _GEN_231 & port2_RS_index == 5'hD;
      automatic logic _GEN_259 = _GEN_258 | _GEN_190 & _GEN_204 | _GEN_183;
      automatic logic _GEN_260 = _GEN_231 & port2_RS_index == 5'hE;
      automatic logic _GEN_261 = _GEN_260 | _GEN_190 & _GEN_205 | _GEN_184;
      automatic logic _GEN_262 = _GEN_231 & port2_RS_index == 5'hF;
      automatic logic _GEN_263 = _GEN_262 | _GEN_190 & _GEN_206 | _GEN_185;
      automatic logic _GEN_264 = _GEN_231 & port2_RS_index == 5'h10;
      automatic logic _GEN_265 = _GEN_264 | _GEN_190 & _GEN_207 | _GEN_186;
      automatic logic _GEN_266 = _GEN_231 & port2_RS_index == 5'h11;
      automatic logic _GEN_267 = _GEN_266 | _GEN_190 & _GEN_208 | _GEN_187;
      automatic logic _GEN_268 = _GEN_231 & port2_RS_index == 5'h12;
      automatic logic _GEN_269 = _GEN_268 | _GEN_190 & _GEN_209 | _GEN_188;
      automatic logic _GEN_270 = _GEN_231 & port2_RS_index == 5'h13;
      automatic logic _GEN_271 = _GEN_270 | _GEN_190 & _GEN_210 | _GEN_189;
      if (_GEN_233)
        reservation_station_0_decoded_instruction_RD <= 6'h0;
      reservation_station_0_decoded_instruction_RD_valid <=
        ~_GEN_232
        & (_GEN_190
             ? ~_GEN_211 & reservation_station_0_decoded_instruction_RD_valid
             : ~_GEN_170 & reservation_station_0_decoded_instruction_RD_valid);
      if (_GEN_233) begin
        reservation_station_0_decoded_instruction_RS1 <= 6'h0;
        reservation_station_0_decoded_instruction_RS2 <= 6'h0;
        reservation_station_0_decoded_instruction_IMM <= 32'h0;
        reservation_station_0_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_0_decoded_instruction_packet_index <= 4'h0;
        reservation_station_0_decoded_instruction_instructionType <= 5'h0;
        reservation_station_0_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_0_decoded_instruction_needs_ALU <=
        ~_GEN_232
        & (_GEN_190
             ? ~_GEN_211 & reservation_station_0_decoded_instruction_needs_ALU
             : ~_GEN_170 & reservation_station_0_decoded_instruction_needs_ALU);
      reservation_station_0_decoded_instruction_SUBTRACT <=
        ~_GEN_232
        & (_GEN_190
             ? ~_GEN_211 & reservation_station_0_decoded_instruction_SUBTRACT
             : ~_GEN_170 & reservation_station_0_decoded_instruction_SUBTRACT);
      reservation_station_0_decoded_instruction_MULTIPLY <=
        ~_GEN_232
        & (_GEN_190
             ? ~_GEN_211 & reservation_station_0_decoded_instruction_MULTIPLY
             : ~_GEN_170 & reservation_station_0_decoded_instruction_MULTIPLY);
      reservation_station_0_decoded_instruction_IMMEDIATE <=
        ~_GEN_232
        & (_GEN_190
             ? ~_GEN_211 & reservation_station_0_decoded_instruction_IMMEDIATE
             : ~_GEN_170 & reservation_station_0_decoded_instruction_IMMEDIATE);
      reservation_station_0_ready_bits_RS1_ready <=
        ~_GEN_232 & (_GEN_190 ? ~_GEN_211 & _GEN_149 : ~_GEN_170 & _GEN_149);
      reservation_station_0_ready_bits_RS2_ready <=
        ~_GEN_232 & (_GEN_190 ? ~_GEN_211 & _GEN_129 : ~_GEN_170 & _GEN_129);
      reservation_station_0_valid <=
        ~_GEN_232
        & (_GEN_190
             ? ~(_GEN_191 | _GEN_170) & reservation_station_0_valid
             : ~_GEN_170 & reservation_station_0_valid);
      if (_GEN_235)
        reservation_station_1_decoded_instruction_RD <= 6'h0;
      reservation_station_1_decoded_instruction_RD_valid <=
        ~_GEN_234
        & (_GEN_190
             ? ~_GEN_212 & reservation_station_1_decoded_instruction_RD_valid
             : ~_GEN_171 & reservation_station_1_decoded_instruction_RD_valid);
      if (_GEN_235) begin
        reservation_station_1_decoded_instruction_RS1 <= 6'h0;
        reservation_station_1_decoded_instruction_RS2 <= 6'h0;
        reservation_station_1_decoded_instruction_IMM <= 32'h0;
        reservation_station_1_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_1_decoded_instruction_packet_index <= 4'h0;
        reservation_station_1_decoded_instruction_instructionType <= 5'h0;
        reservation_station_1_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_1_decoded_instruction_needs_ALU <=
        ~_GEN_234
        & (_GEN_190
             ? ~_GEN_212 & reservation_station_1_decoded_instruction_needs_ALU
             : ~_GEN_171 & reservation_station_1_decoded_instruction_needs_ALU);
      reservation_station_1_decoded_instruction_SUBTRACT <=
        ~_GEN_234
        & (_GEN_190
             ? ~_GEN_212 & reservation_station_1_decoded_instruction_SUBTRACT
             : ~_GEN_171 & reservation_station_1_decoded_instruction_SUBTRACT);
      reservation_station_1_decoded_instruction_MULTIPLY <=
        ~_GEN_234
        & (_GEN_190
             ? ~_GEN_212 & reservation_station_1_decoded_instruction_MULTIPLY
             : ~_GEN_171 & reservation_station_1_decoded_instruction_MULTIPLY);
      reservation_station_1_decoded_instruction_IMMEDIATE <=
        ~_GEN_234
        & (_GEN_190
             ? ~_GEN_212 & reservation_station_1_decoded_instruction_IMMEDIATE
             : ~_GEN_171 & reservation_station_1_decoded_instruction_IMMEDIATE);
      reservation_station_1_ready_bits_RS1_ready <=
        ~_GEN_234 & (_GEN_190 ? ~_GEN_212 & _GEN_150 : ~_GEN_171 & _GEN_150);
      reservation_station_1_ready_bits_RS2_ready <=
        ~_GEN_234 & (_GEN_190 ? ~_GEN_212 & _GEN_130 : ~_GEN_171 & _GEN_130);
      reservation_station_1_valid <=
        ~_GEN_234
        & (_GEN_190
             ? ~(_GEN_192 | _GEN_171) & reservation_station_1_valid
             : ~_GEN_171 & reservation_station_1_valid);
      if (_GEN_237)
        reservation_station_2_decoded_instruction_RD <= 6'h0;
      reservation_station_2_decoded_instruction_RD_valid <=
        ~_GEN_236
        & (_GEN_190
             ? ~_GEN_213 & reservation_station_2_decoded_instruction_RD_valid
             : ~_GEN_172 & reservation_station_2_decoded_instruction_RD_valid);
      if (_GEN_237) begin
        reservation_station_2_decoded_instruction_RS1 <= 6'h0;
        reservation_station_2_decoded_instruction_RS2 <= 6'h0;
        reservation_station_2_decoded_instruction_IMM <= 32'h0;
        reservation_station_2_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_2_decoded_instruction_packet_index <= 4'h0;
        reservation_station_2_decoded_instruction_instructionType <= 5'h0;
        reservation_station_2_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_2_decoded_instruction_needs_ALU <=
        ~_GEN_236
        & (_GEN_190
             ? ~_GEN_213 & reservation_station_2_decoded_instruction_needs_ALU
             : ~_GEN_172 & reservation_station_2_decoded_instruction_needs_ALU);
      reservation_station_2_decoded_instruction_SUBTRACT <=
        ~_GEN_236
        & (_GEN_190
             ? ~_GEN_213 & reservation_station_2_decoded_instruction_SUBTRACT
             : ~_GEN_172 & reservation_station_2_decoded_instruction_SUBTRACT);
      reservation_station_2_decoded_instruction_MULTIPLY <=
        ~_GEN_236
        & (_GEN_190
             ? ~_GEN_213 & reservation_station_2_decoded_instruction_MULTIPLY
             : ~_GEN_172 & reservation_station_2_decoded_instruction_MULTIPLY);
      reservation_station_2_decoded_instruction_IMMEDIATE <=
        ~_GEN_236
        & (_GEN_190
             ? ~_GEN_213 & reservation_station_2_decoded_instruction_IMMEDIATE
             : ~_GEN_172 & reservation_station_2_decoded_instruction_IMMEDIATE);
      reservation_station_2_ready_bits_RS1_ready <=
        ~_GEN_236 & (_GEN_190 ? ~_GEN_213 & _GEN_151 : ~_GEN_172 & _GEN_151);
      reservation_station_2_ready_bits_RS2_ready <=
        ~_GEN_236 & (_GEN_190 ? ~_GEN_213 & _GEN_131 : ~_GEN_172 & _GEN_131);
      reservation_station_2_valid <=
        ~_GEN_236
        & (_GEN_190
             ? ~(_GEN_193 | _GEN_172) & reservation_station_2_valid
             : ~_GEN_172 & reservation_station_2_valid);
      if (_GEN_239)
        reservation_station_3_decoded_instruction_RD <= 6'h0;
      reservation_station_3_decoded_instruction_RD_valid <=
        ~_GEN_238
        & (_GEN_190
             ? ~_GEN_214 & reservation_station_3_decoded_instruction_RD_valid
             : ~_GEN_173 & reservation_station_3_decoded_instruction_RD_valid);
      if (_GEN_239) begin
        reservation_station_3_decoded_instruction_RS1 <= 6'h0;
        reservation_station_3_decoded_instruction_RS2 <= 6'h0;
        reservation_station_3_decoded_instruction_IMM <= 32'h0;
        reservation_station_3_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_3_decoded_instruction_packet_index <= 4'h0;
        reservation_station_3_decoded_instruction_instructionType <= 5'h0;
        reservation_station_3_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_3_decoded_instruction_needs_ALU <=
        ~_GEN_238
        & (_GEN_190
             ? ~_GEN_214 & reservation_station_3_decoded_instruction_needs_ALU
             : ~_GEN_173 & reservation_station_3_decoded_instruction_needs_ALU);
      reservation_station_3_decoded_instruction_SUBTRACT <=
        ~_GEN_238
        & (_GEN_190
             ? ~_GEN_214 & reservation_station_3_decoded_instruction_SUBTRACT
             : ~_GEN_173 & reservation_station_3_decoded_instruction_SUBTRACT);
      reservation_station_3_decoded_instruction_MULTIPLY <=
        ~_GEN_238
        & (_GEN_190
             ? ~_GEN_214 & reservation_station_3_decoded_instruction_MULTIPLY
             : ~_GEN_173 & reservation_station_3_decoded_instruction_MULTIPLY);
      reservation_station_3_decoded_instruction_IMMEDIATE <=
        ~_GEN_238
        & (_GEN_190
             ? ~_GEN_214 & reservation_station_3_decoded_instruction_IMMEDIATE
             : ~_GEN_173 & reservation_station_3_decoded_instruction_IMMEDIATE);
      reservation_station_3_ready_bits_RS1_ready <=
        ~_GEN_238 & (_GEN_190 ? ~_GEN_214 & _GEN_152 : ~_GEN_173 & _GEN_152);
      reservation_station_3_ready_bits_RS2_ready <=
        ~_GEN_238 & (_GEN_190 ? ~_GEN_214 & _GEN_132 : ~_GEN_173 & _GEN_132);
      reservation_station_3_valid <=
        ~_GEN_238
        & (_GEN_190
             ? ~(_GEN_194 | _GEN_173) & reservation_station_3_valid
             : ~_GEN_173 & reservation_station_3_valid);
      if (_GEN_241)
        reservation_station_4_decoded_instruction_RD <= 6'h0;
      reservation_station_4_decoded_instruction_RD_valid <=
        ~_GEN_240
        & (_GEN_190
             ? ~_GEN_215 & reservation_station_4_decoded_instruction_RD_valid
             : ~_GEN_174 & reservation_station_4_decoded_instruction_RD_valid);
      if (_GEN_241) begin
        reservation_station_4_decoded_instruction_RS1 <= 6'h0;
        reservation_station_4_decoded_instruction_RS2 <= 6'h0;
        reservation_station_4_decoded_instruction_IMM <= 32'h0;
        reservation_station_4_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_4_decoded_instruction_packet_index <= 4'h0;
        reservation_station_4_decoded_instruction_instructionType <= 5'h0;
        reservation_station_4_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_4_decoded_instruction_needs_ALU <=
        ~_GEN_240
        & (_GEN_190
             ? ~_GEN_215 & reservation_station_4_decoded_instruction_needs_ALU
             : ~_GEN_174 & reservation_station_4_decoded_instruction_needs_ALU);
      reservation_station_4_decoded_instruction_SUBTRACT <=
        ~_GEN_240
        & (_GEN_190
             ? ~_GEN_215 & reservation_station_4_decoded_instruction_SUBTRACT
             : ~_GEN_174 & reservation_station_4_decoded_instruction_SUBTRACT);
      reservation_station_4_decoded_instruction_MULTIPLY <=
        ~_GEN_240
        & (_GEN_190
             ? ~_GEN_215 & reservation_station_4_decoded_instruction_MULTIPLY
             : ~_GEN_174 & reservation_station_4_decoded_instruction_MULTIPLY);
      reservation_station_4_decoded_instruction_IMMEDIATE <=
        ~_GEN_240
        & (_GEN_190
             ? ~_GEN_215 & reservation_station_4_decoded_instruction_IMMEDIATE
             : ~_GEN_174 & reservation_station_4_decoded_instruction_IMMEDIATE);
      reservation_station_4_ready_bits_RS1_ready <=
        ~_GEN_240 & (_GEN_190 ? ~_GEN_215 & _GEN_153 : ~_GEN_174 & _GEN_153);
      reservation_station_4_ready_bits_RS2_ready <=
        ~_GEN_240 & (_GEN_190 ? ~_GEN_215 & _GEN_133 : ~_GEN_174 & _GEN_133);
      reservation_station_4_valid <=
        ~_GEN_240
        & (_GEN_190
             ? ~(_GEN_195 | _GEN_174) & reservation_station_4_valid
             : ~_GEN_174 & reservation_station_4_valid);
      if (_GEN_243)
        reservation_station_5_decoded_instruction_RD <= 6'h0;
      reservation_station_5_decoded_instruction_RD_valid <=
        ~_GEN_242
        & (_GEN_190
             ? ~_GEN_216 & reservation_station_5_decoded_instruction_RD_valid
             : ~_GEN_175 & reservation_station_5_decoded_instruction_RD_valid);
      if (_GEN_243) begin
        reservation_station_5_decoded_instruction_RS1 <= 6'h0;
        reservation_station_5_decoded_instruction_RS2 <= 6'h0;
        reservation_station_5_decoded_instruction_IMM <= 32'h0;
        reservation_station_5_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_5_decoded_instruction_packet_index <= 4'h0;
        reservation_station_5_decoded_instruction_instructionType <= 5'h0;
        reservation_station_5_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_5_decoded_instruction_needs_ALU <=
        ~_GEN_242
        & (_GEN_190
             ? ~_GEN_216 & reservation_station_5_decoded_instruction_needs_ALU
             : ~_GEN_175 & reservation_station_5_decoded_instruction_needs_ALU);
      reservation_station_5_decoded_instruction_SUBTRACT <=
        ~_GEN_242
        & (_GEN_190
             ? ~_GEN_216 & reservation_station_5_decoded_instruction_SUBTRACT
             : ~_GEN_175 & reservation_station_5_decoded_instruction_SUBTRACT);
      reservation_station_5_decoded_instruction_MULTIPLY <=
        ~_GEN_242
        & (_GEN_190
             ? ~_GEN_216 & reservation_station_5_decoded_instruction_MULTIPLY
             : ~_GEN_175 & reservation_station_5_decoded_instruction_MULTIPLY);
      reservation_station_5_decoded_instruction_IMMEDIATE <=
        ~_GEN_242
        & (_GEN_190
             ? ~_GEN_216 & reservation_station_5_decoded_instruction_IMMEDIATE
             : ~_GEN_175 & reservation_station_5_decoded_instruction_IMMEDIATE);
      reservation_station_5_ready_bits_RS1_ready <=
        ~_GEN_242 & (_GEN_190 ? ~_GEN_216 & _GEN_154 : ~_GEN_175 & _GEN_154);
      reservation_station_5_ready_bits_RS2_ready <=
        ~_GEN_242 & (_GEN_190 ? ~_GEN_216 & _GEN_134 : ~_GEN_175 & _GEN_134);
      reservation_station_5_valid <=
        ~_GEN_242
        & (_GEN_190
             ? ~(_GEN_196 | _GEN_175) & reservation_station_5_valid
             : ~_GEN_175 & reservation_station_5_valid);
      if (_GEN_245)
        reservation_station_6_decoded_instruction_RD <= 6'h0;
      reservation_station_6_decoded_instruction_RD_valid <=
        ~_GEN_244
        & (_GEN_190
             ? ~_GEN_217 & reservation_station_6_decoded_instruction_RD_valid
             : ~_GEN_176 & reservation_station_6_decoded_instruction_RD_valid);
      if (_GEN_245) begin
        reservation_station_6_decoded_instruction_RS1 <= 6'h0;
        reservation_station_6_decoded_instruction_RS2 <= 6'h0;
        reservation_station_6_decoded_instruction_IMM <= 32'h0;
        reservation_station_6_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_6_decoded_instruction_packet_index <= 4'h0;
        reservation_station_6_decoded_instruction_instructionType <= 5'h0;
        reservation_station_6_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_6_decoded_instruction_needs_ALU <=
        ~_GEN_244
        & (_GEN_190
             ? ~_GEN_217 & reservation_station_6_decoded_instruction_needs_ALU
             : ~_GEN_176 & reservation_station_6_decoded_instruction_needs_ALU);
      reservation_station_6_decoded_instruction_SUBTRACT <=
        ~_GEN_244
        & (_GEN_190
             ? ~_GEN_217 & reservation_station_6_decoded_instruction_SUBTRACT
             : ~_GEN_176 & reservation_station_6_decoded_instruction_SUBTRACT);
      reservation_station_6_decoded_instruction_MULTIPLY <=
        ~_GEN_244
        & (_GEN_190
             ? ~_GEN_217 & reservation_station_6_decoded_instruction_MULTIPLY
             : ~_GEN_176 & reservation_station_6_decoded_instruction_MULTIPLY);
      reservation_station_6_decoded_instruction_IMMEDIATE <=
        ~_GEN_244
        & (_GEN_190
             ? ~_GEN_217 & reservation_station_6_decoded_instruction_IMMEDIATE
             : ~_GEN_176 & reservation_station_6_decoded_instruction_IMMEDIATE);
      reservation_station_6_ready_bits_RS1_ready <=
        ~_GEN_244 & (_GEN_190 ? ~_GEN_217 & _GEN_155 : ~_GEN_176 & _GEN_155);
      reservation_station_6_ready_bits_RS2_ready <=
        ~_GEN_244 & (_GEN_190 ? ~_GEN_217 & _GEN_135 : ~_GEN_176 & _GEN_135);
      reservation_station_6_valid <=
        ~_GEN_244
        & (_GEN_190
             ? ~(_GEN_197 | _GEN_176) & reservation_station_6_valid
             : ~_GEN_176 & reservation_station_6_valid);
      if (_GEN_247)
        reservation_station_7_decoded_instruction_RD <= 6'h0;
      reservation_station_7_decoded_instruction_RD_valid <=
        ~_GEN_246
        & (_GEN_190
             ? ~_GEN_218 & reservation_station_7_decoded_instruction_RD_valid
             : ~_GEN_177 & reservation_station_7_decoded_instruction_RD_valid);
      if (_GEN_247) begin
        reservation_station_7_decoded_instruction_RS1 <= 6'h0;
        reservation_station_7_decoded_instruction_RS2 <= 6'h0;
        reservation_station_7_decoded_instruction_IMM <= 32'h0;
        reservation_station_7_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_7_decoded_instruction_packet_index <= 4'h0;
        reservation_station_7_decoded_instruction_instructionType <= 5'h0;
        reservation_station_7_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_7_decoded_instruction_needs_ALU <=
        ~_GEN_246
        & (_GEN_190
             ? ~_GEN_218 & reservation_station_7_decoded_instruction_needs_ALU
             : ~_GEN_177 & reservation_station_7_decoded_instruction_needs_ALU);
      reservation_station_7_decoded_instruction_SUBTRACT <=
        ~_GEN_246
        & (_GEN_190
             ? ~_GEN_218 & reservation_station_7_decoded_instruction_SUBTRACT
             : ~_GEN_177 & reservation_station_7_decoded_instruction_SUBTRACT);
      reservation_station_7_decoded_instruction_MULTIPLY <=
        ~_GEN_246
        & (_GEN_190
             ? ~_GEN_218 & reservation_station_7_decoded_instruction_MULTIPLY
             : ~_GEN_177 & reservation_station_7_decoded_instruction_MULTIPLY);
      reservation_station_7_decoded_instruction_IMMEDIATE <=
        ~_GEN_246
        & (_GEN_190
             ? ~_GEN_218 & reservation_station_7_decoded_instruction_IMMEDIATE
             : ~_GEN_177 & reservation_station_7_decoded_instruction_IMMEDIATE);
      reservation_station_7_ready_bits_RS1_ready <=
        ~_GEN_246 & (_GEN_190 ? ~_GEN_218 & _GEN_156 : ~_GEN_177 & _GEN_156);
      reservation_station_7_ready_bits_RS2_ready <=
        ~_GEN_246 & (_GEN_190 ? ~_GEN_218 & _GEN_136 : ~_GEN_177 & _GEN_136);
      reservation_station_7_valid <=
        ~_GEN_246
        & (_GEN_190
             ? ~(_GEN_198 | _GEN_177) & reservation_station_7_valid
             : ~_GEN_177 & reservation_station_7_valid);
      if (_GEN_249)
        reservation_station_8_decoded_instruction_RD <= 6'h0;
      reservation_station_8_decoded_instruction_RD_valid <=
        ~_GEN_248
        & (_GEN_190
             ? ~_GEN_219 & reservation_station_8_decoded_instruction_RD_valid
             : ~_GEN_178 & reservation_station_8_decoded_instruction_RD_valid);
      if (_GEN_249) begin
        reservation_station_8_decoded_instruction_RS1 <= 6'h0;
        reservation_station_8_decoded_instruction_RS2 <= 6'h0;
        reservation_station_8_decoded_instruction_IMM <= 32'h0;
        reservation_station_8_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_8_decoded_instruction_packet_index <= 4'h0;
        reservation_station_8_decoded_instruction_instructionType <= 5'h0;
        reservation_station_8_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_8_decoded_instruction_needs_ALU <=
        ~_GEN_248
        & (_GEN_190
             ? ~_GEN_219 & reservation_station_8_decoded_instruction_needs_ALU
             : ~_GEN_178 & reservation_station_8_decoded_instruction_needs_ALU);
      reservation_station_8_decoded_instruction_SUBTRACT <=
        ~_GEN_248
        & (_GEN_190
             ? ~_GEN_219 & reservation_station_8_decoded_instruction_SUBTRACT
             : ~_GEN_178 & reservation_station_8_decoded_instruction_SUBTRACT);
      reservation_station_8_decoded_instruction_MULTIPLY <=
        ~_GEN_248
        & (_GEN_190
             ? ~_GEN_219 & reservation_station_8_decoded_instruction_MULTIPLY
             : ~_GEN_178 & reservation_station_8_decoded_instruction_MULTIPLY);
      reservation_station_8_decoded_instruction_IMMEDIATE <=
        ~_GEN_248
        & (_GEN_190
             ? ~_GEN_219 & reservation_station_8_decoded_instruction_IMMEDIATE
             : ~_GEN_178 & reservation_station_8_decoded_instruction_IMMEDIATE);
      reservation_station_8_ready_bits_RS1_ready <=
        ~_GEN_248 & (_GEN_190 ? ~_GEN_219 & _GEN_157 : ~_GEN_178 & _GEN_157);
      reservation_station_8_ready_bits_RS2_ready <=
        ~_GEN_248 & (_GEN_190 ? ~_GEN_219 & _GEN_137 : ~_GEN_178 & _GEN_137);
      reservation_station_8_valid <=
        ~_GEN_248
        & (_GEN_190
             ? ~(_GEN_199 | _GEN_178) & reservation_station_8_valid
             : ~_GEN_178 & reservation_station_8_valid);
      if (_GEN_251)
        reservation_station_9_decoded_instruction_RD <= 6'h0;
      reservation_station_9_decoded_instruction_RD_valid <=
        ~_GEN_250
        & (_GEN_190
             ? ~_GEN_220 & reservation_station_9_decoded_instruction_RD_valid
             : ~_GEN_179 & reservation_station_9_decoded_instruction_RD_valid);
      if (_GEN_251) begin
        reservation_station_9_decoded_instruction_RS1 <= 6'h0;
        reservation_station_9_decoded_instruction_RS2 <= 6'h0;
        reservation_station_9_decoded_instruction_IMM <= 32'h0;
        reservation_station_9_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_9_decoded_instruction_packet_index <= 4'h0;
        reservation_station_9_decoded_instruction_instructionType <= 5'h0;
        reservation_station_9_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_9_decoded_instruction_needs_ALU <=
        ~_GEN_250
        & (_GEN_190
             ? ~_GEN_220 & reservation_station_9_decoded_instruction_needs_ALU
             : ~_GEN_179 & reservation_station_9_decoded_instruction_needs_ALU);
      reservation_station_9_decoded_instruction_SUBTRACT <=
        ~_GEN_250
        & (_GEN_190
             ? ~_GEN_220 & reservation_station_9_decoded_instruction_SUBTRACT
             : ~_GEN_179 & reservation_station_9_decoded_instruction_SUBTRACT);
      reservation_station_9_decoded_instruction_MULTIPLY <=
        ~_GEN_250
        & (_GEN_190
             ? ~_GEN_220 & reservation_station_9_decoded_instruction_MULTIPLY
             : ~_GEN_179 & reservation_station_9_decoded_instruction_MULTIPLY);
      reservation_station_9_decoded_instruction_IMMEDIATE <=
        ~_GEN_250
        & (_GEN_190
             ? ~_GEN_220 & reservation_station_9_decoded_instruction_IMMEDIATE
             : ~_GEN_179 & reservation_station_9_decoded_instruction_IMMEDIATE);
      reservation_station_9_ready_bits_RS1_ready <=
        ~_GEN_250 & (_GEN_190 ? ~_GEN_220 & _GEN_158 : ~_GEN_179 & _GEN_158);
      reservation_station_9_ready_bits_RS2_ready <=
        ~_GEN_250 & (_GEN_190 ? ~_GEN_220 & _GEN_138 : ~_GEN_179 & _GEN_138);
      reservation_station_9_valid <=
        ~_GEN_250
        & (_GEN_190
             ? ~(_GEN_200 | _GEN_179) & reservation_station_9_valid
             : ~_GEN_179 & reservation_station_9_valid);
      if (_GEN_253)
        reservation_station_10_decoded_instruction_RD <= 6'h0;
      reservation_station_10_decoded_instruction_RD_valid <=
        ~_GEN_252
        & (_GEN_190
             ? ~_GEN_221 & reservation_station_10_decoded_instruction_RD_valid
             : ~_GEN_180 & reservation_station_10_decoded_instruction_RD_valid);
      if (_GEN_253) begin
        reservation_station_10_decoded_instruction_RS1 <= 6'h0;
        reservation_station_10_decoded_instruction_RS2 <= 6'h0;
        reservation_station_10_decoded_instruction_IMM <= 32'h0;
        reservation_station_10_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_10_decoded_instruction_packet_index <= 4'h0;
        reservation_station_10_decoded_instruction_instructionType <= 5'h0;
        reservation_station_10_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_10_decoded_instruction_needs_ALU <=
        ~_GEN_252
        & (_GEN_190
             ? ~_GEN_221 & reservation_station_10_decoded_instruction_needs_ALU
             : ~_GEN_180 & reservation_station_10_decoded_instruction_needs_ALU);
      reservation_station_10_decoded_instruction_SUBTRACT <=
        ~_GEN_252
        & (_GEN_190
             ? ~_GEN_221 & reservation_station_10_decoded_instruction_SUBTRACT
             : ~_GEN_180 & reservation_station_10_decoded_instruction_SUBTRACT);
      reservation_station_10_decoded_instruction_MULTIPLY <=
        ~_GEN_252
        & (_GEN_190
             ? ~_GEN_221 & reservation_station_10_decoded_instruction_MULTIPLY
             : ~_GEN_180 & reservation_station_10_decoded_instruction_MULTIPLY);
      reservation_station_10_decoded_instruction_IMMEDIATE <=
        ~_GEN_252
        & (_GEN_190
             ? ~_GEN_221 & reservation_station_10_decoded_instruction_IMMEDIATE
             : ~_GEN_180 & reservation_station_10_decoded_instruction_IMMEDIATE);
      reservation_station_10_ready_bits_RS1_ready <=
        ~_GEN_252 & (_GEN_190 ? ~_GEN_221 & _GEN_159 : ~_GEN_180 & _GEN_159);
      reservation_station_10_ready_bits_RS2_ready <=
        ~_GEN_252 & (_GEN_190 ? ~_GEN_221 & _GEN_139 : ~_GEN_180 & _GEN_139);
      reservation_station_10_valid <=
        ~_GEN_252
        & (_GEN_190
             ? ~(_GEN_201 | _GEN_180) & reservation_station_10_valid
             : ~_GEN_180 & reservation_station_10_valid);
      if (_GEN_255)
        reservation_station_11_decoded_instruction_RD <= 6'h0;
      reservation_station_11_decoded_instruction_RD_valid <=
        ~_GEN_254
        & (_GEN_190
             ? ~_GEN_222 & reservation_station_11_decoded_instruction_RD_valid
             : ~_GEN_181 & reservation_station_11_decoded_instruction_RD_valid);
      if (_GEN_255) begin
        reservation_station_11_decoded_instruction_RS1 <= 6'h0;
        reservation_station_11_decoded_instruction_RS2 <= 6'h0;
        reservation_station_11_decoded_instruction_IMM <= 32'h0;
        reservation_station_11_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_11_decoded_instruction_packet_index <= 4'h0;
        reservation_station_11_decoded_instruction_instructionType <= 5'h0;
        reservation_station_11_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_11_decoded_instruction_needs_ALU <=
        ~_GEN_254
        & (_GEN_190
             ? ~_GEN_222 & reservation_station_11_decoded_instruction_needs_ALU
             : ~_GEN_181 & reservation_station_11_decoded_instruction_needs_ALU);
      reservation_station_11_decoded_instruction_SUBTRACT <=
        ~_GEN_254
        & (_GEN_190
             ? ~_GEN_222 & reservation_station_11_decoded_instruction_SUBTRACT
             : ~_GEN_181 & reservation_station_11_decoded_instruction_SUBTRACT);
      reservation_station_11_decoded_instruction_MULTIPLY <=
        ~_GEN_254
        & (_GEN_190
             ? ~_GEN_222 & reservation_station_11_decoded_instruction_MULTIPLY
             : ~_GEN_181 & reservation_station_11_decoded_instruction_MULTIPLY);
      reservation_station_11_decoded_instruction_IMMEDIATE <=
        ~_GEN_254
        & (_GEN_190
             ? ~_GEN_222 & reservation_station_11_decoded_instruction_IMMEDIATE
             : ~_GEN_181 & reservation_station_11_decoded_instruction_IMMEDIATE);
      reservation_station_11_ready_bits_RS1_ready <=
        ~_GEN_254 & (_GEN_190 ? ~_GEN_222 & _GEN_160 : ~_GEN_181 & _GEN_160);
      reservation_station_11_ready_bits_RS2_ready <=
        ~_GEN_254 & (_GEN_190 ? ~_GEN_222 & _GEN_140 : ~_GEN_181 & _GEN_140);
      reservation_station_11_valid <=
        ~_GEN_254
        & (_GEN_190
             ? ~(_GEN_202 | _GEN_181) & reservation_station_11_valid
             : ~_GEN_181 & reservation_station_11_valid);
      if (_GEN_257)
        reservation_station_12_decoded_instruction_RD <= 6'h0;
      reservation_station_12_decoded_instruction_RD_valid <=
        ~_GEN_256
        & (_GEN_190
             ? ~_GEN_223 & reservation_station_12_decoded_instruction_RD_valid
             : ~_GEN_182 & reservation_station_12_decoded_instruction_RD_valid);
      if (_GEN_257) begin
        reservation_station_12_decoded_instruction_RS1 <= 6'h0;
        reservation_station_12_decoded_instruction_RS2 <= 6'h0;
        reservation_station_12_decoded_instruction_IMM <= 32'h0;
        reservation_station_12_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_12_decoded_instruction_packet_index <= 4'h0;
        reservation_station_12_decoded_instruction_instructionType <= 5'h0;
        reservation_station_12_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_12_decoded_instruction_needs_ALU <=
        ~_GEN_256
        & (_GEN_190
             ? ~_GEN_223 & reservation_station_12_decoded_instruction_needs_ALU
             : ~_GEN_182 & reservation_station_12_decoded_instruction_needs_ALU);
      reservation_station_12_decoded_instruction_SUBTRACT <=
        ~_GEN_256
        & (_GEN_190
             ? ~_GEN_223 & reservation_station_12_decoded_instruction_SUBTRACT
             : ~_GEN_182 & reservation_station_12_decoded_instruction_SUBTRACT);
      reservation_station_12_decoded_instruction_MULTIPLY <=
        ~_GEN_256
        & (_GEN_190
             ? ~_GEN_223 & reservation_station_12_decoded_instruction_MULTIPLY
             : ~_GEN_182 & reservation_station_12_decoded_instruction_MULTIPLY);
      reservation_station_12_decoded_instruction_IMMEDIATE <=
        ~_GEN_256
        & (_GEN_190
             ? ~_GEN_223 & reservation_station_12_decoded_instruction_IMMEDIATE
             : ~_GEN_182 & reservation_station_12_decoded_instruction_IMMEDIATE);
      reservation_station_12_ready_bits_RS1_ready <=
        ~_GEN_256 & (_GEN_190 ? ~_GEN_223 & _GEN_161 : ~_GEN_182 & _GEN_161);
      reservation_station_12_ready_bits_RS2_ready <=
        ~_GEN_256 & (_GEN_190 ? ~_GEN_223 & _GEN_141 : ~_GEN_182 & _GEN_141);
      reservation_station_12_valid <=
        ~_GEN_256
        & (_GEN_190
             ? ~(_GEN_203 | _GEN_182) & reservation_station_12_valid
             : ~_GEN_182 & reservation_station_12_valid);
      if (_GEN_259)
        reservation_station_13_decoded_instruction_RD <= 6'h0;
      reservation_station_13_decoded_instruction_RD_valid <=
        ~_GEN_258
        & (_GEN_190
             ? ~_GEN_224 & reservation_station_13_decoded_instruction_RD_valid
             : ~_GEN_183 & reservation_station_13_decoded_instruction_RD_valid);
      if (_GEN_259) begin
        reservation_station_13_decoded_instruction_RS1 <= 6'h0;
        reservation_station_13_decoded_instruction_RS2 <= 6'h0;
        reservation_station_13_decoded_instruction_IMM <= 32'h0;
        reservation_station_13_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_13_decoded_instruction_packet_index <= 4'h0;
        reservation_station_13_decoded_instruction_instructionType <= 5'h0;
        reservation_station_13_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_13_decoded_instruction_needs_ALU <=
        ~_GEN_258
        & (_GEN_190
             ? ~_GEN_224 & reservation_station_13_decoded_instruction_needs_ALU
             : ~_GEN_183 & reservation_station_13_decoded_instruction_needs_ALU);
      reservation_station_13_decoded_instruction_SUBTRACT <=
        ~_GEN_258
        & (_GEN_190
             ? ~_GEN_224 & reservation_station_13_decoded_instruction_SUBTRACT
             : ~_GEN_183 & reservation_station_13_decoded_instruction_SUBTRACT);
      reservation_station_13_decoded_instruction_MULTIPLY <=
        ~_GEN_258
        & (_GEN_190
             ? ~_GEN_224 & reservation_station_13_decoded_instruction_MULTIPLY
             : ~_GEN_183 & reservation_station_13_decoded_instruction_MULTIPLY);
      reservation_station_13_decoded_instruction_IMMEDIATE <=
        ~_GEN_258
        & (_GEN_190
             ? ~_GEN_224 & reservation_station_13_decoded_instruction_IMMEDIATE
             : ~_GEN_183 & reservation_station_13_decoded_instruction_IMMEDIATE);
      reservation_station_13_ready_bits_RS1_ready <=
        ~_GEN_258 & (_GEN_190 ? ~_GEN_224 & _GEN_162 : ~_GEN_183 & _GEN_162);
      reservation_station_13_ready_bits_RS2_ready <=
        ~_GEN_258 & (_GEN_190 ? ~_GEN_224 & _GEN_142 : ~_GEN_183 & _GEN_142);
      reservation_station_13_valid <=
        ~_GEN_258
        & (_GEN_190
             ? ~(_GEN_204 | _GEN_183) & reservation_station_13_valid
             : ~_GEN_183 & reservation_station_13_valid);
      if (_GEN_261)
        reservation_station_14_decoded_instruction_RD <= 6'h0;
      reservation_station_14_decoded_instruction_RD_valid <=
        ~_GEN_260
        & (_GEN_190
             ? ~_GEN_225 & reservation_station_14_decoded_instruction_RD_valid
             : ~_GEN_184 & reservation_station_14_decoded_instruction_RD_valid);
      if (_GEN_261) begin
        reservation_station_14_decoded_instruction_RS1 <= 6'h0;
        reservation_station_14_decoded_instruction_RS2 <= 6'h0;
        reservation_station_14_decoded_instruction_IMM <= 32'h0;
        reservation_station_14_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_14_decoded_instruction_packet_index <= 4'h0;
        reservation_station_14_decoded_instruction_instructionType <= 5'h0;
        reservation_station_14_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_14_decoded_instruction_needs_ALU <=
        ~_GEN_260
        & (_GEN_190
             ? ~_GEN_225 & reservation_station_14_decoded_instruction_needs_ALU
             : ~_GEN_184 & reservation_station_14_decoded_instruction_needs_ALU);
      reservation_station_14_decoded_instruction_SUBTRACT <=
        ~_GEN_260
        & (_GEN_190
             ? ~_GEN_225 & reservation_station_14_decoded_instruction_SUBTRACT
             : ~_GEN_184 & reservation_station_14_decoded_instruction_SUBTRACT);
      reservation_station_14_decoded_instruction_MULTIPLY <=
        ~_GEN_260
        & (_GEN_190
             ? ~_GEN_225 & reservation_station_14_decoded_instruction_MULTIPLY
             : ~_GEN_184 & reservation_station_14_decoded_instruction_MULTIPLY);
      reservation_station_14_decoded_instruction_IMMEDIATE <=
        ~_GEN_260
        & (_GEN_190
             ? ~_GEN_225 & reservation_station_14_decoded_instruction_IMMEDIATE
             : ~_GEN_184 & reservation_station_14_decoded_instruction_IMMEDIATE);
      reservation_station_14_ready_bits_RS1_ready <=
        ~_GEN_260 & (_GEN_190 ? ~_GEN_225 & _GEN_163 : ~_GEN_184 & _GEN_163);
      reservation_station_14_ready_bits_RS2_ready <=
        ~_GEN_260 & (_GEN_190 ? ~_GEN_225 & _GEN_143 : ~_GEN_184 & _GEN_143);
      reservation_station_14_valid <=
        ~_GEN_260
        & (_GEN_190
             ? ~(_GEN_205 | _GEN_184) & reservation_station_14_valid
             : ~_GEN_184 & reservation_station_14_valid);
      if (_GEN_263)
        reservation_station_15_decoded_instruction_RD <= 6'h0;
      reservation_station_15_decoded_instruction_RD_valid <=
        ~_GEN_262
        & (_GEN_190
             ? ~_GEN_226 & reservation_station_15_decoded_instruction_RD_valid
             : ~_GEN_185 & reservation_station_15_decoded_instruction_RD_valid);
      if (_GEN_263) begin
        reservation_station_15_decoded_instruction_RS1 <= 6'h0;
        reservation_station_15_decoded_instruction_RS2 <= 6'h0;
        reservation_station_15_decoded_instruction_IMM <= 32'h0;
        reservation_station_15_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_15_decoded_instruction_packet_index <= 4'h0;
        reservation_station_15_decoded_instruction_instructionType <= 5'h0;
        reservation_station_15_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_15_decoded_instruction_needs_ALU <=
        ~_GEN_262
        & (_GEN_190
             ? ~_GEN_226 & reservation_station_15_decoded_instruction_needs_ALU
             : ~_GEN_185 & reservation_station_15_decoded_instruction_needs_ALU);
      reservation_station_15_decoded_instruction_SUBTRACT <=
        ~_GEN_262
        & (_GEN_190
             ? ~_GEN_226 & reservation_station_15_decoded_instruction_SUBTRACT
             : ~_GEN_185 & reservation_station_15_decoded_instruction_SUBTRACT);
      reservation_station_15_decoded_instruction_MULTIPLY <=
        ~_GEN_262
        & (_GEN_190
             ? ~_GEN_226 & reservation_station_15_decoded_instruction_MULTIPLY
             : ~_GEN_185 & reservation_station_15_decoded_instruction_MULTIPLY);
      reservation_station_15_decoded_instruction_IMMEDIATE <=
        ~_GEN_262
        & (_GEN_190
             ? ~_GEN_226 & reservation_station_15_decoded_instruction_IMMEDIATE
             : ~_GEN_185 & reservation_station_15_decoded_instruction_IMMEDIATE);
      reservation_station_15_ready_bits_RS1_ready <=
        ~_GEN_262 & (_GEN_190 ? ~_GEN_226 & _GEN_164 : ~_GEN_185 & _GEN_164);
      reservation_station_15_ready_bits_RS2_ready <=
        ~_GEN_262 & (_GEN_190 ? ~_GEN_226 & _GEN_144 : ~_GEN_185 & _GEN_144);
      reservation_station_15_valid <=
        ~_GEN_262
        & (_GEN_190
             ? ~(_GEN_206 | _GEN_185) & reservation_station_15_valid
             : ~_GEN_185 & reservation_station_15_valid);
      if (_GEN_265)
        reservation_station_16_decoded_instruction_RD <= 6'h0;
      reservation_station_16_decoded_instruction_RD_valid <=
        ~_GEN_264
        & (_GEN_190
             ? ~_GEN_227 & reservation_station_16_decoded_instruction_RD_valid
             : ~_GEN_186 & reservation_station_16_decoded_instruction_RD_valid);
      if (_GEN_265) begin
        reservation_station_16_decoded_instruction_RS1 <= 6'h0;
        reservation_station_16_decoded_instruction_RS2 <= 6'h0;
        reservation_station_16_decoded_instruction_IMM <= 32'h0;
        reservation_station_16_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_16_decoded_instruction_packet_index <= 4'h0;
        reservation_station_16_decoded_instruction_instructionType <= 5'h0;
        reservation_station_16_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_16_decoded_instruction_needs_ALU <=
        ~_GEN_264
        & (_GEN_190
             ? ~_GEN_227 & reservation_station_16_decoded_instruction_needs_ALU
             : ~_GEN_186 & reservation_station_16_decoded_instruction_needs_ALU);
      reservation_station_16_decoded_instruction_SUBTRACT <=
        ~_GEN_264
        & (_GEN_190
             ? ~_GEN_227 & reservation_station_16_decoded_instruction_SUBTRACT
             : ~_GEN_186 & reservation_station_16_decoded_instruction_SUBTRACT);
      reservation_station_16_decoded_instruction_MULTIPLY <=
        ~_GEN_264
        & (_GEN_190
             ? ~_GEN_227 & reservation_station_16_decoded_instruction_MULTIPLY
             : ~_GEN_186 & reservation_station_16_decoded_instruction_MULTIPLY);
      reservation_station_16_decoded_instruction_IMMEDIATE <=
        ~_GEN_264
        & (_GEN_190
             ? ~_GEN_227 & reservation_station_16_decoded_instruction_IMMEDIATE
             : ~_GEN_186 & reservation_station_16_decoded_instruction_IMMEDIATE);
      reservation_station_16_ready_bits_RS1_ready <=
        ~_GEN_264 & (_GEN_190 ? ~_GEN_227 & _GEN_165 : ~_GEN_186 & _GEN_165);
      reservation_station_16_ready_bits_RS2_ready <=
        ~_GEN_264 & (_GEN_190 ? ~_GEN_227 & _GEN_145 : ~_GEN_186 & _GEN_145);
      reservation_station_16_valid <=
        ~_GEN_264
        & (_GEN_190
             ? ~(_GEN_207 | _GEN_186) & reservation_station_16_valid
             : ~_GEN_186 & reservation_station_16_valid);
      if (_GEN_267)
        reservation_station_17_decoded_instruction_RD <= 6'h0;
      reservation_station_17_decoded_instruction_RD_valid <=
        ~_GEN_266
        & (_GEN_190
             ? ~_GEN_228 & reservation_station_17_decoded_instruction_RD_valid
             : ~_GEN_187 & reservation_station_17_decoded_instruction_RD_valid);
      if (_GEN_267) begin
        reservation_station_17_decoded_instruction_RS1 <= 6'h0;
        reservation_station_17_decoded_instruction_RS2 <= 6'h0;
        reservation_station_17_decoded_instruction_IMM <= 32'h0;
        reservation_station_17_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_17_decoded_instruction_packet_index <= 4'h0;
        reservation_station_17_decoded_instruction_instructionType <= 5'h0;
        reservation_station_17_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_17_decoded_instruction_needs_ALU <=
        ~_GEN_266
        & (_GEN_190
             ? ~_GEN_228 & reservation_station_17_decoded_instruction_needs_ALU
             : ~_GEN_187 & reservation_station_17_decoded_instruction_needs_ALU);
      reservation_station_17_decoded_instruction_SUBTRACT <=
        ~_GEN_266
        & (_GEN_190
             ? ~_GEN_228 & reservation_station_17_decoded_instruction_SUBTRACT
             : ~_GEN_187 & reservation_station_17_decoded_instruction_SUBTRACT);
      reservation_station_17_decoded_instruction_MULTIPLY <=
        ~_GEN_266
        & (_GEN_190
             ? ~_GEN_228 & reservation_station_17_decoded_instruction_MULTIPLY
             : ~_GEN_187 & reservation_station_17_decoded_instruction_MULTIPLY);
      reservation_station_17_decoded_instruction_IMMEDIATE <=
        ~_GEN_266
        & (_GEN_190
             ? ~_GEN_228 & reservation_station_17_decoded_instruction_IMMEDIATE
             : ~_GEN_187 & reservation_station_17_decoded_instruction_IMMEDIATE);
      reservation_station_17_ready_bits_RS1_ready <=
        ~_GEN_266 & (_GEN_190 ? ~_GEN_228 & _GEN_166 : ~_GEN_187 & _GEN_166);
      reservation_station_17_ready_bits_RS2_ready <=
        ~_GEN_266 & (_GEN_190 ? ~_GEN_228 & _GEN_146 : ~_GEN_187 & _GEN_146);
      reservation_station_17_valid <=
        ~_GEN_266
        & (_GEN_190
             ? ~(_GEN_208 | _GEN_187) & reservation_station_17_valid
             : ~_GEN_187 & reservation_station_17_valid);
      if (_GEN_269)
        reservation_station_18_decoded_instruction_RD <= 6'h0;
      reservation_station_18_decoded_instruction_RD_valid <=
        ~_GEN_268
        & (_GEN_190
             ? ~_GEN_229 & reservation_station_18_decoded_instruction_RD_valid
             : ~_GEN_188 & reservation_station_18_decoded_instruction_RD_valid);
      if (_GEN_269) begin
        reservation_station_18_decoded_instruction_RS1 <= 6'h0;
        reservation_station_18_decoded_instruction_RS2 <= 6'h0;
        reservation_station_18_decoded_instruction_IMM <= 32'h0;
        reservation_station_18_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_18_decoded_instruction_packet_index <= 4'h0;
        reservation_station_18_decoded_instruction_instructionType <= 5'h0;
        reservation_station_18_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_18_decoded_instruction_needs_ALU <=
        ~_GEN_268
        & (_GEN_190
             ? ~_GEN_229 & reservation_station_18_decoded_instruction_needs_ALU
             : ~_GEN_188 & reservation_station_18_decoded_instruction_needs_ALU);
      reservation_station_18_decoded_instruction_SUBTRACT <=
        ~_GEN_268
        & (_GEN_190
             ? ~_GEN_229 & reservation_station_18_decoded_instruction_SUBTRACT
             : ~_GEN_188 & reservation_station_18_decoded_instruction_SUBTRACT);
      reservation_station_18_decoded_instruction_MULTIPLY <=
        ~_GEN_268
        & (_GEN_190
             ? ~_GEN_229 & reservation_station_18_decoded_instruction_MULTIPLY
             : ~_GEN_188 & reservation_station_18_decoded_instruction_MULTIPLY);
      reservation_station_18_decoded_instruction_IMMEDIATE <=
        ~_GEN_268
        & (_GEN_190
             ? ~_GEN_229 & reservation_station_18_decoded_instruction_IMMEDIATE
             : ~_GEN_188 & reservation_station_18_decoded_instruction_IMMEDIATE);
      reservation_station_18_ready_bits_RS1_ready <=
        ~_GEN_268 & (_GEN_190 ? ~_GEN_229 & _GEN_167 : ~_GEN_188 & _GEN_167);
      reservation_station_18_ready_bits_RS2_ready <=
        ~_GEN_268 & (_GEN_190 ? ~_GEN_229 & _GEN_147 : ~_GEN_188 & _GEN_147);
      reservation_station_18_valid <=
        ~_GEN_268
        & (_GEN_190
             ? ~(_GEN_209 | _GEN_188) & reservation_station_18_valid
             : ~_GEN_188 & reservation_station_18_valid);
      if (_GEN_271)
        reservation_station_19_decoded_instruction_RD <= 6'h0;
      reservation_station_19_decoded_instruction_RD_valid <=
        ~_GEN_270
        & (_GEN_190
             ? ~_GEN_230 & reservation_station_19_decoded_instruction_RD_valid
             : ~_GEN_189 & reservation_station_19_decoded_instruction_RD_valid);
      if (_GEN_271) begin
        reservation_station_19_decoded_instruction_RS1 <= 6'h0;
        reservation_station_19_decoded_instruction_RS2 <= 6'h0;
        reservation_station_19_decoded_instruction_IMM <= 32'h0;
        reservation_station_19_decoded_instruction_FUNCT3 <= 3'h0;
        reservation_station_19_decoded_instruction_packet_index <= 4'h0;
        reservation_station_19_decoded_instruction_instructionType <= 5'h0;
        reservation_station_19_decoded_instruction_portID <= 2'h0;
      end
      reservation_station_19_decoded_instruction_needs_ALU <=
        ~_GEN_270
        & (_GEN_190
             ? ~_GEN_230 & reservation_station_19_decoded_instruction_needs_ALU
             : ~_GEN_189 & reservation_station_19_decoded_instruction_needs_ALU);
      reservation_station_19_decoded_instruction_SUBTRACT <=
        ~_GEN_270
        & (_GEN_190
             ? ~_GEN_230 & reservation_station_19_decoded_instruction_SUBTRACT
             : ~_GEN_189 & reservation_station_19_decoded_instruction_SUBTRACT);
      reservation_station_19_decoded_instruction_MULTIPLY <=
        ~_GEN_270
        & (_GEN_190
             ? ~_GEN_230 & reservation_station_19_decoded_instruction_MULTIPLY
             : ~_GEN_189 & reservation_station_19_decoded_instruction_MULTIPLY);
      reservation_station_19_decoded_instruction_IMMEDIATE <=
        ~_GEN_270
        & (_GEN_190
             ? ~_GEN_230 & reservation_station_19_decoded_instruction_IMMEDIATE
             : ~_GEN_189 & reservation_station_19_decoded_instruction_IMMEDIATE);
      reservation_station_19_ready_bits_RS1_ready <=
        ~_GEN_270 & (_GEN_190 ? ~_GEN_230 & _GEN_168 : ~_GEN_189 & _GEN_168);
      reservation_station_19_ready_bits_RS2_ready <=
        ~_GEN_270 & (_GEN_190 ? ~_GEN_230 & _GEN_148 : ~_GEN_189 & _GEN_148);
      reservation_station_19_valid <=
        ~_GEN_270
        & (_GEN_190
             ? ~(_GEN_210 | _GEN_189) & reservation_station_19_valid
             : ~_GEN_189 & reservation_station_19_valid);
    end
  end // always @(posedge)
  assign io_RF_inputs_0_valid = port0_valid & _GEN_116[port0_RS_index];
  assign io_RF_inputs_0_bits_RD = port0_valid ? _GEN_117[port0_RS_index] : 6'h0;
  assign io_RF_inputs_0_bits_RD_valid = port0_valid & _GEN_118[port0_RS_index];
  assign io_RF_inputs_0_bits_RS1 = port0_valid ? _GEN_119[port0_RS_index] : 6'h0;
  assign io_RF_inputs_0_bits_RS2 = port0_valid ? _GEN_120[port0_RS_index] : 6'h0;
  assign io_RF_inputs_0_bits_IMM = port0_valid ? _GEN_121[port0_RS_index] : 32'h0;
  assign io_RF_inputs_0_bits_FUNCT3 = port0_valid ? _GEN_122[port0_RS_index] : 3'h0;
  assign io_RF_inputs_0_bits_packet_index = port0_valid ? _GEN_123[port0_RS_index] : 4'h0;
  assign io_RF_inputs_0_bits_instructionType =
    port0_valid ? _GEN_124[port0_RS_index] : 5'h0;
  assign io_RF_inputs_0_bits_needs_ALU = port0_valid & _GEN_125[port0_RS_index];
  assign io_RF_inputs_0_bits_SUBTRACT = port0_valid & _GEN_126[port0_RS_index];
  assign io_RF_inputs_0_bits_MULTIPLY = port0_valid & _GEN_127[port0_RS_index];
  assign io_RF_inputs_0_bits_IMMEDIATE = port0_valid & _GEN_128[port0_RS_index];
  assign io_RF_inputs_1_valid = port1_valid & _GEN_116[port1_RS_index];
  assign io_RF_inputs_1_bits_RD = port1_valid ? _GEN_117[port1_RS_index] : 6'h0;
  assign io_RF_inputs_1_bits_RD_valid = port1_valid & _GEN_118[port1_RS_index];
  assign io_RF_inputs_1_bits_RS1 = port1_valid ? _GEN_119[port1_RS_index] : 6'h0;
  assign io_RF_inputs_1_bits_RS2 = port1_valid ? _GEN_120[port1_RS_index] : 6'h0;
  assign io_RF_inputs_1_bits_IMM = port1_valid ? _GEN_121[port1_RS_index] : 32'h0;
  assign io_RF_inputs_1_bits_FUNCT3 = port1_valid ? _GEN_122[port1_RS_index] : 3'h0;
  assign io_RF_inputs_1_bits_instructionType =
    port1_valid ? _GEN_124[port1_RS_index] : 5'h0;
  assign io_RF_inputs_1_bits_SUBTRACT = port1_valid & _GEN_126[port1_RS_index];
  assign io_RF_inputs_1_bits_MULTIPLY = port1_valid & _GEN_127[port1_RS_index];
  assign io_RF_inputs_1_bits_IMMEDIATE = port1_valid & _GEN_128[port1_RS_index];
  assign io_RF_inputs_2_valid = port2_valid & _GEN_116[port2_RS_index];
  assign io_RF_inputs_2_bits_RD = port2_valid ? _GEN_117[port2_RS_index] : 6'h0;
  assign io_RF_inputs_2_bits_RD_valid = port2_valid & _GEN_118[port2_RS_index];
  assign io_RF_inputs_2_bits_RS1 = port2_valid ? _GEN_119[port2_RS_index] : 6'h0;
  assign io_RF_inputs_2_bits_RS2 = port2_valid ? _GEN_120[port2_RS_index] : 6'h0;
  assign io_RF_inputs_2_bits_IMM = port2_valid ? _GEN_121[port2_RS_index] : 32'h0;
  assign io_RF_inputs_2_bits_FUNCT3 = port2_valid ? _GEN_122[port2_RS_index] : 3'h0;
  assign io_RF_inputs_2_bits_instructionType =
    port2_valid ? _GEN_124[port2_RS_index] : 5'h0;
  assign io_RF_inputs_2_bits_SUBTRACT = port2_valid & _GEN_126[port2_RS_index];
  assign io_RF_inputs_2_bits_MULTIPLY = port2_valid & _GEN_127[port2_RS_index];
  assign io_RF_inputs_2_bits_IMMEDIATE = port2_valid & _GEN_128[port2_RS_index];
endmodule

// external module nReadmWrite

module ALU(
  input         clock,
                reset,
                io_FU_input_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [31:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input         io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
                io_FU_input_bits_decoded_instruction_IMMEDIATE,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
  output        io_FU_output_valid,
  output [63:0] io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid
);

  reg  [31:0] add_result;
  reg  [31:0] sub_result;
  reg  [31:0] slt_result;
  reg  [31:0] sltu_result;
  reg  [31:0] and_result;
  reg  [31:0] or_result;
  reg  [31:0] xor_result;
  reg  [31:0] sll_result;
  reg  [31:0] srl_result;
  reg  [31:0] sra_result;
  wire        _REMU_T = io_FU_input_bits_decoded_instruction_instructionType == 5'hC;
  wire        _MUL_T_1 = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
  wire        _DIVU_T_1 = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5;
  reg  [5:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg         io_FU_output_valid_REG;
  always @(posedge clock) begin
    if (reset) begin
      add_result <= 32'h0;
      sub_result <= 32'h0;
      slt_result <= 32'h0;
      sltu_result <= 32'h0;
      and_result <= 32'h0;
      or_result <= 32'h0;
      xor_result <= 32'h0;
      sll_result <= 32'h0;
      srl_result <= 32'h0;
      sra_result <= 32'h0;
    end
    else begin
      automatic logic [31:0] operand2 =
        io_FU_input_bits_decoded_instruction_IMMEDIATE
          ? io_FU_input_bits_decoded_instruction_IMM
          : io_FU_input_bits_RS2_data;
      automatic logic [31:0] _GEN = {27'h0, operand2[4:0]};
      automatic logic [62:0] _sll_result_T_1 =
        {31'h0, io_FU_input_bits_RS1_data} << operand2[4:0];
      add_result <= io_FU_input_bits_RS1_data + operand2;
      sub_result <= io_FU_input_bits_RS1_data - operand2;
      slt_result <= {31'h0, $signed(io_FU_input_bits_RS1_data) < $signed(operand2)};
      sltu_result <= {31'h0, io_FU_input_bits_RS1_data < operand2};
      and_result <= io_FU_input_bits_RS1_data & operand2;
      or_result <= io_FU_input_bits_RS1_data | operand2;
      xor_result <= io_FU_input_bits_RS1_data ^ operand2;
      sll_result <= _sll_result_T_1[31:0];
      srl_result <= io_FU_input_bits_RS1_data >> _GEN;
      sra_result <= io_FU_input_bits_RS1_data >> _GEN;
    end
    io_FU_output_bits_RD_REG <= io_FU_input_bits_decoded_instruction_RD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits_decoded_instruction_RD_valid;
    io_FU_output_valid_REG <= io_FU_input_valid;
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_RD = {58'h0, io_FU_output_bits_RD_REG};
  assign io_FU_output_bits_RD_data =
    _REMU_T & _MUL_T_1 & ~io_FU_input_bits_decoded_instruction_MULTIPLY
    & io_FU_input_bits_decoded_instruction_SUBTRACT
      ? add_result
      : _REMU_T & _MUL_T_1 & ~io_FU_input_bits_decoded_instruction_MULTIPLY
        & io_FU_input_bits_decoded_instruction_SUBTRACT
          ? sub_result
          : _REMU_T & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h4
            & ~io_FU_input_bits_decoded_instruction_MULTIPLY
              ? xor_result
              : _REMU_T & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h6
                & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                  ? or_result
                  : _REMU_T & (&io_FU_input_bits_decoded_instruction_FUNCT3)
                    & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                      ? and_result
                      : _REMU_T & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1
                        & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                          ? sll_result
                          : _REMU_T & _DIVU_T_1
                            & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                              ? srl_result
                              : _REMU_T & _DIVU_T_1
                                & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                                  ? sra_result
                                  : _REMU_T
                                    & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h2
                                    & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                                      ? slt_result
                                      : _REMU_T
                                        & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h3
                                        & ~io_FU_input_bits_decoded_instruction_MULTIPLY
                                          ? sltu_result
                                          : 32'h0;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
endmodule

module branch_unit(
  input         clock,
                io_FU_input_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [3:0]  io_FU_input_bits_decoded_instruction_packet_index,
  output        io_FU_output_valid,
  output [63:0] io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid
);

  reg [5:0]  io_FU_output_bits_RD_REG;
  reg        io_FU_output_bits_RD_valid_REG;
  reg [31:0] io_FU_output_bits_RD_data_REG;
  reg        io_FU_output_valid_REG;
  always @(posedge clock) begin
    io_FU_output_bits_RD_REG <= io_FU_input_bits_decoded_instruction_RD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits_decoded_instruction_RD_valid;
    io_FU_output_bits_RD_data_REG <=
      {28'h0, io_FU_input_bits_decoded_instruction_packet_index} + 32'h4;
    io_FU_output_valid_REG <= io_FU_input_valid;
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_RD = {58'h0, io_FU_output_bits_RD_REG};
  assign io_FU_output_bits_RD_data = io_FU_output_bits_RD_data_REG;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
endmodule

module FU(
  input         clock,
                reset,
                io_FU_input_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [31:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [3:0]  io_FU_input_bits_decoded_instruction_packet_index,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input         io_FU_input_bits_decoded_instruction_needs_ALU,
                io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
                io_FU_input_bits_decoded_instruction_IMMEDIATE,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
  output        io_FU_output_valid,
  output [63:0] io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid
);

  wire        _branch_unit_io_FU_output_valid;
  wire [63:0] _branch_unit_io_FU_output_bits_RD;
  wire [31:0] _branch_unit_io_FU_output_bits_RD_data;
  wire        _branch_unit_io_FU_output_bits_RD_valid;
  wire        _ALU_io_FU_output_valid;
  wire [63:0] _ALU_io_FU_output_bits_RD;
  wire [31:0] _ALU_io_FU_output_bits_RD_data;
  wire        _ALU_io_FU_output_bits_RD_valid;
  wire        is_ALU = io_FU_input_bits_decoded_instruction_needs_ALU & io_FU_input_valid;
  ALU ALU (
    .clock                                                (clock),
    .reset                                                (reset),
    .io_FU_input_valid                                    (io_FU_input_valid),
    .io_FU_input_bits_decoded_instruction_RD
      (io_FU_input_bits_decoded_instruction_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (io_FU_input_bits_decoded_instruction_RD_valid),
    .io_FU_input_bits_decoded_instruction_IMM
      (io_FU_input_bits_decoded_instruction_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (io_FU_input_bits_decoded_instruction_FUNCT3),
    .io_FU_input_bits_decoded_instruction_instructionType
      (io_FU_input_bits_decoded_instruction_instructionType),
    .io_FU_input_bits_decoded_instruction_SUBTRACT
      (io_FU_input_bits_decoded_instruction_SUBTRACT),
    .io_FU_input_bits_decoded_instruction_MULTIPLY
      (io_FU_input_bits_decoded_instruction_MULTIPLY),
    .io_FU_input_bits_decoded_instruction_IMMEDIATE
      (io_FU_input_bits_decoded_instruction_IMMEDIATE),
    .io_FU_input_bits_RS1_data                            (io_FU_input_bits_RS1_data),
    .io_FU_input_bits_RS2_data                            (io_FU_input_bits_RS2_data),
    .io_FU_output_valid                                   (_ALU_io_FU_output_valid),
    .io_FU_output_bits_RD                                 (_ALU_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data
      (_ALU_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid
      (_ALU_io_FU_output_bits_RD_valid)
  );
  branch_unit branch_unit (
    .clock                                             (clock),
    .io_FU_input_valid                                 (io_FU_input_valid),
    .io_FU_input_bits_decoded_instruction_RD
      (io_FU_input_bits_decoded_instruction_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (io_FU_input_bits_decoded_instruction_RD_valid),
    .io_FU_input_bits_decoded_instruction_packet_index
      (io_FU_input_bits_decoded_instruction_packet_index),
    .io_FU_output_valid                                (_branch_unit_io_FU_output_valid),
    .io_FU_output_bits_RD
      (_branch_unit_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data
      (_branch_unit_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid
      (_branch_unit_io_FU_output_bits_RD_valid)
  );
  assign io_FU_output_valid =
    is_ALU ? _ALU_io_FU_output_valid : _branch_unit_io_FU_output_valid;
  assign io_FU_output_bits_RD =
    is_ALU ? _ALU_io_FU_output_bits_RD : _branch_unit_io_FU_output_bits_RD;
  assign io_FU_output_bits_RD_data =
    is_ALU ? _ALU_io_FU_output_bits_RD_data : _branch_unit_io_FU_output_bits_RD_data;
  assign io_FU_output_bits_RD_valid =
    is_ALU ? _ALU_io_FU_output_bits_RD_valid : _branch_unit_io_FU_output_bits_RD_valid;
endmodule

module FU_1(
  input         clock,
                reset,
                io_FU_input_valid,
  input  [5:0]  io_FU_input_bits_decoded_instruction_RD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [31:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input         io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
                io_FU_input_bits_decoded_instruction_IMMEDIATE,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_RS2_data,
  output        io_FU_output_valid,
  output [63:0] io_FU_output_bits_RD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid
);

  ALU ALU (
    .clock                                                (clock),
    .reset                                                (reset),
    .io_FU_input_valid                                    (io_FU_input_valid),
    .io_FU_input_bits_decoded_instruction_RD
      (io_FU_input_bits_decoded_instruction_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (io_FU_input_bits_decoded_instruction_RD_valid),
    .io_FU_input_bits_decoded_instruction_IMM
      (io_FU_input_bits_decoded_instruction_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (io_FU_input_bits_decoded_instruction_FUNCT3),
    .io_FU_input_bits_decoded_instruction_instructionType
      (io_FU_input_bits_decoded_instruction_instructionType),
    .io_FU_input_bits_decoded_instruction_SUBTRACT
      (io_FU_input_bits_decoded_instruction_SUBTRACT),
    .io_FU_input_bits_decoded_instruction_MULTIPLY
      (io_FU_input_bits_decoded_instruction_MULTIPLY),
    .io_FU_input_bits_decoded_instruction_IMMEDIATE
      (io_FU_input_bits_decoded_instruction_IMMEDIATE),
    .io_FU_input_bits_RS1_data                            (io_FU_input_bits_RS1_data),
    .io_FU_input_bits_RS2_data                            (io_FU_input_bits_RS2_data),
    .io_FU_output_valid                                   (io_FU_output_valid),
    .io_FU_output_bits_RD                                 (io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data                            (io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid                           (io_FU_output_bits_RD_valid)
  );
endmodule

module MEMFU(
  input          clock,
                 io_FU_input_valid,
  input  [5:0]   io_FU_input_bits_decoded_instruction_RD,
  input  [31:0]  io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]   io_FU_input_bits_decoded_instruction_FUNCT3,
  input          io_FU_input_bits_decoded_instruction_IS_LOAD,
                 io_FU_input_bits_decoded_instruction_IS_STORE,
  input  [31:0]  io_FU_input_bits_RS1_data,
                 io_FU_input_bits_RS2_data,
  input  [255:0] io_DRAM_resp_bits_data,
  output         io_FU_output_valid,
  output [63:0]  io_FU_output_bits_RD,
  output [31:0]  io_FU_output_bits_RD_data,
  output         io_FU_output_bits_RD_valid,
                 io_DRAM_request_valid,
  output [31:0]  io_DRAM_request_bits_addr,
                 io_DRAM_request_bits_wr_data,
  output         io_DRAM_request_bits_wr_en
);

  wire        IS_LOAD = io_FU_input_bits_decoded_instruction_IS_LOAD & io_FU_input_valid;
  wire        IS_STORE =
    io_FU_input_bits_decoded_instruction_IS_STORE & io_FU_input_valid;
  wire        _LB_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
  wire        _LH_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
  wire        _LW_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h2;
  reg         REG;
  wire [31:0] _GEN = {24'h0, io_DRAM_resp_bits_data[7:0]};
  reg         REG_1;
  wire [31:0] _GEN_0 = {16'h0, io_DRAM_resp_bits_data[15:0]};
  reg         REG_2;
  reg         REG_3;
  reg         REG_4;
  reg  [5:0]  io_FU_output_bits_RD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg         io_FU_output_valid_REG;
  always @(posedge clock) begin
    REG <= IS_LOAD & _LB_T & io_FU_input_valid;
    REG_1 <= IS_LOAD & _LH_T & io_FU_input_valid;
    REG_2 <= IS_LOAD & _LW_T & io_FU_input_valid;
    REG_3 <=
      IS_LOAD & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h4 & io_FU_input_valid;
    REG_4 <=
      IS_LOAD & io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5 & io_FU_input_valid;
    io_FU_output_bits_RD_REG <= io_FU_input_bits_decoded_instruction_RD;
    io_FU_output_bits_RD_valid_REG <= IS_LOAD;
    io_FU_output_valid_REG <= io_FU_input_valid;
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG;
  assign io_FU_output_bits_RD = {58'h0, io_FU_output_bits_RD_REG};
  assign io_FU_output_bits_RD_data =
    REG_4
      ? _GEN_0
      : REG_3
          ? _GEN
          : REG_2 ? io_DRAM_resp_bits_data[31:0] : REG_1 ? _GEN_0 : REG ? _GEN : 32'h0;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
  assign io_DRAM_request_valid = IS_LOAD | IS_STORE;
  assign io_DRAM_request_bits_addr =
    io_FU_input_bits_RS1_data + io_FU_input_bits_decoded_instruction_IMM;
  assign io_DRAM_request_bits_wr_data =
    IS_STORE & _LB_T & io_FU_input_valid
      ? io_FU_input_bits_RS2_data
      : IS_STORE & _LH_T & io_FU_input_valid
          ? {16'h0, io_FU_input_bits_RS2_data[15:0]}
          : IS_STORE & _LW_T & io_FU_input_valid
              ? {24'h0, io_FU_input_bits_RS2_data[7:0]}
              : 32'h0;
  assign io_DRAM_request_bits_wr_en = IS_STORE;
endmodule

module backend(
  input          clock,
                 reset,
  input  [255:0] io_DRAM_resp_bits_data,
  output         io_DRAM_request_valid,
  output [31:0]  io_DRAM_request_bits_addr,
                 io_DRAM_request_bits_wr_data,
  output         io_DRAM_request_bits_wr_en,
                 io_FU_outputs_0_bits_RD_valid,
                 io_FU_outputs_1_bits_RD_valid,
                 io_FU_outputs_2_bits_RD_valid,
                 io_FU_outputs_3_bits_RD_valid
);

  wire        _FU3_io_FU_output_valid;
  wire [63:0] _FU3_io_FU_output_bits_RD;
  wire [31:0] _FU3_io_FU_output_bits_RD_data;
  wire        _FU3_io_FU_output_bits_RD_valid;
  wire        _FU2_io_FU_output_valid;
  wire [63:0] _FU2_io_FU_output_bits_RD;
  wire [31:0] _FU2_io_FU_output_bits_RD_data;
  wire        _FU2_io_FU_output_bits_RD_valid;
  wire        _FU1_io_FU_output_valid;
  wire [63:0] _FU1_io_FU_output_bits_RD;
  wire [31:0] _FU1_io_FU_output_bits_RD_data;
  wire        _FU1_io_FU_output_bits_RD_valid;
  wire        _FU0_io_FU_output_valid;
  wire [63:0] _FU0_io_FU_output_bits_RD;
  wire [31:0] _FU0_io_FU_output_bits_RD_data;
  wire        _FU0_io_FU_output_bits_RD_valid;
  wire [31:0] _INT_PRF_rdata_0;
  wire [31:0] _INT_PRF_rdata_1;
  wire [31:0] _INT_PRF_rdata_2;
  wire [31:0] _INT_PRF_rdata_3;
  wire [31:0] _INT_PRF_rdata_4;
  wire [31:0] _INT_PRF_rdata_5;
  wire [31:0] _INT_PRF_rdata_6;
  wire [31:0] _INT_PRF_rdata_7;
  wire        _INT_RS_io_RF_inputs_0_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_0_bits_RD;
  wire        _INT_RS_io_RF_inputs_0_bits_RD_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_0_bits_RS1;
  wire [5:0]  _INT_RS_io_RF_inputs_0_bits_RS2;
  wire [31:0] _INT_RS_io_RF_inputs_0_bits_IMM;
  wire [2:0]  _INT_RS_io_RF_inputs_0_bits_FUNCT3;
  wire [3:0]  _INT_RS_io_RF_inputs_0_bits_packet_index;
  wire [4:0]  _INT_RS_io_RF_inputs_0_bits_instructionType;
  wire        _INT_RS_io_RF_inputs_0_bits_needs_ALU;
  wire        _INT_RS_io_RF_inputs_0_bits_SUBTRACT;
  wire        _INT_RS_io_RF_inputs_0_bits_MULTIPLY;
  wire        _INT_RS_io_RF_inputs_0_bits_IMMEDIATE;
  wire        _INT_RS_io_RF_inputs_1_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_1_bits_RD;
  wire        _INT_RS_io_RF_inputs_1_bits_RD_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_1_bits_RS1;
  wire [5:0]  _INT_RS_io_RF_inputs_1_bits_RS2;
  wire [31:0] _INT_RS_io_RF_inputs_1_bits_IMM;
  wire [2:0]  _INT_RS_io_RF_inputs_1_bits_FUNCT3;
  wire [4:0]  _INT_RS_io_RF_inputs_1_bits_instructionType;
  wire        _INT_RS_io_RF_inputs_1_bits_SUBTRACT;
  wire        _INT_RS_io_RF_inputs_1_bits_MULTIPLY;
  wire        _INT_RS_io_RF_inputs_1_bits_IMMEDIATE;
  wire        _INT_RS_io_RF_inputs_2_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_2_bits_RD;
  wire        _INT_RS_io_RF_inputs_2_bits_RD_valid;
  wire [5:0]  _INT_RS_io_RF_inputs_2_bits_RS1;
  wire [5:0]  _INT_RS_io_RF_inputs_2_bits_RS2;
  wire [31:0] _INT_RS_io_RF_inputs_2_bits_IMM;
  wire [2:0]  _INT_RS_io_RF_inputs_2_bits_FUNCT3;
  wire [4:0]  _INT_RS_io_RF_inputs_2_bits_instructionType;
  wire        _INT_RS_io_RF_inputs_2_bits_SUBTRACT;
  wire        _INT_RS_io_RF_inputs_2_bits_MULTIPLY;
  wire        _INT_RS_io_RF_inputs_2_bits_IMMEDIATE;
  reg  [5:0]  read_decoded_instructions_0_decoded_instruction_REG_RD;
  reg         read_decoded_instructions_0_decoded_instruction_REG_RD_valid;
  reg  [31:0] read_decoded_instructions_0_decoded_instruction_REG_IMM;
  reg  [2:0]  read_decoded_instructions_0_decoded_instruction_REG_FUNCT3;
  reg  [3:0]  read_decoded_instructions_0_decoded_instruction_REG_packet_index;
  reg  [4:0]  read_decoded_instructions_0_decoded_instruction_REG_instructionType;
  reg         read_decoded_instructions_0_decoded_instruction_REG_needs_ALU;
  reg         read_decoded_instructions_0_decoded_instruction_REG_SUBTRACT;
  reg         read_decoded_instructions_0_decoded_instruction_REG_MULTIPLY;
  reg         read_decoded_instructions_0_decoded_instruction_REG_IMMEDIATE;
  reg  [5:0]  read_decoded_instructions_1_decoded_instruction_REG_RD;
  reg         read_decoded_instructions_1_decoded_instruction_REG_RD_valid;
  reg  [31:0] read_decoded_instructions_1_decoded_instruction_REG_IMM;
  reg  [2:0]  read_decoded_instructions_1_decoded_instruction_REG_FUNCT3;
  reg  [4:0]  read_decoded_instructions_1_decoded_instruction_REG_instructionType;
  reg         read_decoded_instructions_1_decoded_instruction_REG_SUBTRACT;
  reg         read_decoded_instructions_1_decoded_instruction_REG_MULTIPLY;
  reg         read_decoded_instructions_1_decoded_instruction_REG_IMMEDIATE;
  reg  [5:0]  read_decoded_instructions_2_decoded_instruction_REG_RD;
  reg         read_decoded_instructions_2_decoded_instruction_REG_RD_valid;
  reg  [31:0] read_decoded_instructions_2_decoded_instruction_REG_IMM;
  reg  [2:0]  read_decoded_instructions_2_decoded_instruction_REG_FUNCT3;
  reg  [4:0]  read_decoded_instructions_2_decoded_instruction_REG_instructionType;
  reg         read_decoded_instructions_2_decoded_instruction_REG_SUBTRACT;
  reg         read_decoded_instructions_2_decoded_instruction_REG_MULTIPLY;
  reg         read_decoded_instructions_2_decoded_instruction_REG_IMMEDIATE;
  reg  [5:0]  read_decoded_instructions_3_decoded_instruction_REG_RD;
  reg  [31:0] read_decoded_instructions_3_decoded_instruction_REG_IMM;
  reg  [2:0]  read_decoded_instructions_3_decoded_instruction_REG_FUNCT3;
  reg         read_decoded_instructions_3_decoded_instruction_REG_IS_LOAD;
  reg         read_decoded_instructions_3_decoded_instruction_REG_IS_STORE;
  reg         FU0_io_FU_input_valid_REG;
  reg         FU1_io_FU_input_valid_REG;
  reg         FU2_io_FU_input_valid_REG;
  reg         FU3_io_FU_input_valid_REG;
  always @(posedge clock) begin
    read_decoded_instructions_0_decoded_instruction_REG_RD <=
      _INT_RS_io_RF_inputs_0_bits_RD;
    read_decoded_instructions_0_decoded_instruction_REG_RD_valid <=
      _INT_RS_io_RF_inputs_0_bits_RD_valid;
    read_decoded_instructions_0_decoded_instruction_REG_IMM <=
      _INT_RS_io_RF_inputs_0_bits_IMM;
    read_decoded_instructions_0_decoded_instruction_REG_FUNCT3 <=
      _INT_RS_io_RF_inputs_0_bits_FUNCT3;
    read_decoded_instructions_0_decoded_instruction_REG_packet_index <=
      _INT_RS_io_RF_inputs_0_bits_packet_index;
    read_decoded_instructions_0_decoded_instruction_REG_instructionType <=
      _INT_RS_io_RF_inputs_0_bits_instructionType;
    read_decoded_instructions_0_decoded_instruction_REG_needs_ALU <=
      _INT_RS_io_RF_inputs_0_bits_needs_ALU;
    read_decoded_instructions_0_decoded_instruction_REG_SUBTRACT <=
      _INT_RS_io_RF_inputs_0_bits_SUBTRACT;
    read_decoded_instructions_0_decoded_instruction_REG_MULTIPLY <=
      _INT_RS_io_RF_inputs_0_bits_MULTIPLY;
    read_decoded_instructions_0_decoded_instruction_REG_IMMEDIATE <=
      _INT_RS_io_RF_inputs_0_bits_IMMEDIATE;
    read_decoded_instructions_1_decoded_instruction_REG_RD <=
      _INT_RS_io_RF_inputs_1_bits_RD;
    read_decoded_instructions_1_decoded_instruction_REG_RD_valid <=
      _INT_RS_io_RF_inputs_1_bits_RD_valid;
    read_decoded_instructions_1_decoded_instruction_REG_IMM <=
      _INT_RS_io_RF_inputs_1_bits_IMM;
    read_decoded_instructions_1_decoded_instruction_REG_FUNCT3 <=
      _INT_RS_io_RF_inputs_1_bits_FUNCT3;
    read_decoded_instructions_1_decoded_instruction_REG_instructionType <=
      _INT_RS_io_RF_inputs_1_bits_instructionType;
    read_decoded_instructions_1_decoded_instruction_REG_SUBTRACT <=
      _INT_RS_io_RF_inputs_1_bits_SUBTRACT;
    read_decoded_instructions_1_decoded_instruction_REG_MULTIPLY <=
      _INT_RS_io_RF_inputs_1_bits_MULTIPLY;
    read_decoded_instructions_1_decoded_instruction_REG_IMMEDIATE <=
      _INT_RS_io_RF_inputs_1_bits_IMMEDIATE;
    read_decoded_instructions_2_decoded_instruction_REG_RD <=
      _INT_RS_io_RF_inputs_2_bits_RD;
    read_decoded_instructions_2_decoded_instruction_REG_RD_valid <=
      _INT_RS_io_RF_inputs_2_bits_RD_valid;
    read_decoded_instructions_2_decoded_instruction_REG_IMM <=
      _INT_RS_io_RF_inputs_2_bits_IMM;
    read_decoded_instructions_2_decoded_instruction_REG_FUNCT3 <=
      _INT_RS_io_RF_inputs_2_bits_FUNCT3;
    read_decoded_instructions_2_decoded_instruction_REG_instructionType <=
      _INT_RS_io_RF_inputs_2_bits_instructionType;
    read_decoded_instructions_2_decoded_instruction_REG_SUBTRACT <=
      _INT_RS_io_RF_inputs_2_bits_SUBTRACT;
    read_decoded_instructions_2_decoded_instruction_REG_MULTIPLY <=
      _INT_RS_io_RF_inputs_2_bits_MULTIPLY;
    read_decoded_instructions_2_decoded_instruction_REG_IMMEDIATE <=
      _INT_RS_io_RF_inputs_2_bits_IMMEDIATE;
    read_decoded_instructions_3_decoded_instruction_REG_RD <= 6'h0;
    read_decoded_instructions_3_decoded_instruction_REG_IMM <= 32'h0;
    read_decoded_instructions_3_decoded_instruction_REG_FUNCT3 <= 3'h0;
    read_decoded_instructions_3_decoded_instruction_REG_IS_LOAD <= 1'h0;
    read_decoded_instructions_3_decoded_instruction_REG_IS_STORE <= 1'h0;
    FU0_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_0_valid;
    FU1_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_1_valid;
    FU2_io_FU_input_valid_REG <= _INT_RS_io_RF_inputs_2_valid;
    FU3_io_FU_input_valid_REG <= 1'h0;
  end // always @(posedge)
  RS INT_RS (
    .clock                               (clock),
    .reset                               (reset),
    .io_FU_outputs_0_valid               (_FU0_io_FU_output_valid),
    .io_FU_outputs_0_bits_RD             (_FU0_io_FU_output_bits_RD),
    .io_FU_outputs_0_bits_RD_valid       (_FU0_io_FU_output_bits_RD_valid),
    .io_FU_outputs_1_valid               (_FU1_io_FU_output_valid),
    .io_FU_outputs_1_bits_RD             (_FU1_io_FU_output_bits_RD),
    .io_FU_outputs_1_bits_RD_valid       (_FU1_io_FU_output_bits_RD_valid),
    .io_FU_outputs_2_valid               (_FU2_io_FU_output_valid),
    .io_FU_outputs_2_bits_RD             (_FU2_io_FU_output_bits_RD),
    .io_FU_outputs_2_bits_RD_valid       (_FU2_io_FU_output_bits_RD_valid),
    .io_FU_outputs_3_valid               (_FU3_io_FU_output_valid),
    .io_FU_outputs_3_bits_RD             (_FU3_io_FU_output_bits_RD),
    .io_FU_outputs_3_bits_RD_valid       (_FU3_io_FU_output_bits_RD_valid),
    .io_RF_inputs_0_valid                (_INT_RS_io_RF_inputs_0_valid),
    .io_RF_inputs_0_bits_RD              (_INT_RS_io_RF_inputs_0_bits_RD),
    .io_RF_inputs_0_bits_RD_valid        (_INT_RS_io_RF_inputs_0_bits_RD_valid),
    .io_RF_inputs_0_bits_RS1             (_INT_RS_io_RF_inputs_0_bits_RS1),
    .io_RF_inputs_0_bits_RS2             (_INT_RS_io_RF_inputs_0_bits_RS2),
    .io_RF_inputs_0_bits_IMM             (_INT_RS_io_RF_inputs_0_bits_IMM),
    .io_RF_inputs_0_bits_FUNCT3          (_INT_RS_io_RF_inputs_0_bits_FUNCT3),
    .io_RF_inputs_0_bits_packet_index    (_INT_RS_io_RF_inputs_0_bits_packet_index),
    .io_RF_inputs_0_bits_instructionType (_INT_RS_io_RF_inputs_0_bits_instructionType),
    .io_RF_inputs_0_bits_needs_ALU       (_INT_RS_io_RF_inputs_0_bits_needs_ALU),
    .io_RF_inputs_0_bits_SUBTRACT        (_INT_RS_io_RF_inputs_0_bits_SUBTRACT),
    .io_RF_inputs_0_bits_MULTIPLY        (_INT_RS_io_RF_inputs_0_bits_MULTIPLY),
    .io_RF_inputs_0_bits_IMMEDIATE       (_INT_RS_io_RF_inputs_0_bits_IMMEDIATE),
    .io_RF_inputs_1_valid                (_INT_RS_io_RF_inputs_1_valid),
    .io_RF_inputs_1_bits_RD              (_INT_RS_io_RF_inputs_1_bits_RD),
    .io_RF_inputs_1_bits_RD_valid        (_INT_RS_io_RF_inputs_1_bits_RD_valid),
    .io_RF_inputs_1_bits_RS1             (_INT_RS_io_RF_inputs_1_bits_RS1),
    .io_RF_inputs_1_bits_RS2             (_INT_RS_io_RF_inputs_1_bits_RS2),
    .io_RF_inputs_1_bits_IMM             (_INT_RS_io_RF_inputs_1_bits_IMM),
    .io_RF_inputs_1_bits_FUNCT3          (_INT_RS_io_RF_inputs_1_bits_FUNCT3),
    .io_RF_inputs_1_bits_instructionType (_INT_RS_io_RF_inputs_1_bits_instructionType),
    .io_RF_inputs_1_bits_SUBTRACT        (_INT_RS_io_RF_inputs_1_bits_SUBTRACT),
    .io_RF_inputs_1_bits_MULTIPLY        (_INT_RS_io_RF_inputs_1_bits_MULTIPLY),
    .io_RF_inputs_1_bits_IMMEDIATE       (_INT_RS_io_RF_inputs_1_bits_IMMEDIATE),
    .io_RF_inputs_2_valid                (_INT_RS_io_RF_inputs_2_valid),
    .io_RF_inputs_2_bits_RD              (_INT_RS_io_RF_inputs_2_bits_RD),
    .io_RF_inputs_2_bits_RD_valid        (_INT_RS_io_RF_inputs_2_bits_RD_valid),
    .io_RF_inputs_2_bits_RS1             (_INT_RS_io_RF_inputs_2_bits_RS1),
    .io_RF_inputs_2_bits_RS2             (_INT_RS_io_RF_inputs_2_bits_RS2),
    .io_RF_inputs_2_bits_IMM             (_INT_RS_io_RF_inputs_2_bits_IMM),
    .io_RF_inputs_2_bits_FUNCT3          (_INT_RS_io_RF_inputs_2_bits_FUNCT3),
    .io_RF_inputs_2_bits_instructionType (_INT_RS_io_RF_inputs_2_bits_instructionType),
    .io_RF_inputs_2_bits_SUBTRACT        (_INT_RS_io_RF_inputs_2_bits_SUBTRACT),
    .io_RF_inputs_2_bits_MULTIPLY        (_INT_RS_io_RF_inputs_2_bits_MULTIPLY),
    .io_RF_inputs_2_bits_IMMEDIATE       (_INT_RS_io_RF_inputs_2_bits_IMMEDIATE)
  );
  nReadmWrite INT_PRF (
    .clock   (clock),
    .reset   (reset),
    .raddr_0 (_INT_RS_io_RF_inputs_0_bits_RS1),
    .raddr_1 (_INT_RS_io_RF_inputs_0_bits_RS2),
    .raddr_2 (_INT_RS_io_RF_inputs_1_bits_RS1),
    .raddr_3 (_INT_RS_io_RF_inputs_1_bits_RS2),
    .raddr_4 (_INT_RS_io_RF_inputs_2_bits_RS1),
    .raddr_5 (_INT_RS_io_RF_inputs_2_bits_RS2),
    .raddr_6 (6'h0),
    .raddr_7 (6'h0),
    .rdata_0 (_INT_PRF_rdata_0),
    .rdata_1 (_INT_PRF_rdata_1),
    .rdata_2 (_INT_PRF_rdata_2),
    .rdata_3 (_INT_PRF_rdata_3),
    .rdata_4 (_INT_PRF_rdata_4),
    .rdata_5 (_INT_PRF_rdata_5),
    .rdata_6 (_INT_PRF_rdata_6),
    .rdata_7 (_INT_PRF_rdata_7),
    .waddr_0 (_FU0_io_FU_output_bits_RD[5:0]),
    .waddr_1 (_FU1_io_FU_output_bits_RD[5:0]),
    .waddr_2 (_FU2_io_FU_output_bits_RD[5:0]),
    .waddr_3 (_FU3_io_FU_output_bits_RD[5:0]),
    .wen_0   (_FU0_io_FU_output_valid & _FU0_io_FU_output_bits_RD_valid),
    .wen_1   (_FU1_io_FU_output_valid & _FU1_io_FU_output_bits_RD_valid),
    .wen_2   (_FU2_io_FU_output_valid & _FU2_io_FU_output_bits_RD_valid),
    .wen_3   (_FU3_io_FU_output_valid & _FU3_io_FU_output_bits_RD_valid),
    .wdata_0 (_FU0_io_FU_output_bits_RD_data),
    .wdata_1 (_FU1_io_FU_output_bits_RD_data),
    .wdata_2 (_FU2_io_FU_output_bits_RD_data),
    .wdata_3 (_FU3_io_FU_output_bits_RD_data)
  );
  FU FU0 (
    .clock                                                (clock),
    .reset                                                (reset),
    .io_FU_input_valid                                    (FU0_io_FU_input_valid_REG),
    .io_FU_input_bits_decoded_instruction_RD
      (read_decoded_instructions_0_decoded_instruction_REG_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (read_decoded_instructions_0_decoded_instruction_REG_RD_valid),
    .io_FU_input_bits_decoded_instruction_IMM
      (read_decoded_instructions_0_decoded_instruction_REG_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (read_decoded_instructions_0_decoded_instruction_REG_FUNCT3),
    .io_FU_input_bits_decoded_instruction_packet_index
      (read_decoded_instructions_0_decoded_instruction_REG_packet_index),
    .io_FU_input_bits_decoded_instruction_instructionType
      (read_decoded_instructions_0_decoded_instruction_REG_instructionType),
    .io_FU_input_bits_decoded_instruction_needs_ALU
      (read_decoded_instructions_0_decoded_instruction_REG_needs_ALU),
    .io_FU_input_bits_decoded_instruction_SUBTRACT
      (read_decoded_instructions_0_decoded_instruction_REG_SUBTRACT),
    .io_FU_input_bits_decoded_instruction_MULTIPLY
      (read_decoded_instructions_0_decoded_instruction_REG_MULTIPLY),
    .io_FU_input_bits_decoded_instruction_IMMEDIATE
      (read_decoded_instructions_0_decoded_instruction_REG_IMMEDIATE),
    .io_FU_input_bits_RS1_data                            (_INT_PRF_rdata_0),
    .io_FU_input_bits_RS2_data                            (_INT_PRF_rdata_1),
    .io_FU_output_valid                                   (_FU0_io_FU_output_valid),
    .io_FU_output_bits_RD                                 (_FU0_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data
      (_FU0_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid
      (_FU0_io_FU_output_bits_RD_valid)
  );
  FU_1 FU1 (
    .clock                                                (clock),
    .reset                                                (reset),
    .io_FU_input_valid                                    (FU1_io_FU_input_valid_REG),
    .io_FU_input_bits_decoded_instruction_RD
      (read_decoded_instructions_1_decoded_instruction_REG_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (read_decoded_instructions_1_decoded_instruction_REG_RD_valid),
    .io_FU_input_bits_decoded_instruction_IMM
      (read_decoded_instructions_1_decoded_instruction_REG_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (read_decoded_instructions_1_decoded_instruction_REG_FUNCT3),
    .io_FU_input_bits_decoded_instruction_instructionType
      (read_decoded_instructions_1_decoded_instruction_REG_instructionType),
    .io_FU_input_bits_decoded_instruction_SUBTRACT
      (read_decoded_instructions_1_decoded_instruction_REG_SUBTRACT),
    .io_FU_input_bits_decoded_instruction_MULTIPLY
      (read_decoded_instructions_1_decoded_instruction_REG_MULTIPLY),
    .io_FU_input_bits_decoded_instruction_IMMEDIATE
      (read_decoded_instructions_1_decoded_instruction_REG_IMMEDIATE),
    .io_FU_input_bits_RS1_data                            (_INT_PRF_rdata_2),
    .io_FU_input_bits_RS2_data                            (_INT_PRF_rdata_3),
    .io_FU_output_valid                                   (_FU1_io_FU_output_valid),
    .io_FU_output_bits_RD                                 (_FU1_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data
      (_FU1_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid
      (_FU1_io_FU_output_bits_RD_valid)
  );
  FU_1 FU2 (
    .clock                                                (clock),
    .reset                                                (reset),
    .io_FU_input_valid                                    (FU2_io_FU_input_valid_REG),
    .io_FU_input_bits_decoded_instruction_RD
      (read_decoded_instructions_2_decoded_instruction_REG_RD),
    .io_FU_input_bits_decoded_instruction_RD_valid
      (read_decoded_instructions_2_decoded_instruction_REG_RD_valid),
    .io_FU_input_bits_decoded_instruction_IMM
      (read_decoded_instructions_2_decoded_instruction_REG_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (read_decoded_instructions_2_decoded_instruction_REG_FUNCT3),
    .io_FU_input_bits_decoded_instruction_instructionType
      (read_decoded_instructions_2_decoded_instruction_REG_instructionType),
    .io_FU_input_bits_decoded_instruction_SUBTRACT
      (read_decoded_instructions_2_decoded_instruction_REG_SUBTRACT),
    .io_FU_input_bits_decoded_instruction_MULTIPLY
      (read_decoded_instructions_2_decoded_instruction_REG_MULTIPLY),
    .io_FU_input_bits_decoded_instruction_IMMEDIATE
      (read_decoded_instructions_2_decoded_instruction_REG_IMMEDIATE),
    .io_FU_input_bits_RS1_data                            (_INT_PRF_rdata_4),
    .io_FU_input_bits_RS2_data                            (_INT_PRF_rdata_5),
    .io_FU_output_valid                                   (_FU2_io_FU_output_valid),
    .io_FU_output_bits_RD                                 (_FU2_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data
      (_FU2_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid
      (_FU2_io_FU_output_bits_RD_valid)
  );
  MEMFU FU3 (
    .clock                                         (clock),
    .io_FU_input_valid                             (FU3_io_FU_input_valid_REG),
    .io_FU_input_bits_decoded_instruction_RD
      (read_decoded_instructions_3_decoded_instruction_REG_RD),
    .io_FU_input_bits_decoded_instruction_IMM
      (read_decoded_instructions_3_decoded_instruction_REG_IMM),
    .io_FU_input_bits_decoded_instruction_FUNCT3
      (read_decoded_instructions_3_decoded_instruction_REG_FUNCT3),
    .io_FU_input_bits_decoded_instruction_IS_LOAD
      (read_decoded_instructions_3_decoded_instruction_REG_IS_LOAD),
    .io_FU_input_bits_decoded_instruction_IS_STORE
      (read_decoded_instructions_3_decoded_instruction_REG_IS_STORE),
    .io_FU_input_bits_RS1_data                     (_INT_PRF_rdata_6),
    .io_FU_input_bits_RS2_data                     (_INT_PRF_rdata_7),
    .io_DRAM_resp_bits_data                        (io_DRAM_resp_bits_data),
    .io_FU_output_valid                            (_FU3_io_FU_output_valid),
    .io_FU_output_bits_RD                          (_FU3_io_FU_output_bits_RD),
    .io_FU_output_bits_RD_data                     (_FU3_io_FU_output_bits_RD_data),
    .io_FU_output_bits_RD_valid                    (_FU3_io_FU_output_bits_RD_valid),
    .io_DRAM_request_valid                         (io_DRAM_request_valid),
    .io_DRAM_request_bits_addr                     (io_DRAM_request_bits_addr),
    .io_DRAM_request_bits_wr_data                  (io_DRAM_request_bits_wr_data),
    .io_DRAM_request_bits_wr_en                    (io_DRAM_request_bits_wr_en)
  );
  assign io_FU_outputs_0_bits_RD_valid = _FU0_io_FU_output_bits_RD_valid;
  assign io_FU_outputs_1_bits_RD_valid = _FU1_io_FU_output_bits_RD_valid;
  assign io_FU_outputs_2_bits_RD_valid = _FU2_io_FU_output_bits_RD_valid;
  assign io_FU_outputs_3_bits_RD_valid = _FU3_io_FU_output_bits_RD_valid;
endmodule

module ChaosCore(
  input          clock,
                 reset,
  output         io_frontend_DRAM_resp_ready,
  input          io_frontend_DRAM_resp_valid,
  input  [255:0] io_frontend_DRAM_resp_bits_data,
  input          io_frontend_DRAM_request_ready,
  output         io_frontend_DRAM_request_valid,
  output [31:0]  io_frontend_DRAM_request_bits_addr,
                 io_frontend_DRAM_request_bits_wr_data,
  output         io_frontend_DRAM_request_bits_wr_en,
                 io_backend_DRAM_resp_ready,
  input          io_backend_DRAM_resp_valid,
  input  [255:0] io_backend_DRAM_resp_bits_data,
  input          io_backend_DRAM_request_ready,
  output         io_backend_DRAM_request_valid,
  output [31:0]  io_backend_DRAM_request_bits_addr,
                 io_backend_DRAM_request_bits_wr_data,
  output         io_backend_DRAM_request_bits_wr_en
);

  wire _backend_io_FU_outputs_0_bits_RD_valid;
  wire _backend_io_FU_outputs_1_bits_RD_valid;
  wire _backend_io_FU_outputs_2_bits_RD_valid;
  wire _backend_io_FU_outputs_3_bits_RD_valid;
  frontend frontend (
    .clock                         (clock),
    .reset                         (reset),
    .io_DRAM_resp_ready            (io_frontend_DRAM_resp_ready),
    .io_DRAM_resp_valid            (io_frontend_DRAM_resp_valid),
    .io_DRAM_resp_bits_data        (io_frontend_DRAM_resp_bits_data),
    .io_DRAM_request_ready         (io_frontend_DRAM_request_ready),
    .io_DRAM_request_valid         (io_frontend_DRAM_request_valid),
    .io_DRAM_request_bits_addr     (io_frontend_DRAM_request_bits_addr),
    .io_FU_outputs_0_bits_RD_valid (_backend_io_FU_outputs_0_bits_RD_valid),
    .io_FU_outputs_1_bits_RD_valid (_backend_io_FU_outputs_1_bits_RD_valid),
    .io_FU_outputs_2_bits_RD_valid (_backend_io_FU_outputs_2_bits_RD_valid),
    .io_FU_outputs_3_bits_RD_valid (_backend_io_FU_outputs_3_bits_RD_valid)
  );
  backend backend (
    .clock                         (clock),
    .reset                         (reset),
    .io_DRAM_resp_bits_data        (io_backend_DRAM_resp_bits_data),
    .io_DRAM_request_valid         (io_backend_DRAM_request_valid),
    .io_DRAM_request_bits_addr     (io_backend_DRAM_request_bits_addr),
    .io_DRAM_request_bits_wr_data  (io_backend_DRAM_request_bits_wr_data),
    .io_DRAM_request_bits_wr_en    (io_backend_DRAM_request_bits_wr_en),
    .io_FU_outputs_0_bits_RD_valid (_backend_io_FU_outputs_0_bits_RD_valid),
    .io_FU_outputs_1_bits_RD_valid (_backend_io_FU_outputs_1_bits_RD_valid),
    .io_FU_outputs_2_bits_RD_valid (_backend_io_FU_outputs_2_bits_RD_valid),
    .io_FU_outputs_3_bits_RD_valid (_backend_io_FU_outputs_3_bits_RD_valid)
  );
  assign io_frontend_DRAM_request_bits_wr_data = 32'h0;
  assign io_frontend_DRAM_request_bits_wr_en = 1'h0;
  assign io_backend_DRAM_resp_ready = 1'h1;
endmodule


// ----- 8< ----- FILE "./nReadmWrite.v" ----- 8< -----


module nReadmWrite (
      input  [5:0] raddr_0,
      input  [5:0] raddr_1,
      input  [5:0] raddr_2,
      input  [5:0] raddr_3,
      input  [5:0] raddr_4,
      input  [5:0] raddr_5,
      input  [5:0] raddr_6,
      input  [5:0] raddr_7,
      output [31:0] rdata_0,
      output [31:0] rdata_1,
      output [31:0] rdata_2,
      output [31:0] rdata_3,
      output [31:0] rdata_4,
      output [31:0] rdata_5,
      output [31:0] rdata_6,
      output [31:0] rdata_7,
      input  [5:0] waddr_0,
      input  [5:0] waddr_1,
      input  [5:0] waddr_2,
      input  [5:0] waddr_3,
      input   wen_0,
      input   wen_1,
      input   wen_2,
      input   wen_3,
      input  [31:0] wdata_0,
      input  [31:0] wdata_1,
      input  [31:0] wdata_2,
      input  [31:0] wdata_3,
      input   clock,
      input   reset);
  reg [31:0] _zz_72_;
  reg [31:0] _zz_73_;
  reg [31:0] _zz_74_;
  reg [31:0] _zz_75_;
  reg [31:0] _zz_76_;
  reg [31:0] _zz_77_;
  reg [31:0] _zz_78_;
  reg [31:0] _zz_79_;
  reg [31:0] _zz_80_;
  reg [31:0] _zz_81_;
  reg [31:0] _zz_82_;
  reg [31:0] _zz_83_;
  reg [31:0] _zz_84_;
  reg [31:0] _zz_85_;
  reg [31:0] _zz_86_;
  reg [31:0] _zz_87_;
  reg [31:0] _zz_88_;
  reg [31:0] _zz_89_;
  reg [31:0] _zz_90_;
  reg [31:0] _zz_91_;
  reg [31:0] _zz_92_;
  reg [31:0] _zz_93_;
  reg [31:0] _zz_94_;
  reg [31:0] _zz_95_;
  reg [31:0] _zz_96_;
  reg [31:0] _zz_97_;
  reg [31:0] _zz_98_;
  reg [31:0] _zz_99_;
  reg [31:0] _zz_100_;
  reg [31:0] _zz_101_;
  reg [31:0] _zz_102_;
  reg [31:0] _zz_103_;
  reg [1:0] _zz_104_;
  reg [1:0] _zz_105_;
  reg [1:0] _zz_106_;
  reg [1:0] _zz_107_;
  reg [1:0] _zz_108_;
  reg [1:0] _zz_109_;
  reg [1:0] _zz_110_;
  reg [1:0] _zz_111_;
  reg [31:0] _zz_112_;
  reg [31:0] _zz_113_;
  reg [31:0] _zz_114_;
  reg [31:0] _zz_115_;
  reg [31:0] _zz_116_;
  reg [31:0] _zz_117_;
  reg [31:0] _zz_118_;
  reg [31:0] _zz_119_;
  wire [5:0] _zz_120_;
  wire [5:0] _zz_121_;
  wire [5:0] _zz_122_;
  wire [5:0] _zz_123_;
  wire [5:0] _zz_124_;
  wire [5:0] _zz_125_;
  wire [5:0] _zz_126_;
  wire [5:0] _zz_127_;
  wire [0:0] _zz_128_;
  wire [1:0] _zz_129_;
  wire [1:0] _zz_130_;
  wire  _zz_131_;
  wire  _zz_132_;
  wire  _zz_133_;
  wire  _zz_134_;
  wire  _zz_135_;
  wire  _zz_136_;
  wire  _zz_137_;
  wire  _zz_138_;
  wire [31:0] _zz_139_;
  wire  _zz_140_;
  wire  _zz_141_;
  wire  _zz_142_;
  wire  _zz_143_;
  wire  _zz_144_;
  wire  _zz_145_;
  wire  _zz_146_;
  wire  _zz_147_;
  wire [31:0] _zz_148_;
  wire  _zz_149_;
  wire  _zz_150_;
  wire  _zz_151_;
  wire  _zz_152_;
  wire  _zz_153_;
  wire  _zz_154_;
  wire  _zz_155_;
  wire  _zz_156_;
  wire [31:0] _zz_157_;
  wire  _zz_158_;
  wire  _zz_159_;
  wire  _zz_160_;
  wire  _zz_161_;
  wire  _zz_162_;
  wire  _zz_163_;
  wire  _zz_164_;
  wire  _zz_165_;
  wire [31:0] _zz_166_;
  reg [1:0] _zz_1_;
  reg [1:0] _zz_2_;
  reg [1:0] _zz_3_;
  reg [1:0] _zz_4_;
  reg [1:0] _zz_5_;
  reg [1:0] _zz_6_;
  reg [1:0] _zz_7_;
  reg [1:0] _zz_8_;
  reg [1:0] _zz_9_;
  reg [1:0] _zz_10_;
  reg [1:0] _zz_11_;
  reg [1:0] _zz_12_;
  reg [1:0] _zz_13_;
  reg [1:0] _zz_14_;
  reg [1:0] _zz_15_;
  reg [1:0] _zz_16_;
  reg [1:0] _zz_17_;
  reg [1:0] _zz_18_;
  reg [1:0] _zz_19_;
  reg [1:0] _zz_20_;
  reg [1:0] _zz_21_;
  reg [1:0] _zz_22_;
  reg [1:0] _zz_23_;
  reg [1:0] _zz_24_;
  reg [1:0] _zz_25_;
  reg [1:0] _zz_26_;
  reg [1:0] _zz_27_;
  reg [1:0] _zz_28_;
  reg [1:0] _zz_29_;
  reg [1:0] _zz_30_;
  reg [1:0] _zz_31_;
  reg [1:0] _zz_32_;
  reg [1:0] _zz_33_;
  reg [1:0] _zz_34_;
  reg [1:0] _zz_35_;
  reg [1:0] _zz_36_;
  reg [1:0] _zz_37_;
  reg [1:0] _zz_38_;
  reg [1:0] _zz_39_;
  reg [1:0] _zz_40_;
  reg [1:0] _zz_41_;
  reg [1:0] _zz_42_;
  reg [1:0] _zz_43_;
  reg [1:0] _zz_44_;
  reg [1:0] _zz_45_;
  reg [1:0] _zz_46_;
  reg [1:0] _zz_47_;
  reg [1:0] _zz_48_;
  reg [1:0] _zz_49_;
  reg [1:0] _zz_50_;
  reg [1:0] _zz_51_;
  reg [1:0] _zz_52_;
  reg [1:0] _zz_53_;
  reg [1:0] _zz_54_;
  reg [1:0] _zz_55_;
  reg [1:0] _zz_56_;
  reg [1:0] _zz_57_;
  reg [1:0] _zz_58_;
  reg [1:0] _zz_59_;
  reg [1:0] _zz_60_;
  reg [1:0] _zz_61_;
  reg [1:0] _zz_62_;
  reg [1:0] _zz_63_;
  reg [1:0] _zz_64_;
  wire [31:0] reads_0_0;
  wire [31:0] reads_0_1;
  wire [31:0] reads_0_2;
  wire [31:0] reads_0_3;
  wire [31:0] reads_0_4;
  wire [31:0] reads_0_5;
  wire [31:0] reads_0_6;
  wire [31:0] reads_0_7;
  wire [31:0] reads_1_0;
  wire [31:0] reads_1_1;
  wire [31:0] reads_1_2;
  wire [31:0] reads_1_3;
  wire [31:0] reads_1_4;
  wire [31:0] reads_1_5;
  wire [31:0] reads_1_6;
  wire [31:0] reads_1_7;
  wire [31:0] reads_2_0;
  wire [31:0] reads_2_1;
  wire [31:0] reads_2_2;
  wire [31:0] reads_2_3;
  wire [31:0] reads_2_4;
  wire [31:0] reads_2_5;
  wire [31:0] reads_2_6;
  wire [31:0] reads_2_7;
  wire [31:0] reads_3_0;
  wire [31:0] reads_3_1;
  wire [31:0] reads_3_2;
  wire [31:0] reads_3_3;
  wire [31:0] reads_3_4;
  wire [31:0] reads_3_5;
  wire [31:0] reads_3_6;
  wire [31:0] reads_3_7;
  wire [1:0] lvr_0;
  wire [1:0] lvr_1;
  wire [1:0] lvr_2;
  wire [1:0] lvr_3;
  wire [1:0] lvr_4;
  wire [1:0] lvr_5;
  wire [1:0] lvr_6;
  wire [1:0] lvr_7;
  reg [1:0] banks_0;
  reg [1:0] banks_1;
  reg [1:0] banks_2;
  reg [1:0] banks_3;
  reg [1:0] banks_4;
  reg [1:0] banks_5;
  reg [1:0] banks_6;
  reg [1:0] banks_7;
  wire [63:0] _zz_65_;
  wire [63:0] _zz_66_;
  wire [1:0] _zz_67_;
  wire [63:0] _zz_68_;
  wire [1:0] _zz_69_;
  wire [63:0] _zz_70_;
  wire [1:0] _zz_71_;
  (* ramstyle = "no_rw_check, mlab" *) reg [31:0] rams_0 [0:63];
  (* ramstyle = "no_rw_check, mlab" *) reg [31:0] rams_1 [0:63];
  (* ramstyle = "no_rw_check, mlab" *) reg [31:0] rams_2 [0:63];
  (* ramstyle = "no_rw_check, mlab" *) reg [31:0] rams_3 [0:63];
  assign _zz_120_ = raddr_0;
  assign _zz_121_ = raddr_1;
  assign _zz_122_ = raddr_2;
  assign _zz_123_ = raddr_3;
  assign _zz_124_ = raddr_4;
  assign _zz_125_ = raddr_5;
  assign _zz_126_ = raddr_6;
  assign _zz_127_ = raddr_7;
  assign _zz_128_ = (1'b1);
  assign _zz_129_ = (2'b10);
  assign _zz_130_ = (2'b11);
  assign _zz_131_ = 1'b1;
  assign _zz_132_ = 1'b1;
  assign _zz_133_ = 1'b1;
  assign _zz_134_ = 1'b1;
  assign _zz_135_ = 1'b1;
  assign _zz_136_ = 1'b1;
  assign _zz_137_ = 1'b1;
  assign _zz_138_ = 1'b1;
  assign _zz_139_ = wdata_0;
  assign _zz_140_ = 1'b1;
  assign _zz_141_ = 1'b1;
  assign _zz_142_ = 1'b1;
  assign _zz_143_ = 1'b1;
  assign _zz_144_ = 1'b1;
  assign _zz_145_ = 1'b1;
  assign _zz_146_ = 1'b1;
  assign _zz_147_ = 1'b1;
  assign _zz_148_ = wdata_1;
  assign _zz_149_ = 1'b1;
  assign _zz_150_ = 1'b1;
  assign _zz_151_ = 1'b1;
  assign _zz_152_ = 1'b1;
  assign _zz_153_ = 1'b1;
  assign _zz_154_ = 1'b1;
  assign _zz_155_ = 1'b1;
  assign _zz_156_ = 1'b1;
  assign _zz_157_ = wdata_2;
  assign _zz_158_ = 1'b1;
  assign _zz_159_ = 1'b1;
  assign _zz_160_ = 1'b1;
  assign _zz_161_ = 1'b1;
  assign _zz_162_ = 1'b1;
  assign _zz_163_ = 1'b1;
  assign _zz_164_ = 1'b1;
  assign _zz_165_ = 1'b1;
  assign _zz_166_ = wdata_3;
  always @ (posedge clock) begin
    if(_zz_131_) begin
      _zz_72_ <= rams_0[raddr_0];
    end
  end

  always @ (posedge clock) begin
    if(_zz_132_) begin
      _zz_73_ <= rams_0[raddr_1];
    end
  end

  always @ (posedge clock) begin
    if(_zz_133_) begin
      _zz_74_ <= rams_0[raddr_2];
    end
  end

  always @ (posedge clock) begin
    if(_zz_134_) begin
      _zz_75_ <= rams_0[raddr_3];
    end
  end

  always @ (posedge clock) begin
    if(_zz_135_) begin
      _zz_76_ <= rams_0[raddr_4];
    end
  end

  always @ (posedge clock) begin
    if(_zz_136_) begin
      _zz_77_ <= rams_0[raddr_5];
    end
  end

  always @ (posedge clock) begin
    if(_zz_137_) begin
      _zz_78_ <= rams_0[raddr_6];
    end
  end

  always @ (posedge clock) begin
    if(_zz_138_) begin
      _zz_79_ <= rams_0[raddr_7];
    end
  end

  always @ (posedge clock) begin
    if(wen_0) begin
      rams_0[waddr_0] <= _zz_139_;
    end
  end

  always @ (posedge clock) begin
    if(_zz_140_) begin
      _zz_80_ <= rams_1[raddr_0];
    end
  end

  always @ (posedge clock) begin
    if(_zz_141_) begin
      _zz_81_ <= rams_1[raddr_1];
    end
  end

  always @ (posedge clock) begin
    if(_zz_142_) begin
      _zz_82_ <= rams_1[raddr_2];
    end
  end

  always @ (posedge clock) begin
    if(_zz_143_) begin
      _zz_83_ <= rams_1[raddr_3];
    end
  end

  always @ (posedge clock) begin
    if(_zz_144_) begin
      _zz_84_ <= rams_1[raddr_4];
    end
  end

  always @ (posedge clock) begin
    if(_zz_145_) begin
      _zz_85_ <= rams_1[raddr_5];
    end
  end

  always @ (posedge clock) begin
    if(_zz_146_) begin
      _zz_86_ <= rams_1[raddr_6];
    end
  end

  always @ (posedge clock) begin
    if(_zz_147_) begin
      _zz_87_ <= rams_1[raddr_7];
    end
  end

  always @ (posedge clock) begin
    if(wen_1) begin
      rams_1[waddr_1] <= _zz_148_;
    end
  end

  always @ (posedge clock) begin
    if(_zz_149_) begin
      _zz_88_ <= rams_2[raddr_0];
    end
  end

  always @ (posedge clock) begin
    if(_zz_150_) begin
      _zz_89_ <= rams_2[raddr_1];
    end
  end

  always @ (posedge clock) begin
    if(_zz_151_) begin
      _zz_90_ <= rams_2[raddr_2];
    end
  end

  always @ (posedge clock) begin
    if(_zz_152_) begin
      _zz_91_ <= rams_2[raddr_3];
    end
  end

  always @ (posedge clock) begin
    if(_zz_153_) begin
      _zz_92_ <= rams_2[raddr_4];
    end
  end

  always @ (posedge clock) begin
    if(_zz_154_) begin
      _zz_93_ <= rams_2[raddr_5];
    end
  end

  always @ (posedge clock) begin
    if(_zz_155_) begin
      _zz_94_ <= rams_2[raddr_6];
    end
  end

  always @ (posedge clock) begin
    if(_zz_156_) begin
      _zz_95_ <= rams_2[raddr_7];
    end
  end

  always @ (posedge clock) begin
    if(wen_2) begin
      rams_2[waddr_2] <= _zz_157_;
    end
  end

  always @ (posedge clock) begin
    if(_zz_158_) begin
      _zz_96_ <= rams_3[raddr_0];
    end
  end

  always @ (posedge clock) begin
    if(_zz_159_) begin
      _zz_97_ <= rams_3[raddr_1];
    end
  end

  always @ (posedge clock) begin
    if(_zz_160_) begin
      _zz_98_ <= rams_3[raddr_2];
    end
  end

  always @ (posedge clock) begin
    if(_zz_161_) begin
      _zz_99_ <= rams_3[raddr_3];
    end
  end

  always @ (posedge clock) begin
    if(_zz_162_) begin
      _zz_100_ <= rams_3[raddr_4];
    end
  end

  always @ (posedge clock) begin
    if(_zz_163_) begin
      _zz_101_ <= rams_3[raddr_5];
    end
  end

  always @ (posedge clock) begin
    if(_zz_164_) begin
      _zz_102_ <= rams_3[raddr_6];
    end
  end

  always @ (posedge clock) begin
    if(_zz_165_) begin
      _zz_103_ <= rams_3[raddr_7];
    end
  end

  always @ (posedge clock) begin
    if(wen_3) begin
      rams_3[waddr_3] <= _zz_166_;
    end
  end

  always @(*) begin
    case(_zz_120_)
      6'b000000 : begin
        _zz_104_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_104_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_104_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_104_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_104_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_104_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_104_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_104_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_104_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_104_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_104_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_104_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_104_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_104_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_104_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_104_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_104_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_104_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_104_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_104_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_104_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_104_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_104_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_104_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_104_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_104_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_104_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_104_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_104_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_104_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_104_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_104_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_104_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_104_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_104_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_104_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_104_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_104_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_104_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_104_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_104_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_104_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_104_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_104_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_104_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_104_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_104_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_104_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_104_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_104_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_104_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_104_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_104_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_104_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_104_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_104_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_104_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_104_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_104_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_104_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_104_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_104_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_104_ = _zz_63_;
      end
      default : begin
        _zz_104_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_121_)
      6'b000000 : begin
        _zz_105_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_105_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_105_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_105_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_105_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_105_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_105_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_105_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_105_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_105_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_105_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_105_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_105_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_105_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_105_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_105_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_105_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_105_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_105_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_105_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_105_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_105_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_105_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_105_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_105_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_105_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_105_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_105_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_105_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_105_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_105_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_105_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_105_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_105_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_105_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_105_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_105_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_105_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_105_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_105_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_105_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_105_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_105_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_105_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_105_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_105_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_105_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_105_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_105_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_105_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_105_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_105_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_105_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_105_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_105_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_105_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_105_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_105_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_105_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_105_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_105_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_105_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_105_ = _zz_63_;
      end
      default : begin
        _zz_105_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_122_)
      6'b000000 : begin
        _zz_106_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_106_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_106_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_106_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_106_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_106_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_106_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_106_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_106_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_106_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_106_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_106_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_106_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_106_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_106_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_106_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_106_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_106_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_106_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_106_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_106_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_106_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_106_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_106_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_106_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_106_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_106_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_106_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_106_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_106_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_106_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_106_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_106_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_106_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_106_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_106_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_106_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_106_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_106_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_106_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_106_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_106_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_106_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_106_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_106_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_106_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_106_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_106_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_106_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_106_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_106_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_106_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_106_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_106_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_106_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_106_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_106_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_106_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_106_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_106_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_106_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_106_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_106_ = _zz_63_;
      end
      default : begin
        _zz_106_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_123_)
      6'b000000 : begin
        _zz_107_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_107_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_107_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_107_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_107_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_107_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_107_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_107_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_107_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_107_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_107_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_107_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_107_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_107_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_107_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_107_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_107_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_107_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_107_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_107_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_107_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_107_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_107_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_107_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_107_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_107_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_107_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_107_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_107_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_107_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_107_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_107_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_107_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_107_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_107_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_107_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_107_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_107_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_107_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_107_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_107_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_107_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_107_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_107_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_107_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_107_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_107_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_107_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_107_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_107_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_107_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_107_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_107_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_107_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_107_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_107_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_107_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_107_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_107_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_107_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_107_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_107_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_107_ = _zz_63_;
      end
      default : begin
        _zz_107_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_124_)
      6'b000000 : begin
        _zz_108_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_108_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_108_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_108_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_108_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_108_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_108_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_108_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_108_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_108_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_108_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_108_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_108_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_108_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_108_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_108_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_108_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_108_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_108_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_108_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_108_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_108_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_108_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_108_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_108_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_108_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_108_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_108_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_108_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_108_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_108_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_108_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_108_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_108_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_108_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_108_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_108_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_108_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_108_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_108_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_108_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_108_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_108_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_108_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_108_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_108_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_108_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_108_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_108_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_108_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_108_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_108_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_108_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_108_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_108_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_108_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_108_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_108_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_108_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_108_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_108_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_108_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_108_ = _zz_63_;
      end
      default : begin
        _zz_108_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_125_)
      6'b000000 : begin
        _zz_109_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_109_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_109_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_109_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_109_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_109_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_109_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_109_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_109_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_109_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_109_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_109_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_109_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_109_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_109_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_109_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_109_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_109_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_109_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_109_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_109_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_109_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_109_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_109_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_109_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_109_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_109_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_109_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_109_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_109_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_109_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_109_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_109_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_109_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_109_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_109_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_109_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_109_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_109_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_109_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_109_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_109_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_109_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_109_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_109_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_109_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_109_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_109_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_109_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_109_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_109_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_109_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_109_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_109_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_109_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_109_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_109_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_109_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_109_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_109_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_109_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_109_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_109_ = _zz_63_;
      end
      default : begin
        _zz_109_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_126_)
      6'b000000 : begin
        _zz_110_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_110_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_110_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_110_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_110_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_110_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_110_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_110_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_110_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_110_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_110_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_110_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_110_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_110_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_110_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_110_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_110_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_110_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_110_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_110_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_110_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_110_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_110_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_110_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_110_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_110_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_110_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_110_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_110_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_110_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_110_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_110_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_110_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_110_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_110_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_110_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_110_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_110_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_110_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_110_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_110_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_110_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_110_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_110_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_110_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_110_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_110_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_110_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_110_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_110_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_110_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_110_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_110_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_110_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_110_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_110_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_110_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_110_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_110_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_110_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_110_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_110_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_110_ = _zz_63_;
      end
      default : begin
        _zz_110_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(_zz_127_)
      6'b000000 : begin
        _zz_111_ = _zz_1_;
      end
      6'b000001 : begin
        _zz_111_ = _zz_2_;
      end
      6'b000010 : begin
        _zz_111_ = _zz_3_;
      end
      6'b000011 : begin
        _zz_111_ = _zz_4_;
      end
      6'b000100 : begin
        _zz_111_ = _zz_5_;
      end
      6'b000101 : begin
        _zz_111_ = _zz_6_;
      end
      6'b000110 : begin
        _zz_111_ = _zz_7_;
      end
      6'b000111 : begin
        _zz_111_ = _zz_8_;
      end
      6'b001000 : begin
        _zz_111_ = _zz_9_;
      end
      6'b001001 : begin
        _zz_111_ = _zz_10_;
      end
      6'b001010 : begin
        _zz_111_ = _zz_11_;
      end
      6'b001011 : begin
        _zz_111_ = _zz_12_;
      end
      6'b001100 : begin
        _zz_111_ = _zz_13_;
      end
      6'b001101 : begin
        _zz_111_ = _zz_14_;
      end
      6'b001110 : begin
        _zz_111_ = _zz_15_;
      end
      6'b001111 : begin
        _zz_111_ = _zz_16_;
      end
      6'b010000 : begin
        _zz_111_ = _zz_17_;
      end
      6'b010001 : begin
        _zz_111_ = _zz_18_;
      end
      6'b010010 : begin
        _zz_111_ = _zz_19_;
      end
      6'b010011 : begin
        _zz_111_ = _zz_20_;
      end
      6'b010100 : begin
        _zz_111_ = _zz_21_;
      end
      6'b010101 : begin
        _zz_111_ = _zz_22_;
      end
      6'b010110 : begin
        _zz_111_ = _zz_23_;
      end
      6'b010111 : begin
        _zz_111_ = _zz_24_;
      end
      6'b011000 : begin
        _zz_111_ = _zz_25_;
      end
      6'b011001 : begin
        _zz_111_ = _zz_26_;
      end
      6'b011010 : begin
        _zz_111_ = _zz_27_;
      end
      6'b011011 : begin
        _zz_111_ = _zz_28_;
      end
      6'b011100 : begin
        _zz_111_ = _zz_29_;
      end
      6'b011101 : begin
        _zz_111_ = _zz_30_;
      end
      6'b011110 : begin
        _zz_111_ = _zz_31_;
      end
      6'b011111 : begin
        _zz_111_ = _zz_32_;
      end
      6'b100000 : begin
        _zz_111_ = _zz_33_;
      end
      6'b100001 : begin
        _zz_111_ = _zz_34_;
      end
      6'b100010 : begin
        _zz_111_ = _zz_35_;
      end
      6'b100011 : begin
        _zz_111_ = _zz_36_;
      end
      6'b100100 : begin
        _zz_111_ = _zz_37_;
      end
      6'b100101 : begin
        _zz_111_ = _zz_38_;
      end
      6'b100110 : begin
        _zz_111_ = _zz_39_;
      end
      6'b100111 : begin
        _zz_111_ = _zz_40_;
      end
      6'b101000 : begin
        _zz_111_ = _zz_41_;
      end
      6'b101001 : begin
        _zz_111_ = _zz_42_;
      end
      6'b101010 : begin
        _zz_111_ = _zz_43_;
      end
      6'b101011 : begin
        _zz_111_ = _zz_44_;
      end
      6'b101100 : begin
        _zz_111_ = _zz_45_;
      end
      6'b101101 : begin
        _zz_111_ = _zz_46_;
      end
      6'b101110 : begin
        _zz_111_ = _zz_47_;
      end
      6'b101111 : begin
        _zz_111_ = _zz_48_;
      end
      6'b110000 : begin
        _zz_111_ = _zz_49_;
      end
      6'b110001 : begin
        _zz_111_ = _zz_50_;
      end
      6'b110010 : begin
        _zz_111_ = _zz_51_;
      end
      6'b110011 : begin
        _zz_111_ = _zz_52_;
      end
      6'b110100 : begin
        _zz_111_ = _zz_53_;
      end
      6'b110101 : begin
        _zz_111_ = _zz_54_;
      end
      6'b110110 : begin
        _zz_111_ = _zz_55_;
      end
      6'b110111 : begin
        _zz_111_ = _zz_56_;
      end
      6'b111000 : begin
        _zz_111_ = _zz_57_;
      end
      6'b111001 : begin
        _zz_111_ = _zz_58_;
      end
      6'b111010 : begin
        _zz_111_ = _zz_59_;
      end
      6'b111011 : begin
        _zz_111_ = _zz_60_;
      end
      6'b111100 : begin
        _zz_111_ = _zz_61_;
      end
      6'b111101 : begin
        _zz_111_ = _zz_62_;
      end
      6'b111110 : begin
        _zz_111_ = _zz_63_;
      end
      default : begin
        _zz_111_ = _zz_64_;
      end
    endcase
  end

  always @(*) begin
    case(banks_0)
      2'b00 : begin
        _zz_112_ = reads_0_0;
      end
      2'b01 : begin
        _zz_112_ = reads_1_0;
      end
      2'b10 : begin
        _zz_112_ = reads_2_0;
      end
      default : begin
        _zz_112_ = reads_3_0;
      end
    endcase
  end

  always @(*) begin
    case(banks_1)
      2'b00 : begin
        _zz_113_ = reads_0_1;
      end
      2'b01 : begin
        _zz_113_ = reads_1_1;
      end
      2'b10 : begin
        _zz_113_ = reads_2_1;
      end
      default : begin
        _zz_113_ = reads_3_1;
      end
    endcase
  end

  always @(*) begin
    case(banks_2)
      2'b00 : begin
        _zz_114_ = reads_0_2;
      end
      2'b01 : begin
        _zz_114_ = reads_1_2;
      end
      2'b10 : begin
        _zz_114_ = reads_2_2;
      end
      default : begin
        _zz_114_ = reads_3_2;
      end
    endcase
  end

  always @(*) begin
    case(banks_3)
      2'b00 : begin
        _zz_115_ = reads_0_3;
      end
      2'b01 : begin
        _zz_115_ = reads_1_3;
      end
      2'b10 : begin
        _zz_115_ = reads_2_3;
      end
      default : begin
        _zz_115_ = reads_3_3;
      end
    endcase
  end

  always @(*) begin
    case(banks_4)
      2'b00 : begin
        _zz_116_ = reads_0_4;
      end
      2'b01 : begin
        _zz_116_ = reads_1_4;
      end
      2'b10 : begin
        _zz_116_ = reads_2_4;
      end
      default : begin
        _zz_116_ = reads_3_4;
      end
    endcase
  end

  always @(*) begin
    case(banks_5)
      2'b00 : begin
        _zz_117_ = reads_0_5;
      end
      2'b01 : begin
        _zz_117_ = reads_1_5;
      end
      2'b10 : begin
        _zz_117_ = reads_2_5;
      end
      default : begin
        _zz_117_ = reads_3_5;
      end
    endcase
  end

  always @(*) begin
    case(banks_6)
      2'b00 : begin
        _zz_118_ = reads_0_6;
      end
      2'b01 : begin
        _zz_118_ = reads_1_6;
      end
      2'b10 : begin
        _zz_118_ = reads_2_6;
      end
      default : begin
        _zz_118_ = reads_3_6;
      end
    endcase
  end

  always @(*) begin
    case(banks_7)
      2'b00 : begin
        _zz_119_ = reads_0_7;
      end
      2'b01 : begin
        _zz_119_ = reads_1_7;
      end
      2'b10 : begin
        _zz_119_ = reads_2_7;
      end
      default : begin
        _zz_119_ = reads_3_7;
      end
    endcase
  end

  assign reads_0_0 = _zz_72_;
  assign reads_0_1 = _zz_73_;
  assign reads_0_2 = _zz_74_;
  assign reads_0_3 = _zz_75_;
  assign reads_0_4 = _zz_76_;
  assign reads_0_5 = _zz_77_;
  assign reads_0_6 = _zz_78_;
  assign reads_0_7 = _zz_79_;
  assign reads_1_0 = _zz_80_;
  assign reads_1_1 = _zz_81_;
  assign reads_1_2 = _zz_82_;
  assign reads_1_3 = _zz_83_;
  assign reads_1_4 = _zz_84_;
  assign reads_1_5 = _zz_85_;
  assign reads_1_6 = _zz_86_;
  assign reads_1_7 = _zz_87_;
  assign reads_2_0 = _zz_88_;
  assign reads_2_1 = _zz_89_;
  assign reads_2_2 = _zz_90_;
  assign reads_2_3 = _zz_91_;
  assign reads_2_4 = _zz_92_;
  assign reads_2_5 = _zz_93_;
  assign reads_2_6 = _zz_94_;
  assign reads_2_7 = _zz_95_;
  assign reads_3_0 = _zz_96_;
  assign reads_3_1 = _zz_97_;
  assign reads_3_2 = _zz_98_;
  assign reads_3_3 = _zz_99_;
  assign reads_3_4 = _zz_100_;
  assign reads_3_5 = _zz_101_;
  assign reads_3_6 = _zz_102_;
  assign reads_3_7 = _zz_103_;
  assign lvr_0 = _zz_104_;
  assign lvr_1 = _zz_105_;
  assign lvr_2 = _zz_106_;
  assign lvr_3 = _zz_107_;
  assign lvr_4 = _zz_108_;
  assign lvr_5 = _zz_109_;
  assign lvr_6 = _zz_110_;
  assign lvr_7 = _zz_111_;
  assign rdata_0 = _zz_112_;
  assign rdata_1 = _zz_113_;
  assign rdata_2 = _zz_114_;
  assign rdata_3 = _zz_115_;
  assign rdata_4 = _zz_116_;
  assign rdata_5 = _zz_117_;
  assign rdata_6 = _zz_118_;
  assign rdata_7 = _zz_119_;
  assign _zz_65_ = ({63'd0,(1'b1)} <<< waddr_0);
  assign _zz_66_ = ({63'd0,(1'b1)} <<< waddr_1);
  assign _zz_67_ = {1'd0, _zz_128_};
  assign _zz_68_ = ({63'd0,(1'b1)} <<< waddr_2);
  assign _zz_69_ = _zz_129_;
  assign _zz_70_ = ({63'd0,(1'b1)} <<< waddr_3);
  assign _zz_71_ = _zz_130_;
  always @ (posedge clock) begin
    banks_0 <= lvr_0;
    banks_1 <= lvr_1;
    banks_2 <= lvr_2;
    banks_3 <= lvr_3;
    banks_4 <= lvr_4;
    banks_5 <= lvr_5;
    banks_6 <= lvr_6;
    banks_7 <= lvr_7;
    if(wen_0)begin
      if(_zz_65_[0])begin
        _zz_1_ <= (2'b00);
      end
      if(_zz_65_[1])begin
        _zz_2_ <= (2'b00);
      end
      if(_zz_65_[2])begin
        _zz_3_ <= (2'b00);
      end
      if(_zz_65_[3])begin
        _zz_4_ <= (2'b00);
      end
      if(_zz_65_[4])begin
        _zz_5_ <= (2'b00);
      end
      if(_zz_65_[5])begin
        _zz_6_ <= (2'b00);
      end
      if(_zz_65_[6])begin
        _zz_7_ <= (2'b00);
      end
      if(_zz_65_[7])begin
        _zz_8_ <= (2'b00);
      end
      if(_zz_65_[8])begin
        _zz_9_ <= (2'b00);
      end
      if(_zz_65_[9])begin
        _zz_10_ <= (2'b00);
      end
      if(_zz_65_[10])begin
        _zz_11_ <= (2'b00);
      end
      if(_zz_65_[11])begin
        _zz_12_ <= (2'b00);
      end
      if(_zz_65_[12])begin
        _zz_13_ <= (2'b00);
      end
      if(_zz_65_[13])begin
        _zz_14_ <= (2'b00);
      end
      if(_zz_65_[14])begin
        _zz_15_ <= (2'b00);
      end
      if(_zz_65_[15])begin
        _zz_16_ <= (2'b00);
      end
      if(_zz_65_[16])begin
        _zz_17_ <= (2'b00);
      end
      if(_zz_65_[17])begin
        _zz_18_ <= (2'b00);
      end
      if(_zz_65_[18])begin
        _zz_19_ <= (2'b00);
      end
      if(_zz_65_[19])begin
        _zz_20_ <= (2'b00);
      end
      if(_zz_65_[20])begin
        _zz_21_ <= (2'b00);
      end
      if(_zz_65_[21])begin
        _zz_22_ <= (2'b00);
      end
      if(_zz_65_[22])begin
        _zz_23_ <= (2'b00);
      end
      if(_zz_65_[23])begin
        _zz_24_ <= (2'b00);
      end
      if(_zz_65_[24])begin
        _zz_25_ <= (2'b00);
      end
      if(_zz_65_[25])begin
        _zz_26_ <= (2'b00);
      end
      if(_zz_65_[26])begin
        _zz_27_ <= (2'b00);
      end
      if(_zz_65_[27])begin
        _zz_28_ <= (2'b00);
      end
      if(_zz_65_[28])begin
        _zz_29_ <= (2'b00);
      end
      if(_zz_65_[29])begin
        _zz_30_ <= (2'b00);
      end
      if(_zz_65_[30])begin
        _zz_31_ <= (2'b00);
      end
      if(_zz_65_[31])begin
        _zz_32_ <= (2'b00);
      end
      if(_zz_65_[32])begin
        _zz_33_ <= (2'b00);
      end
      if(_zz_65_[33])begin
        _zz_34_ <= (2'b00);
      end
      if(_zz_65_[34])begin
        _zz_35_ <= (2'b00);
      end
      if(_zz_65_[35])begin
        _zz_36_ <= (2'b00);
      end
      if(_zz_65_[36])begin
        _zz_37_ <= (2'b00);
      end
      if(_zz_65_[37])begin
        _zz_38_ <= (2'b00);
      end
      if(_zz_65_[38])begin
        _zz_39_ <= (2'b00);
      end
      if(_zz_65_[39])begin
        _zz_40_ <= (2'b00);
      end
      if(_zz_65_[40])begin
        _zz_41_ <= (2'b00);
      end
      if(_zz_65_[41])begin
        _zz_42_ <= (2'b00);
      end
      if(_zz_65_[42])begin
        _zz_43_ <= (2'b00);
      end
      if(_zz_65_[43])begin
        _zz_44_ <= (2'b00);
      end
      if(_zz_65_[44])begin
        _zz_45_ <= (2'b00);
      end
      if(_zz_65_[45])begin
        _zz_46_ <= (2'b00);
      end
      if(_zz_65_[46])begin
        _zz_47_ <= (2'b00);
      end
      if(_zz_65_[47])begin
        _zz_48_ <= (2'b00);
      end
      if(_zz_65_[48])begin
        _zz_49_ <= (2'b00);
      end
      if(_zz_65_[49])begin
        _zz_50_ <= (2'b00);
      end
      if(_zz_65_[50])begin
        _zz_51_ <= (2'b00);
      end
      if(_zz_65_[51])begin
        _zz_52_ <= (2'b00);
      end
      if(_zz_65_[52])begin
        _zz_53_ <= (2'b00);
      end
      if(_zz_65_[53])begin
        _zz_54_ <= (2'b00);
      end
      if(_zz_65_[54])begin
        _zz_55_ <= (2'b00);
      end
      if(_zz_65_[55])begin
        _zz_56_ <= (2'b00);
      end
      if(_zz_65_[56])begin
        _zz_57_ <= (2'b00);
      end
      if(_zz_65_[57])begin
        _zz_58_ <= (2'b00);
      end
      if(_zz_65_[58])begin
        _zz_59_ <= (2'b00);
      end
      if(_zz_65_[59])begin
        _zz_60_ <= (2'b00);
      end
      if(_zz_65_[60])begin
        _zz_61_ <= (2'b00);
      end
      if(_zz_65_[61])begin
        _zz_62_ <= (2'b00);
      end
      if(_zz_65_[62])begin
        _zz_63_ <= (2'b00);
      end
      if(_zz_65_[63])begin
        _zz_64_ <= (2'b00);
      end
    end
    if(wen_1)begin
      if(_zz_66_[0])begin
        _zz_1_ <= _zz_67_;
      end
      if(_zz_66_[1])begin
        _zz_2_ <= _zz_67_;
      end
      if(_zz_66_[2])begin
        _zz_3_ <= _zz_67_;
      end
      if(_zz_66_[3])begin
        _zz_4_ <= _zz_67_;
      end
      if(_zz_66_[4])begin
        _zz_5_ <= _zz_67_;
      end
      if(_zz_66_[5])begin
        _zz_6_ <= _zz_67_;
      end
      if(_zz_66_[6])begin
        _zz_7_ <= _zz_67_;
      end
      if(_zz_66_[7])begin
        _zz_8_ <= _zz_67_;
      end
      if(_zz_66_[8])begin
        _zz_9_ <= _zz_67_;
      end
      if(_zz_66_[9])begin
        _zz_10_ <= _zz_67_;
      end
      if(_zz_66_[10])begin
        _zz_11_ <= _zz_67_;
      end
      if(_zz_66_[11])begin
        _zz_12_ <= _zz_67_;
      end
      if(_zz_66_[12])begin
        _zz_13_ <= _zz_67_;
      end
      if(_zz_66_[13])begin
        _zz_14_ <= _zz_67_;
      end
      if(_zz_66_[14])begin
        _zz_15_ <= _zz_67_;
      end
      if(_zz_66_[15])begin
        _zz_16_ <= _zz_67_;
      end
      if(_zz_66_[16])begin
        _zz_17_ <= _zz_67_;
      end
      if(_zz_66_[17])begin
        _zz_18_ <= _zz_67_;
      end
      if(_zz_66_[18])begin
        _zz_19_ <= _zz_67_;
      end
      if(_zz_66_[19])begin
        _zz_20_ <= _zz_67_;
      end
      if(_zz_66_[20])begin
        _zz_21_ <= _zz_67_;
      end
      if(_zz_66_[21])begin
        _zz_22_ <= _zz_67_;
      end
      if(_zz_66_[22])begin
        _zz_23_ <= _zz_67_;
      end
      if(_zz_66_[23])begin
        _zz_24_ <= _zz_67_;
      end
      if(_zz_66_[24])begin
        _zz_25_ <= _zz_67_;
      end
      if(_zz_66_[25])begin
        _zz_26_ <= _zz_67_;
      end
      if(_zz_66_[26])begin
        _zz_27_ <= _zz_67_;
      end
      if(_zz_66_[27])begin
        _zz_28_ <= _zz_67_;
      end
      if(_zz_66_[28])begin
        _zz_29_ <= _zz_67_;
      end
      if(_zz_66_[29])begin
        _zz_30_ <= _zz_67_;
      end
      if(_zz_66_[30])begin
        _zz_31_ <= _zz_67_;
      end
      if(_zz_66_[31])begin
        _zz_32_ <= _zz_67_;
      end
      if(_zz_66_[32])begin
        _zz_33_ <= _zz_67_;
      end
      if(_zz_66_[33])begin
        _zz_34_ <= _zz_67_;
      end
      if(_zz_66_[34])begin
        _zz_35_ <= _zz_67_;
      end
      if(_zz_66_[35])begin
        _zz_36_ <= _zz_67_;
      end
      if(_zz_66_[36])begin
        _zz_37_ <= _zz_67_;
      end
      if(_zz_66_[37])begin
        _zz_38_ <= _zz_67_;
      end
      if(_zz_66_[38])begin
        _zz_39_ <= _zz_67_;
      end
      if(_zz_66_[39])begin
        _zz_40_ <= _zz_67_;
      end
      if(_zz_66_[40])begin
        _zz_41_ <= _zz_67_;
      end
      if(_zz_66_[41])begin
        _zz_42_ <= _zz_67_;
      end
      if(_zz_66_[42])begin
        _zz_43_ <= _zz_67_;
      end
      if(_zz_66_[43])begin
        _zz_44_ <= _zz_67_;
      end
      if(_zz_66_[44])begin
        _zz_45_ <= _zz_67_;
      end
      if(_zz_66_[45])begin
        _zz_46_ <= _zz_67_;
      end
      if(_zz_66_[46])begin
        _zz_47_ <= _zz_67_;
      end
      if(_zz_66_[47])begin
        _zz_48_ <= _zz_67_;
      end
      if(_zz_66_[48])begin
        _zz_49_ <= _zz_67_;
      end
      if(_zz_66_[49])begin
        _zz_50_ <= _zz_67_;
      end
      if(_zz_66_[50])begin
        _zz_51_ <= _zz_67_;
      end
      if(_zz_66_[51])begin
        _zz_52_ <= _zz_67_;
      end
      if(_zz_66_[52])begin
        _zz_53_ <= _zz_67_;
      end
      if(_zz_66_[53])begin
        _zz_54_ <= _zz_67_;
      end
      if(_zz_66_[54])begin
        _zz_55_ <= _zz_67_;
      end
      if(_zz_66_[55])begin
        _zz_56_ <= _zz_67_;
      end
      if(_zz_66_[56])begin
        _zz_57_ <= _zz_67_;
      end
      if(_zz_66_[57])begin
        _zz_58_ <= _zz_67_;
      end
      if(_zz_66_[58])begin
        _zz_59_ <= _zz_67_;
      end
      if(_zz_66_[59])begin
        _zz_60_ <= _zz_67_;
      end
      if(_zz_66_[60])begin
        _zz_61_ <= _zz_67_;
      end
      if(_zz_66_[61])begin
        _zz_62_ <= _zz_67_;
      end
      if(_zz_66_[62])begin
        _zz_63_ <= _zz_67_;
      end
      if(_zz_66_[63])begin
        _zz_64_ <= _zz_67_;
      end
    end
    if(wen_2)begin
      if(_zz_68_[0])begin
        _zz_1_ <= _zz_69_;
      end
      if(_zz_68_[1])begin
        _zz_2_ <= _zz_69_;
      end
      if(_zz_68_[2])begin
        _zz_3_ <= _zz_69_;
      end
      if(_zz_68_[3])begin
        _zz_4_ <= _zz_69_;
      end
      if(_zz_68_[4])begin
        _zz_5_ <= _zz_69_;
      end
      if(_zz_68_[5])begin
        _zz_6_ <= _zz_69_;
      end
      if(_zz_68_[6])begin
        _zz_7_ <= _zz_69_;
      end
      if(_zz_68_[7])begin
        _zz_8_ <= _zz_69_;
      end
      if(_zz_68_[8])begin
        _zz_9_ <= _zz_69_;
      end
      if(_zz_68_[9])begin
        _zz_10_ <= _zz_69_;
      end
      if(_zz_68_[10])begin
        _zz_11_ <= _zz_69_;
      end
      if(_zz_68_[11])begin
        _zz_12_ <= _zz_69_;
      end
      if(_zz_68_[12])begin
        _zz_13_ <= _zz_69_;
      end
      if(_zz_68_[13])begin
        _zz_14_ <= _zz_69_;
      end
      if(_zz_68_[14])begin
        _zz_15_ <= _zz_69_;
      end
      if(_zz_68_[15])begin
        _zz_16_ <= _zz_69_;
      end
      if(_zz_68_[16])begin
        _zz_17_ <= _zz_69_;
      end
      if(_zz_68_[17])begin
        _zz_18_ <= _zz_69_;
      end
      if(_zz_68_[18])begin
        _zz_19_ <= _zz_69_;
      end
      if(_zz_68_[19])begin
        _zz_20_ <= _zz_69_;
      end
      if(_zz_68_[20])begin
        _zz_21_ <= _zz_69_;
      end
      if(_zz_68_[21])begin
        _zz_22_ <= _zz_69_;
      end
      if(_zz_68_[22])begin
        _zz_23_ <= _zz_69_;
      end
      if(_zz_68_[23])begin
        _zz_24_ <= _zz_69_;
      end
      if(_zz_68_[24])begin
        _zz_25_ <= _zz_69_;
      end
      if(_zz_68_[25])begin
        _zz_26_ <= _zz_69_;
      end
      if(_zz_68_[26])begin
        _zz_27_ <= _zz_69_;
      end
      if(_zz_68_[27])begin
        _zz_28_ <= _zz_69_;
      end
      if(_zz_68_[28])begin
        _zz_29_ <= _zz_69_;
      end
      if(_zz_68_[29])begin
        _zz_30_ <= _zz_69_;
      end
      if(_zz_68_[30])begin
        _zz_31_ <= _zz_69_;
      end
      if(_zz_68_[31])begin
        _zz_32_ <= _zz_69_;
      end
      if(_zz_68_[32])begin
        _zz_33_ <= _zz_69_;
      end
      if(_zz_68_[33])begin
        _zz_34_ <= _zz_69_;
      end
      if(_zz_68_[34])begin
        _zz_35_ <= _zz_69_;
      end
      if(_zz_68_[35])begin
        _zz_36_ <= _zz_69_;
      end
      if(_zz_68_[36])begin
        _zz_37_ <= _zz_69_;
      end
      if(_zz_68_[37])begin
        _zz_38_ <= _zz_69_;
      end
      if(_zz_68_[38])begin
        _zz_39_ <= _zz_69_;
      end
      if(_zz_68_[39])begin
        _zz_40_ <= _zz_69_;
      end
      if(_zz_68_[40])begin
        _zz_41_ <= _zz_69_;
      end
      if(_zz_68_[41])begin
        _zz_42_ <= _zz_69_;
      end
      if(_zz_68_[42])begin
        _zz_43_ <= _zz_69_;
      end
      if(_zz_68_[43])begin
        _zz_44_ <= _zz_69_;
      end
      if(_zz_68_[44])begin
        _zz_45_ <= _zz_69_;
      end
      if(_zz_68_[45])begin
        _zz_46_ <= _zz_69_;
      end
      if(_zz_68_[46])begin
        _zz_47_ <= _zz_69_;
      end
      if(_zz_68_[47])begin
        _zz_48_ <= _zz_69_;
      end
      if(_zz_68_[48])begin
        _zz_49_ <= _zz_69_;
      end
      if(_zz_68_[49])begin
        _zz_50_ <= _zz_69_;
      end
      if(_zz_68_[50])begin
        _zz_51_ <= _zz_69_;
      end
      if(_zz_68_[51])begin
        _zz_52_ <= _zz_69_;
      end
      if(_zz_68_[52])begin
        _zz_53_ <= _zz_69_;
      end
      if(_zz_68_[53])begin
        _zz_54_ <= _zz_69_;
      end
      if(_zz_68_[54])begin
        _zz_55_ <= _zz_69_;
      end
      if(_zz_68_[55])begin
        _zz_56_ <= _zz_69_;
      end
      if(_zz_68_[56])begin
        _zz_57_ <= _zz_69_;
      end
      if(_zz_68_[57])begin
        _zz_58_ <= _zz_69_;
      end
      if(_zz_68_[58])begin
        _zz_59_ <= _zz_69_;
      end
      if(_zz_68_[59])begin
        _zz_60_ <= _zz_69_;
      end
      if(_zz_68_[60])begin
        _zz_61_ <= _zz_69_;
      end
      if(_zz_68_[61])begin
        _zz_62_ <= _zz_69_;
      end
      if(_zz_68_[62])begin
        _zz_63_ <= _zz_69_;
      end
      if(_zz_68_[63])begin
        _zz_64_ <= _zz_69_;
      end
    end
    if(wen_3)begin
      if(_zz_70_[0])begin
        _zz_1_ <= _zz_71_;
      end
      if(_zz_70_[1])begin
        _zz_2_ <= _zz_71_;
      end
      if(_zz_70_[2])begin
        _zz_3_ <= _zz_71_;
      end
      if(_zz_70_[3])begin
        _zz_4_ <= _zz_71_;
      end
      if(_zz_70_[4])begin
        _zz_5_ <= _zz_71_;
      end
      if(_zz_70_[5])begin
        _zz_6_ <= _zz_71_;
      end
      if(_zz_70_[6])begin
        _zz_7_ <= _zz_71_;
      end
      if(_zz_70_[7])begin
        _zz_8_ <= _zz_71_;
      end
      if(_zz_70_[8])begin
        _zz_9_ <= _zz_71_;
      end
      if(_zz_70_[9])begin
        _zz_10_ <= _zz_71_;
      end
      if(_zz_70_[10])begin
        _zz_11_ <= _zz_71_;
      end
      if(_zz_70_[11])begin
        _zz_12_ <= _zz_71_;
      end
      if(_zz_70_[12])begin
        _zz_13_ <= _zz_71_;
      end
      if(_zz_70_[13])begin
        _zz_14_ <= _zz_71_;
      end
      if(_zz_70_[14])begin
        _zz_15_ <= _zz_71_;
      end
      if(_zz_70_[15])begin
        _zz_16_ <= _zz_71_;
      end
      if(_zz_70_[16])begin
        _zz_17_ <= _zz_71_;
      end
      if(_zz_70_[17])begin
        _zz_18_ <= _zz_71_;
      end
      if(_zz_70_[18])begin
        _zz_19_ <= _zz_71_;
      end
      if(_zz_70_[19])begin
        _zz_20_ <= _zz_71_;
      end
      if(_zz_70_[20])begin
        _zz_21_ <= _zz_71_;
      end
      if(_zz_70_[21])begin
        _zz_22_ <= _zz_71_;
      end
      if(_zz_70_[22])begin
        _zz_23_ <= _zz_71_;
      end
      if(_zz_70_[23])begin
        _zz_24_ <= _zz_71_;
      end
      if(_zz_70_[24])begin
        _zz_25_ <= _zz_71_;
      end
      if(_zz_70_[25])begin
        _zz_26_ <= _zz_71_;
      end
      if(_zz_70_[26])begin
        _zz_27_ <= _zz_71_;
      end
      if(_zz_70_[27])begin
        _zz_28_ <= _zz_71_;
      end
      if(_zz_70_[28])begin
        _zz_29_ <= _zz_71_;
      end
      if(_zz_70_[29])begin
        _zz_30_ <= _zz_71_;
      end
      if(_zz_70_[30])begin
        _zz_31_ <= _zz_71_;
      end
      if(_zz_70_[31])begin
        _zz_32_ <= _zz_71_;
      end
      if(_zz_70_[32])begin
        _zz_33_ <= _zz_71_;
      end
      if(_zz_70_[33])begin
        _zz_34_ <= _zz_71_;
      end
      if(_zz_70_[34])begin
        _zz_35_ <= _zz_71_;
      end
      if(_zz_70_[35])begin
        _zz_36_ <= _zz_71_;
      end
      if(_zz_70_[36])begin
        _zz_37_ <= _zz_71_;
      end
      if(_zz_70_[37])begin
        _zz_38_ <= _zz_71_;
      end
      if(_zz_70_[38])begin
        _zz_39_ <= _zz_71_;
      end
      if(_zz_70_[39])begin
        _zz_40_ <= _zz_71_;
      end
      if(_zz_70_[40])begin
        _zz_41_ <= _zz_71_;
      end
      if(_zz_70_[41])begin
        _zz_42_ <= _zz_71_;
      end
      if(_zz_70_[42])begin
        _zz_43_ <= _zz_71_;
      end
      if(_zz_70_[43])begin
        _zz_44_ <= _zz_71_;
      end
      if(_zz_70_[44])begin
        _zz_45_ <= _zz_71_;
      end
      if(_zz_70_[45])begin
        _zz_46_ <= _zz_71_;
      end
      if(_zz_70_[46])begin
        _zz_47_ <= _zz_71_;
      end
      if(_zz_70_[47])begin
        _zz_48_ <= _zz_71_;
      end
      if(_zz_70_[48])begin
        _zz_49_ <= _zz_71_;
      end
      if(_zz_70_[49])begin
        _zz_50_ <= _zz_71_;
      end
      if(_zz_70_[50])begin
        _zz_51_ <= _zz_71_;
      end
      if(_zz_70_[51])begin
        _zz_52_ <= _zz_71_;
      end
      if(_zz_70_[52])begin
        _zz_53_ <= _zz_71_;
      end
      if(_zz_70_[53])begin
        _zz_54_ <= _zz_71_;
      end
      if(_zz_70_[54])begin
        _zz_55_ <= _zz_71_;
      end
      if(_zz_70_[55])begin
        _zz_56_ <= _zz_71_;
      end
      if(_zz_70_[56])begin
        _zz_57_ <= _zz_71_;
      end
      if(_zz_70_[57])begin
        _zz_58_ <= _zz_71_;
      end
      if(_zz_70_[58])begin
        _zz_59_ <= _zz_71_;
      end
      if(_zz_70_[59])begin
        _zz_60_ <= _zz_71_;
      end
      if(_zz_70_[60])begin
        _zz_61_ <= _zz_71_;
      end
      if(_zz_70_[61])begin
        _zz_62_ <= _zz_71_;
      end
      if(_zz_70_[62])begin
        _zz_63_ <= _zz_71_;
      end
      if(_zz_70_[63])begin
        _zz_64_ <= _zz_71_;
      end
    end
  end

endmodule

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

nReadmWrite.v
