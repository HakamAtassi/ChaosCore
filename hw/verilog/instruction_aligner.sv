// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module instruction_aligner(
  input         clock,
                reset,
  output        io_mem_fetch_packet_ready,
  input         io_mem_fetch_packet_valid,
  input  [31:0] io_mem_fetch_packet_bits_fetch_PC,
  input         io_mem_fetch_packet_bits_valid_bits_0,
                io_mem_fetch_packet_bits_valid_bits_1,
                io_mem_fetch_packet_bits_valid_bits_2,
                io_mem_fetch_packet_bits_valid_bits_3,
  input  [31:0] io_mem_fetch_packet_bits_instructions_0_instruction,
  input  [3:0]  io_mem_fetch_packet_bits_instructions_0_packet_index,
  input  [5:0]  io_mem_fetch_packet_bits_instructions_0_ROB_index,
  input  [31:0] io_mem_fetch_packet_bits_instructions_1_instruction,
  input  [3:0]  io_mem_fetch_packet_bits_instructions_1_packet_index,
  input  [5:0]  io_mem_fetch_packet_bits_instructions_1_ROB_index,
  input  [31:0] io_mem_fetch_packet_bits_instructions_2_instruction,
  input  [3:0]  io_mem_fetch_packet_bits_instructions_2_packet_index,
  input  [5:0]  io_mem_fetch_packet_bits_instructions_2_ROB_index,
  input  [31:0] io_mem_fetch_packet_bits_instructions_3_instruction,
  input  [3:0]  io_mem_fetch_packet_bits_instructions_3_packet_index,
  input  [5:0]  io_mem_fetch_packet_bits_instructions_3_ROB_index,
  input         io_mem_fetch_packet_bits_prediction_hit,
  input  [31:0] io_mem_fetch_packet_bits_prediction_target,
  input  [2:0]  io_mem_fetch_packet_bits_prediction_br_type,
  input         io_mem_fetch_packet_bits_prediction_br_mask_0,
                io_mem_fetch_packet_bits_prediction_br_mask_1,
                io_mem_fetch_packet_bits_prediction_br_mask_2,
                io_mem_fetch_packet_bits_prediction_br_mask_3,
  input  [15:0] io_mem_fetch_packet_bits_GHR,
  input  [6:0]  io_mem_fetch_packet_bits_NEXT,
                io_mem_fetch_packet_bits_TOS,
  output        io_aligned_fetch_packet_valid,
  output [31:0] io_aligned_fetch_packet_bits_fetch_PC,
                io_aligned_fetch_packet_bits_instructions_0_instruction,
  output [3:0]  io_aligned_fetch_packet_bits_instructions_0_packet_index,
  output [5:0]  io_aligned_fetch_packet_bits_instructions_0_ROB_index,
  output [31:0] io_aligned_fetch_packet_bits_instructions_1_instruction,
  output [3:0]  io_aligned_fetch_packet_bits_instructions_1_packet_index,
  output [5:0]  io_aligned_fetch_packet_bits_instructions_1_ROB_index,
  output [31:0] io_aligned_fetch_packet_bits_instructions_2_instruction,
  output [3:0]  io_aligned_fetch_packet_bits_instructions_2_packet_index,
  output [5:0]  io_aligned_fetch_packet_bits_instructions_2_ROB_index,
  output [31:0] io_aligned_fetch_packet_bits_instructions_3_instruction,
  output [3:0]  io_aligned_fetch_packet_bits_instructions_3_packet_index,
  output [5:0]  io_aligned_fetch_packet_bits_instructions_3_ROB_index,
  output        io_aligned_fetch_packet_bits_prediction_hit,
  output [31:0] io_aligned_fetch_packet_bits_prediction_target,
  output [2:0]  io_aligned_fetch_packet_bits_prediction_br_type,
  output        io_aligned_fetch_packet_bits_prediction_br_mask_0,
                io_aligned_fetch_packet_bits_prediction_br_mask_1,
                io_aligned_fetch_packet_bits_prediction_br_mask_2,
                io_aligned_fetch_packet_bits_prediction_br_mask_3,
  output [15:0] io_aligned_fetch_packet_bits_GHR,
  output [6:0]  io_aligned_fetch_packet_bits_NEXT,
                io_aligned_fetch_packet_bits_TOS
);

  wire [31:0] instructions_2;
  wire [31:0] instructions_1;
  wire [31:0] _expanders_7_io_instruction;
  wire [31:0] _expanders_6_io_instruction;
  wire [31:0] _expanders_5_io_instruction;
  wire [31:0] _expanders_4_io_instruction;
  wire [31:0] _expanders_3_io_instruction;
  wire [31:0] _expanders_2_io_instruction;
  wire [31:0] _expanders_1_io_instruction;
  wire [31:0] _expanders_0_io_instruction;
  reg  [31:0] fetch_reg_fetch_PC;
  reg         fetch_reg_valid_bits_0;
  reg         fetch_reg_valid_bits_1;
  reg         fetch_reg_valid_bits_2;
  reg         fetch_reg_valid_bits_3;
  reg  [31:0] fetch_reg_instructions_0_instruction;
  reg  [3:0]  fetch_reg_instructions_0_packet_index;
  reg  [5:0]  fetch_reg_instructions_0_ROB_index;
  reg  [31:0] fetch_reg_instructions_1_instruction;
  reg  [3:0]  fetch_reg_instructions_1_packet_index;
  reg  [5:0]  fetch_reg_instructions_1_ROB_index;
  reg  [31:0] fetch_reg_instructions_2_instruction;
  reg  [3:0]  fetch_reg_instructions_2_packet_index;
  reg  [5:0]  fetch_reg_instructions_2_ROB_index;
  reg  [31:0] fetch_reg_instructions_3_instruction;
  reg  [3:0]  fetch_reg_instructions_3_packet_index;
  reg  [5:0]  fetch_reg_instructions_3_ROB_index;
  reg         fetch_reg_prediction_hit;
  reg  [31:0] fetch_reg_prediction_target;
  reg  [2:0]  fetch_reg_prediction_br_type;
  reg         fetch_reg_prediction_br_mask_0;
  reg         fetch_reg_prediction_br_mask_1;
  reg         fetch_reg_prediction_br_mask_2;
  reg         fetch_reg_prediction_br_mask_3;
  reg  [15:0] fetch_reg_GHR;
  reg  [6:0]  fetch_reg_NEXT;
  reg  [6:0]  fetch_reg_TOS;
  reg  [31:0] aligned_fetch_packet_2_instructions_0_instruction;
  reg  [31:0] aligned_fetch_packet_2_instructions_1_instruction;
  reg  [31:0] aligned_fetch_packet_2_instructions_2_instruction;
  reg  [31:0] aligned_fetch_packet_2_instructions_3_instruction;
  reg         ready_reg;
  reg  [15:0] lower_bits;
  reg         lower_bits_valid;
  wire [31:0] instructions_0 =
    fetch_reg_valid_bits_0 ? fetch_reg_instructions_0_instruction : 32'h0;
  assign instructions_1 =
    fetch_reg_valid_bits_1 ? fetch_reg_instructions_1_instruction : 32'h0;
  assign instructions_2 =
    fetch_reg_valid_bits_2 ? fetch_reg_instructions_2_instruction : 32'h0;
  wire [31:0] instructions_3 =
    fetch_reg_valid_bits_3 ? fetch_reg_instructions_3_instruction : 32'h0;
  wire        _GEN = ready_reg & io_mem_fetch_packet_valid;
  reg         REG;
  reg         REG_1;
  reg         REG_2;
  always @(posedge clock) begin
    automatic logic is_RVC_7;
    is_RVC_7 = fetch_reg_valid_bits_3 & instructions_3[17:16] != 2'h3;
    if (_GEN) begin
      fetch_reg_fetch_PC <= io_mem_fetch_packet_bits_fetch_PC;
      fetch_reg_valid_bits_0 <= io_mem_fetch_packet_bits_valid_bits_0;
      fetch_reg_valid_bits_1 <= io_mem_fetch_packet_bits_valid_bits_1;
      fetch_reg_valid_bits_2 <= io_mem_fetch_packet_bits_valid_bits_2;
      fetch_reg_valid_bits_3 <= io_mem_fetch_packet_bits_valid_bits_3;
      fetch_reg_instructions_0_instruction <=
        io_mem_fetch_packet_bits_instructions_0_instruction;
      fetch_reg_instructions_0_packet_index <=
        io_mem_fetch_packet_bits_instructions_0_packet_index;
      fetch_reg_instructions_0_ROB_index <=
        io_mem_fetch_packet_bits_instructions_0_ROB_index;
      fetch_reg_instructions_1_instruction <=
        io_mem_fetch_packet_bits_instructions_1_instruction;
      fetch_reg_instructions_1_packet_index <=
        io_mem_fetch_packet_bits_instructions_1_packet_index;
      fetch_reg_instructions_1_ROB_index <=
        io_mem_fetch_packet_bits_instructions_1_ROB_index;
      fetch_reg_instructions_2_instruction <=
        io_mem_fetch_packet_bits_instructions_2_instruction;
      fetch_reg_instructions_2_packet_index <=
        io_mem_fetch_packet_bits_instructions_2_packet_index;
      fetch_reg_instructions_2_ROB_index <=
        io_mem_fetch_packet_bits_instructions_2_ROB_index;
      fetch_reg_instructions_3_instruction <=
        io_mem_fetch_packet_bits_instructions_3_instruction;
      fetch_reg_instructions_3_packet_index <=
        io_mem_fetch_packet_bits_instructions_3_packet_index;
      fetch_reg_instructions_3_ROB_index <=
        io_mem_fetch_packet_bits_instructions_3_ROB_index;
      fetch_reg_prediction_hit <= io_mem_fetch_packet_bits_prediction_hit;
      fetch_reg_prediction_target <= io_mem_fetch_packet_bits_prediction_target;
      fetch_reg_prediction_br_type <= io_mem_fetch_packet_bits_prediction_br_type;
      fetch_reg_prediction_br_mask_0 <= io_mem_fetch_packet_bits_prediction_br_mask_0;
      fetch_reg_prediction_br_mask_1 <= io_mem_fetch_packet_bits_prediction_br_mask_1;
      fetch_reg_prediction_br_mask_2 <= io_mem_fetch_packet_bits_prediction_br_mask_2;
      fetch_reg_prediction_br_mask_3 <= io_mem_fetch_packet_bits_prediction_br_mask_3;
      fetch_reg_GHR <= io_mem_fetch_packet_bits_GHR;
      fetch_reg_NEXT <= io_mem_fetch_packet_bits_NEXT;
      fetch_reg_TOS <= io_mem_fetch_packet_bits_TOS;
    end
    if (fetch_reg_valid_bits_2 & instructions_2[1:0] != 2'h3)
      aligned_fetch_packet_2_instructions_0_instruction <= _expanders_4_io_instruction;
    else if (fetch_reg_valid_bits_2)
      aligned_fetch_packet_2_instructions_0_instruction <=
        fetch_reg_instructions_2_instruction;
    if (fetch_reg_valid_bits_2 & instructions_2[17:16] != 2'h3)
      aligned_fetch_packet_2_instructions_1_instruction <= _expanders_5_io_instruction;
    else if (fetch_reg_valid_bits_2)
      aligned_fetch_packet_2_instructions_1_instruction <=
        {instructions_3[15:0], instructions_2[31:16]};
    if (fetch_reg_valid_bits_3 & instructions_3[1:0] != 2'h3)
      aligned_fetch_packet_2_instructions_2_instruction <= _expanders_6_io_instruction;
    else if (fetch_reg_valid_bits_3)
      aligned_fetch_packet_2_instructions_2_instruction <=
        fetch_reg_instructions_3_instruction;
    if (is_RVC_7)
      aligned_fetch_packet_2_instructions_3_instruction <= _expanders_7_io_instruction;
    REG <= _GEN;
    REG_1 <= _GEN;
    REG_2 <= REG_1;
    if (reset) begin
      ready_reg <= 1'h1;
      lower_bits <= 16'h0;
      lower_bits_valid <= 1'h0;
    end
    else begin
      ready_reg <= ~_GEN & (REG | ready_reg);
      if (is_RVC_7 | ~fetch_reg_valid_bits_3) begin
      end
      else
        lower_bits <= instructions_3[31:16];
      lower_bits_valid <= ~is_RVC_7 & fetch_reg_valid_bits_3;
    end
  end // always @(posedge)
  RVC_expander expanders_0 (
    .io_compressed_instr (instructions_0[15:0]),
    .io_instruction      (_expanders_0_io_instruction)
  );
  RVC_expander expanders_1 (
    .io_compressed_instr (instructions_0[31:16]),
    .io_instruction      (_expanders_1_io_instruction)
  );
  RVC_expander expanders_2 (
    .io_compressed_instr (instructions_1[15:0]),
    .io_instruction      (_expanders_2_io_instruction)
  );
  RVC_expander expanders_3 (
    .io_compressed_instr (instructions_1[31:16]),
    .io_instruction      (_expanders_3_io_instruction)
  );
  RVC_expander expanders_4 (
    .io_compressed_instr (instructions_2[15:0]),
    .io_instruction      (_expanders_4_io_instruction)
  );
  RVC_expander expanders_5 (
    .io_compressed_instr (instructions_2[31:16]),
    .io_instruction      (_expanders_5_io_instruction)
  );
  RVC_expander expanders_6 (
    .io_compressed_instr (instructions_3[15:0]),
    .io_instruction      (_expanders_6_io_instruction)
  );
  RVC_expander expanders_7 (
    .io_compressed_instr (instructions_3[31:16]),
    .io_instruction      (_expanders_7_io_instruction)
  );
  assign io_mem_fetch_packet_ready = ready_reg;
  assign io_aligned_fetch_packet_valid = ~_GEN & (REG | REG_2);
  assign io_aligned_fetch_packet_bits_fetch_PC = REG ? fetch_reg_fetch_PC : 32'h0;
  assign io_aligned_fetch_packet_bits_instructions_0_instruction =
    REG
      ? (fetch_reg_valid_bits_0 & instructions_0[1:0] != 2'h3 & ~lower_bits_valid
           ? _expanders_0_io_instruction
           : fetch_reg_valid_bits_0 | ~lower_bits_valid
               ? fetch_reg_instructions_0_instruction
               : {instructions_0[15:0], lower_bits})
      : aligned_fetch_packet_2_instructions_0_instruction;
  assign io_aligned_fetch_packet_bits_instructions_0_packet_index =
    REG ? fetch_reg_instructions_0_packet_index : 4'h0;
  assign io_aligned_fetch_packet_bits_instructions_0_ROB_index =
    REG ? fetch_reg_instructions_0_ROB_index : 6'h0;
  assign io_aligned_fetch_packet_bits_instructions_1_instruction =
    REG
      ? (fetch_reg_valid_bits_0 & instructions_0[17:16] != 2'h3
           ? _expanders_1_io_instruction
           : fetch_reg_valid_bits_0
               ? {instructions_1[15:0], instructions_0[31:16]}
               : fetch_reg_instructions_1_instruction)
      : aligned_fetch_packet_2_instructions_1_instruction;
  assign io_aligned_fetch_packet_bits_instructions_1_packet_index =
    REG ? fetch_reg_instructions_1_packet_index : 4'h0;
  assign io_aligned_fetch_packet_bits_instructions_1_ROB_index =
    REG ? fetch_reg_instructions_1_ROB_index : 6'h0;
  assign io_aligned_fetch_packet_bits_instructions_2_instruction =
    REG
      ? (fetch_reg_valid_bits_1 & instructions_1[1:0] != 2'h3 & ~lower_bits_valid
           ? _expanders_2_io_instruction
           : fetch_reg_valid_bits_1
               ? instructions_2
               : lower_bits_valid
                   ? {instructions_1[15:0], lower_bits}
                   : fetch_reg_instructions_2_instruction)
      : aligned_fetch_packet_2_instructions_2_instruction;
  assign io_aligned_fetch_packet_bits_instructions_2_packet_index =
    REG ? fetch_reg_instructions_2_packet_index : 4'h0;
  assign io_aligned_fetch_packet_bits_instructions_2_ROB_index =
    REG ? fetch_reg_instructions_2_ROB_index : 6'h0;
  assign io_aligned_fetch_packet_bits_instructions_3_instruction =
    REG
      ? (fetch_reg_valid_bits_1 & instructions_1[17:16] != 2'h3
           ? _expanders_3_io_instruction
           : fetch_reg_valid_bits_1
               ? {instructions_2[15:0], instructions_1[31:16]}
               : fetch_reg_instructions_3_instruction)
      : aligned_fetch_packet_2_instructions_3_instruction;
  assign io_aligned_fetch_packet_bits_instructions_3_packet_index =
    REG ? fetch_reg_instructions_3_packet_index : 4'h0;
  assign io_aligned_fetch_packet_bits_instructions_3_ROB_index =
    REG ? fetch_reg_instructions_3_ROB_index : 6'h0;
  assign io_aligned_fetch_packet_bits_prediction_hit = REG & fetch_reg_prediction_hit;
  assign io_aligned_fetch_packet_bits_prediction_target =
    REG ? fetch_reg_prediction_target : 32'h0;
  assign io_aligned_fetch_packet_bits_prediction_br_type =
    REG ? fetch_reg_prediction_br_type : 3'h0;
  assign io_aligned_fetch_packet_bits_prediction_br_mask_0 =
    REG & fetch_reg_prediction_br_mask_0;
  assign io_aligned_fetch_packet_bits_prediction_br_mask_1 =
    REG & fetch_reg_prediction_br_mask_1;
  assign io_aligned_fetch_packet_bits_prediction_br_mask_2 =
    REG & fetch_reg_prediction_br_mask_2;
  assign io_aligned_fetch_packet_bits_prediction_br_mask_3 =
    REG & fetch_reg_prediction_br_mask_3;
  assign io_aligned_fetch_packet_bits_GHR = REG ? fetch_reg_GHR : 16'h0;
  assign io_aligned_fetch_packet_bits_NEXT = REG ? fetch_reg_NEXT : 7'h0;
  assign io_aligned_fetch_packet_bits_TOS = REG ? fetch_reg_TOS : 7'h0;
endmodule

