// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module instruction_aligner(
  input          clock,
                 reset,
  output         io_mem_rsp_ready,
  input          io_mem_rsp_valid,
  input  [127:0] io_mem_rsp_bits_instruction_data,
  input  [31:0]  io_mem_rsp_bits_fetch_PC,
  input          io_aligned_fetch_packet_ready,
  output         io_aligned_fetch_packet_valid,
  output [31:0]  io_aligned_fetch_packet_bits_fetch_PC,
  output         io_aligned_fetch_packet_bits_valid_bits_0,
                 io_aligned_fetch_packet_bits_valid_bits_1,
                 io_aligned_fetch_packet_bits_valid_bits_2,
                 io_aligned_fetch_packet_bits_valid_bits_3,
  output [31:0]  io_aligned_fetch_packet_bits_instructions_0_instruction,
                 io_aligned_fetch_packet_bits_instructions_1_instruction,
                 io_aligned_fetch_packet_bits_instructions_2_instruction,
                 io_aligned_fetch_packet_bits_instructions_3_instruction
);

  wire [3:0]   _validator_io_instruction_output;
  wire [31:0]  _expanders_7_io_instruction;
  wire [31:0]  _expanders_6_io_instruction;
  wire [31:0]  _expanders_5_io_instruction;
  wire [31:0]  _expanders_4_io_instruction;
  wire [31:0]  _expanders_3_io_instruction;
  wire [31:0]  _expanders_2_io_instruction;
  wire [31:0]  _expanders_1_io_instruction;
  wire [31:0]  _expanders_0_io_instruction;
  reg  [127:0] fetch_reg_instruction_data;
  reg  [31:0]  fetch_reg_fetch_PC;
  reg          ready_reg;
  reg  [15:0]  lower_bits;
  reg          lower_bits_valid;
  reg  [31:0]  prev_fetch_PC;
  reg          REG;
  reg          valid_bits_0_REG;
  wire         valid_bits_0 =
    io_mem_rsp_valid
      ? _validator_io_instruction_output[3] & io_mem_rsp_valid
      : REG & valid_bits_0_REG;
  reg          REG_1;
  reg          valid_bits_1_REG;
  wire         valid_bits_1 =
    io_mem_rsp_valid
      ? _validator_io_instruction_output[2] & io_mem_rsp_valid
      : REG_1 & valid_bits_1_REG;
  reg          REG_2;
  reg          valid_bits_2_REG;
  wire         valid_bits_2 =
    io_mem_rsp_valid
      ? _validator_io_instruction_output[1] & io_mem_rsp_valid
      : REG_2 & valid_bits_2_REG;
  reg          REG_3;
  reg          valid_bits_3_REG;
  wire         valid_bits_3 =
    io_mem_rsp_valid
      ? _validator_io_instruction_output[0] & io_mem_rsp_valid
      : REG_3 & valid_bits_3_REG;
  wire         jumped =
    io_mem_rsp_valid & io_mem_rsp_bits_fetch_PC - prev_fetch_PC != 32'h10 & prev_fetch_PC
    + {27'h0, 5'h8 - {2'h0, prev_fetch_PC[2:0]}} != io_mem_rsp_bits_fetch_PC;
  reg          REG_4;
  wire [31:0]  instructions_0 =
    valid_bits_0
      ? (io_mem_rsp_valid
           ? io_mem_rsp_bits_instruction_data[31:0]
           : REG_4 ? fetch_reg_instruction_data[31:0] : 32'h0)
      : 32'h0;
  wire         is_RVC_0 = valid_bits_0 & instructions_0[1:0] != 2'h3;
  wire         is_RVC_1 = valid_bits_0 & instructions_0[17:16] != 2'h3;
  reg          REG_5;
  wire [31:0]  instructions_1 =
    valid_bits_1
      ? (io_mem_rsp_valid
           ? io_mem_rsp_bits_instruction_data[63:32]
           : REG_5 ? fetch_reg_instruction_data[63:32] : 32'h0)
      : 32'h0;
  wire         is_RVC_2 = valid_bits_1 & instructions_1[1:0] != 2'h3;
  wire         is_RVC_3 = valid_bits_1 & instructions_1[17:16] != 2'h3;
  reg          REG_6;
  wire [31:0]  instructions_2 =
    valid_bits_2
      ? (io_mem_rsp_valid
           ? io_mem_rsp_bits_instruction_data[95:64]
           : REG_6 ? fetch_reg_instruction_data[95:64] : 32'h0)
      : 32'h0;
  wire         is_RVC_4 = valid_bits_2 & instructions_2[1:0] != 2'h3;
  wire         is_RVC_5 = valid_bits_2 & instructions_2[17:16] != 2'h3;
  reg          REG_7;
  wire [31:0]  instructions_3 =
    valid_bits_3
      ? (io_mem_rsp_valid
           ? io_mem_rsp_bits_instruction_data[127:96]
           : REG_7 ? fetch_reg_instruction_data[127:96] : 32'h0)
      : 32'h0;
  wire         is_RVC_6 = valid_bits_3 & instructions_3[1:0] != 2'h3;
  wire         is_RVC_7 = valid_bits_3 & instructions_3[17:16] != 2'h3;
  wire         upper_bits_0 =
    io_mem_rsp_bits_fetch_PC[1] | ~(io_mem_rsp_bits_fetch_PC[1]) & lower_bits_valid
    & ~jumped | is_RVC_0 & ~(io_mem_rsp_bits_fetch_PC[1]) & (~lower_bits_valid | jumped);
  wire         upper_bits_1 = ~upper_bits_0 | upper_bits_0 & is_RVC_1;
  wire         upper_bits_2 = ~upper_bits_1 | upper_bits_1 & is_RVC_2;
  wire         upper_bits_3 = ~upper_bits_2 | upper_bits_2 & is_RVC_3;
  wire         upper_bits_4 = ~upper_bits_3 | upper_bits_3 & is_RVC_4;
  wire         upper_bits_5 = ~upper_bits_4 | upper_bits_4 & is_RVC_5;
  wire         upper_bits_6 = ~upper_bits_5 | upper_bits_5 & is_RVC_6;
  wire         upper_bits_7 = ~upper_bits_6 | upper_bits_6 & is_RVC_7;
  wire         _GEN = lower_bits_valid & upper_bits_0 & ~jumped;
  wire         _GEN_0 = is_RVC_0 & upper_bits_0 & ~(io_mem_rsp_bits_fetch_PC[1]);
  wire         aligned_fetch_packet_1_valid_bits_0 =
    _GEN | _GEN_0 | valid_bits_0 & ~(io_mem_rsp_bits_fetch_PC[1]);
  wire         _GEN_1 = is_RVC_2 & upper_bits_1;
  wire         _GEN_2 = valid_bits_1 & upper_bits_3 & ~upper_bits_2;
  wire         aligned_fetch_packet_1_valid_bits_2 = _GEN_1 | _GEN_2;
  wire         _GEN_3 = valid_bits_1 & valid_bits_0 & upper_bits_2;
  wire         _GEN_4 = _GEN_1 | _GEN_2;
  wire         aligned_fetch_packet_1_valid_bits_1 =
    ~_GEN_4 & _GEN_3 | is_RVC_1 & upper_bits_0;
  reg          REG_8;
  reg          REG_9;
  wire         _GEN_5 = is_RVC_4 & REG_8 & REG_9;
  reg          REG_10;
  reg          REG_11;
  wire         aligned_fetch_packet_2_valid_bits_0 =
    _GEN_5 | valid_bits_2 & REG_10 & ~REG_11;
  wire         _GEN_6 =
    valid_bits_2 & valid_bits_1 & upper_bits_4 & ~upper_bits_3 & ~is_RVC_3;
  wire         aligned_fetch_packet_1_valid_bits_3 = _GEN_6 | is_RVC_3 & upper_bits_2;
  reg          REG_12;
  reg          REG_13;
  reg          REG_14;
  wire         _GEN_7 = is_RVC_6 & REG_13 & REG_14;
  reg          REG_15;
  reg          REG_16;
  wire         aligned_fetch_packet_2_valid_bits_2 =
    _GEN_7 | valid_bits_3 & REG_15 & ~REG_16;
  reg          REG_17;
  wire         _GEN_8 = valid_bits_3 & valid_bits_2 & REG_17 & ~is_RVC_5;
  wire         aligned_fetch_packet_2_valid_bits_1 = _GEN_8 | is_RVC_5 & REG_12;
  reg          REG_18;
  reg          REG_19;
  wire         aligned_fetch_packet_2_valid_bits_3 = REG_19 & is_RVC_7 & REG_18;
  wire         _GEN_9 = ready_reg & io_mem_rsp_valid;
  wire         _GEN_10 = _GEN_9 & io_aligned_fetch_packet_ready;
  reg          REG_20;
  wire         _GEN_11 = REG_20 & io_aligned_fetch_packet_ready;
  reg  [31:0]  io_aligned_fetch_packet_bits_fetch_PC_REG;
  reg          lower_bits_valid_REG;
  always @(posedge clock) begin
    if (_GEN_10) begin
      fetch_reg_instruction_data <= io_mem_rsp_bits_instruction_data;
      fetch_reg_fetch_PC <= io_mem_rsp_bits_fetch_PC;
    end
    REG <= io_mem_rsp_valid;
    valid_bits_0_REG <= _validator_io_instruction_output[3] & io_mem_rsp_valid;
    REG_1 <= io_mem_rsp_valid;
    valid_bits_1_REG <= _validator_io_instruction_output[2] & io_mem_rsp_valid;
    REG_2 <= io_mem_rsp_valid;
    valid_bits_2_REG <= _validator_io_instruction_output[1] & io_mem_rsp_valid;
    REG_3 <= io_mem_rsp_valid;
    valid_bits_3_REG <= _validator_io_instruction_output[0] & io_mem_rsp_valid;
    REG_4 <= io_mem_rsp_valid;
    REG_5 <= io_mem_rsp_valid;
    REG_6 <= io_mem_rsp_valid;
    REG_7 <= io_mem_rsp_valid;
    REG_8 <= upper_bits_3;
    REG_9 <= upper_bits_4;
    REG_10 <= upper_bits_5;
    REG_11 <= upper_bits_4;
    REG_12 <= upper_bits_4;
    REG_13 <= upper_bits_5;
    REG_14 <= upper_bits_6;
    REG_15 <= upper_bits_7;
    REG_16 <= upper_bits_6;
    REG_17 <= upper_bits_6 & ~upper_bits_5;
    REG_18 <= upper_bits_6;
    REG_19 <= upper_bits_7;
    REG_20 <= _GEN_9;
    io_aligned_fetch_packet_bits_fetch_PC_REG <= io_mem_rsp_bits_fetch_PC;
    lower_bits_valid_REG <= upper_bits_7;
    if (reset) begin
      ready_reg <= 1'h1;
      lower_bits <= 16'h0;
      lower_bits_valid <= 1'h0;
      prev_fetch_PC <= 32'h0;
    end
    else begin
      ready_reg <= ~_GEN_10 & (_GEN_11 | ready_reg);
      if (_GEN_10) begin
        lower_bits <= instructions_3[31:16];
        lower_bits_valid <= ~upper_bits_3 & (&(lower_bits[1:0]));
        prev_fetch_PC <= io_mem_rsp_bits_fetch_PC;
      end
      else if (_GEN_11) begin
        lower_bits <= instructions_3[31:16];
        lower_bits_valid <= ~lower_bits_valid_REG & (&(lower_bits[1:0]));
      end
    end
  end // always @(posedge)
  RVC_expander expanders_0 (
    .io_compressed_instr (instructions_0[15:0]),
    .io_instruction      (_expanders_0_io_instruction)
  );
  RVC_expander expanders_1 (
    .io_compressed_instr (instructions_0[31:16]),
    .io_instruction      (_expanders_1_io_instruction)
  );
  RVC_expander expanders_2 (
    .io_compressed_instr (instructions_1[15:0]),
    .io_instruction      (_expanders_2_io_instruction)
  );
  RVC_expander expanders_3 (
    .io_compressed_instr (instructions_1[31:16]),
    .io_instruction      (_expanders_3_io_instruction)
  );
  RVC_expander expanders_4 (
    .io_compressed_instr (instructions_2[15:0]),
    .io_instruction      (_expanders_4_io_instruction)
  );
  RVC_expander expanders_5 (
    .io_compressed_instr (instructions_2[31:16]),
    .io_instruction      (_expanders_5_io_instruction)
  );
  RVC_expander expanders_6 (
    .io_compressed_instr (instructions_3[15:0]),
    .io_instruction      (_expanders_6_io_instruction)
  );
  RVC_expander expanders_7 (
    .io_compressed_instr (instructions_3[31:16]),
    .io_instruction      (_expanders_7_io_instruction)
  );
  instruction_validator validator (
    .io_instruction_index  (io_mem_rsp_bits_fetch_PC[3:2]),
    .io_instruction_output (_validator_io_instruction_output)
  );
  assign io_mem_rsp_ready = ready_reg;
  assign io_aligned_fetch_packet_valid =
    _GEN_10
      ? aligned_fetch_packet_1_valid_bits_0 | aligned_fetch_packet_1_valid_bits_1
        | aligned_fetch_packet_1_valid_bits_2 | aligned_fetch_packet_1_valid_bits_3
      : _GEN_11
        & (aligned_fetch_packet_2_valid_bits_0 | aligned_fetch_packet_2_valid_bits_1
           | aligned_fetch_packet_2_valid_bits_2 | aligned_fetch_packet_2_valid_bits_3);
  assign io_aligned_fetch_packet_bits_fetch_PC =
    _GEN_10
      ? io_mem_rsp_bits_fetch_PC
      : valid_bits_0 | valid_bits_1
          ? fetch_reg_fetch_PC + {27'h0, 5'h8 - {2'h0, fetch_reg_fetch_PC[2:0]}}
          : io_aligned_fetch_packet_bits_fetch_PC_REG;
  assign io_aligned_fetch_packet_bits_valid_bits_0 =
    _GEN_10 ? aligned_fetch_packet_1_valid_bits_0 : aligned_fetch_packet_2_valid_bits_0;
  assign io_aligned_fetch_packet_bits_valid_bits_1 =
    _GEN_10 ? aligned_fetch_packet_1_valid_bits_1 : aligned_fetch_packet_2_valid_bits_1;
  assign io_aligned_fetch_packet_bits_valid_bits_2 =
    _GEN_10 ? aligned_fetch_packet_1_valid_bits_2 : aligned_fetch_packet_2_valid_bits_2;
  assign io_aligned_fetch_packet_bits_valid_bits_3 =
    _GEN_10 ? aligned_fetch_packet_1_valid_bits_3 : aligned_fetch_packet_2_valid_bits_3;
  assign io_aligned_fetch_packet_bits_instructions_0_instruction =
    _GEN_10
      ? (_GEN
           ? {instructions_0[15:0], lower_bits}
           : _GEN_0 ? _expanders_0_io_instruction : instructions_0)
      : _GEN_5 ? _expanders_4_io_instruction : instructions_2;
  assign io_aligned_fetch_packet_bits_instructions_1_instruction =
    _GEN_10
      ? (_GEN_4 | ~_GEN_3
           ? _expanders_1_io_instruction
           : {instructions_1[15:0], instructions_0[31:16]})
      : _GEN_8
          ? {instructions_3[15:0], instructions_2[31:16]}
          : _expanders_5_io_instruction;
  assign io_aligned_fetch_packet_bits_instructions_2_instruction =
    _GEN_10
      ? (_GEN_1 ? _expanders_2_io_instruction : instructions_1)
      : _GEN_7 ? _expanders_6_io_instruction : instructions_3;
  assign io_aligned_fetch_packet_bits_instructions_3_instruction =
    _GEN_10
      ? (_GEN_6
           ? {instructions_2[15:0], instructions_1[31:16]}
           : _expanders_3_io_instruction)
      : _expanders_7_io_instruction;
endmodule

