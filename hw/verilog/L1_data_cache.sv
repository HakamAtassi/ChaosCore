// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module L1_data_cache(
  input         clock,
                reset,
  output        m_axi_awvalid,
  input         m_axi_awready,
  output [7:0]  m_axi_awid,
  output [31:0] m_axi_awaddr,
  output [7:0]  m_axi_awlen,
  output [2:0]  m_axi_awsize,
  output [1:0]  m_axi_awburst,
  output        m_axi_awlock,
  output [3:0]  m_axi_awcache,
  output [2:0]  m_axi_awprot,
  output [3:0]  m_axi_awqos,
                m_axi_awregion,
  output        m_axi_awuser,
  input         m_axi_wready,
  output        m_axi_wvalid,
  output [31:0] m_axi_wdata,
  output [3:0]  m_axi_wstrb,
  output        m_axi_wlast,
                m_axi_wuser,
                m_axi_bready,
  input         m_axi_bvalid,
  input  [7:0]  m_axi_bid,
  input  [1:0]  m_axi_bresp,
  input         m_axi_buser,
  output        m_axi_arvalid,
  input         m_axi_arready,
  output [7:0]  m_axi_arid,
  output [31:0] m_axi_araddr,
  output [7:0]  m_axi_arlen,
  output [2:0]  m_axi_arsize,
  output [1:0]  m_axi_arburst,
  output        m_axi_arlock,
  output [3:0]  m_axi_arcache,
  output [2:0]  m_axi_arprot,
  output [3:0]  m_axi_arqos,
                m_axi_arregion,
  output        m_axi_aruser,
                m_axi_rready,
  input         m_axi_rvalid,
  input  [7:0]  m_axi_rid,
  input  [31:0] m_axi_rdata,
  input  [1:0]  m_axi_rresp,
  input         m_axi_rlast,
                m_axi_ruser,
  output        io_CPU_request_ready,
  input         io_CPU_request_valid,
  input  [31:0] io_CPU_request_bits_addr,
                io_CPU_request_bits_data,
  input  [1:0]  io_CPU_request_bits_memory_type,
                io_CPU_request_bits_access_width,
  input  [3:0]  io_CPU_request_bits_MOB_index,
  input         io_CPU_response_ready,
  output        io_CPU_response_valid,
  output [31:0] io_CPU_response_bits_data,
  output [3:0]  io_CPU_response_bits_MOB_index
);

  wire [1:0]       DATA_CACHE_NEXT_STATE;
  wire             tag_hit_OH_1;
  wire             tag_hit_OH_0;
  wire [255:0]     data_way;
  wire [5:0]       backend_set;
  wire [20:0]      _tag_memories_3_io_data_out;
  wire [20:0]      _tag_memories_2_io_data_out;
  wire [20:0]      _tag_memories_1_io_data_out;
  wire [20:0]      _tag_memories_0_io_data_out;
  wire [7:0]       _data_memories_31_io_data_out;
  wire [7:0]       _data_memories_30_io_data_out;
  wire [7:0]       _data_memories_29_io_data_out;
  wire [7:0]       _data_memories_28_io_data_out;
  wire [7:0]       _data_memories_27_io_data_out;
  wire [7:0]       _data_memories_26_io_data_out;
  wire [7:0]       _data_memories_25_io_data_out;
  wire [7:0]       _data_memories_24_io_data_out;
  wire [7:0]       _data_memories_23_io_data_out;
  wire [7:0]       _data_memories_22_io_data_out;
  wire [7:0]       _data_memories_21_io_data_out;
  wire [7:0]       _data_memories_20_io_data_out;
  wire [7:0]       _data_memories_19_io_data_out;
  wire [7:0]       _data_memories_18_io_data_out;
  wire [7:0]       _data_memories_17_io_data_out;
  wire [7:0]       _data_memories_16_io_data_out;
  wire [7:0]       _data_memories_15_io_data_out;
  wire [7:0]       _data_memories_14_io_data_out;
  wire [7:0]       _data_memories_13_io_data_out;
  wire [7:0]       _data_memories_12_io_data_out;
  wire [7:0]       _data_memories_11_io_data_out;
  wire [7:0]       _data_memories_10_io_data_out;
  wire [7:0]       _data_memories_9_io_data_out;
  wire [7:0]       _data_memories_8_io_data_out;
  wire [7:0]       _data_memories_7_io_data_out;
  wire [7:0]       _data_memories_6_io_data_out;
  wire [7:0]       _data_memories_5_io_data_out;
  wire [7:0]       _data_memories_4_io_data_out;
  wire [7:0]       _data_memories_3_io_data_out;
  wire [7:0]       _data_memories_2_io_data_out;
  wire [7:0]       _data_memories_1_io_data_out;
  wire [7:0]       _data_memories_0_io_data_out;
  wire             _cacheable_response_Q_io_deq_valid;
  wire [255:0]     _cacheable_response_Q_io_deq_bits;
  wire             _AXI_request_Q_io_deq_valid;
  wire             _AXI_request_Q_io_deq_bits_write_valid;
  wire [31:0]      _AXI_request_Q_io_deq_bits_write_address;
  wire [255:0]     _AXI_request_Q_io_deq_bits_write_data;
  wire             _AXI_request_Q_io_deq_bits_read_valid;
  wire [31:0]      _AXI_request_Q_io_deq_bits_read_address;
  wire [6:0]       _AXI_request_Q_io_deq_bits_read_bytes;
  wire             _final_response_buffer_io_deq_valid;
  wire [255:0]     _final_response_buffer_io_deq_bits;
  reg  [255:0]     AXI_AW_DATA_BUFFER;
  reg  [1:0]       AXI_REQUEST_STATE;
  wire             m_axi_wvalid_0 = AXI_REQUEST_STATE == 2'h1;
  wire             m_axi_rready_0 = AXI_REQUEST_STATE == 2'h2;
  wire             _GEN = m_axi_rready_0 & m_axi_rvalid;
  reg  [31:0]      write_counter;
  wire             m_axi_wlast_0 = m_axi_wvalid_0 & write_counter == 32'h0;
  reg  [255:0]     AXI_read_buffer;
  wire             _GEN_0 = _GEN & m_axi_rlast;
  wire [255:0]     _GEN_1 = {m_axi_rdata, AXI_read_buffer[255:32]};
  reg  [1:0]       DATA_CACHE_STATE;
  wire [31:0]      active_address =
    (&DATA_CACHE_STATE) ? 32'h0 : io_CPU_request_bits_addr;
  wire [1:0]       active_access_width =
    (&DATA_CACHE_STATE) ? 2'h0 : io_CPU_request_bits_access_width;
  reg              valid_hit_REG;
  reg              valid_miss_REG;
  wire             _byte_offset_match_T_125 =
    ((&DATA_CACHE_STATE) ? 2'h0 : io_CPU_request_bits_memory_type) == 2'h2;
  reg  [3:0]       hit_MOB_index_REG;
  reg  [31:0]      miss_address_REG;
  wire [1:0]       _miss_way_T_1 = ~{tag_hit_OH_1, tag_hit_OH_0};
  assign backend_set = io_CPU_request_bits_addr[10:5];
  wire [31:0]      word_offset = io_CPU_request_bits_addr / 32'h4;
  wire             request_non_cacheable_read =
    io_CPU_request_bits_memory_type == 2'h1 & io_CPU_request_bits_addr[0];
  wire             request_non_cacheable_write =
    io_CPU_request_bits_memory_type == 2'h2 & io_CPU_request_bits_addr[0];
  reg  [31:0]      AXI_request_Q_io_enq_bits_write_data_REG;
  wire [6:0]       _GEN_2 =
    {1'h0,
     request_non_cacheable_write
       ? {4'h0,
          (&io_CPU_request_bits_access_width)
            ? 2'h0
            : io_CPU_request_bits_access_width == 2'h2 ? 2'h2 : 2'h1}
       : 6'h20};
  reg  [31:0]      AXI_request_Q_io_enq_bits_read_address_r;
  reg  [31:0]      AXI_request_Q_io_enq_bits_read_address_r_1;
  wire             write_request_valid =
    _AXI_request_Q_io_deq_valid & _AXI_request_Q_io_deq_bits_write_valid;
  wire             read_request_valid =
    _AXI_request_Q_io_deq_valid & _AXI_request_Q_io_deq_bits_read_valid;
  wire             m_axi_awvalid_0 = write_request_valid & ~(|AXI_REQUEST_STATE);
  wire [7:0]       m_axi_awlen_0 =
    write_request_valid
      ? {1'h0,
         _AXI_request_Q_io_deq_bits_read_bytes < 7'h4
           ? 7'h0
           : _AXI_request_Q_io_deq_bits_read_bytes / 7'h4 - 7'h1}
      : 8'h0;
  wire             m_axi_arvalid_0 = read_request_valid & ~(|AXI_REQUEST_STATE);
  wire             _half_word_offset_match_T_127 = active_access_width == 2'h2;
  wire             _byte_offset_match_T_127 = active_access_width == 2'h1;
  wire             _data_memories_data_in_31_T = DATA_CACHE_STATE == 2'h2;
  assign data_way =
    {_data_memories_31_io_data_out,
     _data_memories_30_io_data_out,
     _data_memories_29_io_data_out,
     _data_memories_28_io_data_out,
     _data_memories_27_io_data_out,
     _data_memories_26_io_data_out,
     _data_memories_25_io_data_out,
     _data_memories_24_io_data_out,
     _data_memories_23_io_data_out,
     _data_memories_22_io_data_out,
     _data_memories_21_io_data_out,
     _data_memories_20_io_data_out,
     _data_memories_19_io_data_out,
     _data_memories_18_io_data_out,
     _data_memories_17_io_data_out,
     _data_memories_16_io_data_out,
     _data_memories_15_io_data_out,
     _data_memories_14_io_data_out,
     _data_memories_13_io_data_out,
     _data_memories_12_io_data_out,
     _data_memories_11_io_data_out,
     _data_memories_10_io_data_out,
     _data_memories_9_io_data_out,
     _data_memories_8_io_data_out,
     _data_memories_7_io_data_out,
     _data_memories_6_io_data_out,
     _data_memories_5_io_data_out,
     _data_memories_4_io_data_out,
     _data_memories_3_io_data_out,
     _data_memories_2_io_data_out,
     _data_memories_1_io_data_out,
     _data_memories_0_io_data_out};
  reg  [4:0]       tag_hit_OH_0_REG;
  assign tag_hit_OH_0 = _tag_memories_0_io_data_out == {16'h0, tag_hit_OH_0_REG};
  reg  [4:0]       tag_hit_OH_1_REG;
  assign tag_hit_OH_1 = _tag_memories_1_io_data_out == {16'h0, tag_hit_OH_1_REG};
  reg  [4:0]       tag_hit_OH_2_REG;
  wire             tag_hit_OH_2 =
    _tag_memories_2_io_data_out == {16'h0, tag_hit_OH_2_REG};
  reg  [4:0]       tag_hit_OH_3_REG;
  wire             tag_hit_OH_3 =
    _tag_memories_3_io_data_out == {16'h0, tag_hit_OH_3_REG};
  wire [3:0][20:0] _GEN_3 =
    {{_tag_memories_3_io_data_out},
     {_tag_memories_2_io_data_out},
     {_tag_memories_1_io_data_out},
     {_tag_memories_0_io_data_out}};
  reg  [1:0]       MSHRs_3_back_pointer;
  reg  [2:0]       MSHR_front_pointer;
  wire [3:0][1:0]  _GEN_4 = {{MSHRs_3_back_pointer}, {2'h0}, {2'h0}, {2'h0}};
  wire             _GEN_5 = _GEN_4[MSHR_front_pointer[1:0]] == 2'h0;
  wire [3:0][1:0]  _GEN_6 =
    {{(&DATA_CACHE_STATE) & (&DATA_CACHE_STATE) & _GEN_5 ? 2'h0 : DATA_CACHE_STATE},
     {2'h3},
     {DATA_CACHE_STATE},
     {_cacheable_response_Q_io_deq_valid ? 2'h2 : DATA_CACHE_STATE}};
  assign DATA_CACHE_NEXT_STATE = _GEN_6[DATA_CACHE_STATE];
  reg              output_valid_r;
  reg              output_valid_r_1;
  always @(posedge clock) begin
    automatic logic       _GEN_7;
    automatic logic       _GEN_8;
    automatic logic       _GEN_9;
    automatic logic [4:0] active_tag =
      (&DATA_CACHE_STATE) ? 5'h0 : io_CPU_request_bits_addr[15:11];
    automatic logic       _valid_miss_T = tag_hit_OH_0 | tag_hit_OH_1;
    _GEN_7 = m_axi_awready & m_axi_awvalid_0;
    _GEN_8 = m_axi_wready & m_axi_wvalid_0;
    _GEN_9 = m_axi_wvalid_0 & _GEN_8;
    if (write_request_valid & _GEN_7)
      AXI_AW_DATA_BUFFER <= _AXI_request_Q_io_deq_bits_write_data;
    else if (_GEN_9)
      AXI_AW_DATA_BUFFER <= {32'h0, AXI_AW_DATA_BUFFER[255:32]};
    if (~m_axi_rready_0 | _GEN_0 | ~_GEN) begin
    end
    else
      AXI_read_buffer <= _GEN_1;
    valid_hit_REG <= io_CPU_request_valid;
    valid_miss_REG <= io_CPU_request_valid;
    hit_MOB_index_REG <= io_CPU_request_bits_MOB_index;
    miss_address_REG <= active_address;
    AXI_request_Q_io_enq_bits_write_data_REG <= io_CPU_request_bits_data;
    AXI_request_Q_io_enq_bits_read_address_r <= io_CPU_request_bits_addr;
    AXI_request_Q_io_enq_bits_read_address_r_1 <=
      AXI_request_Q_io_enq_bits_read_address_r;
    tag_hit_OH_0_REG <= active_tag;
    tag_hit_OH_1_REG <= active_tag;
    tag_hit_OH_2_REG <= active_tag;
    tag_hit_OH_3_REG <= active_tag;
    if (~(_valid_miss_T | tag_hit_OH_2 | tag_hit_OH_3) & valid_miss_REG
        & miss_address_REG == 32'h0)
      MSHRs_3_back_pointer <= MSHRs_3_back_pointer + 2'h1;
    output_valid_r <= (_valid_miss_T | tag_hit_OH_2 | tag_hit_OH_3) & valid_hit_REG;
    output_valid_r_1 <= output_valid_r;
    if (reset) begin
      AXI_REQUEST_STATE <= 2'h0;
      write_counter <= 32'h0;
      DATA_CACHE_STATE <= 2'h0;
      MSHR_front_pointer <= 3'h0;
    end
    else begin
      if (|AXI_REQUEST_STATE) begin
        if (m_axi_wvalid_0) begin
          if (m_axi_wlast_0 & _GEN_8)
            AXI_REQUEST_STATE <= 2'h3;
        end
        else if ((&AXI_REQUEST_STATE)
                   ? (&AXI_REQUEST_STATE) & m_axi_bvalid
                   : m_axi_rready_0 & m_axi_rlast & _GEN)
          AXI_REQUEST_STATE <= 2'h0;
      end
      else if (_GEN_7)
        AXI_REQUEST_STATE <= 2'h1;
      else
        AXI_REQUEST_STATE <= {m_axi_arready & m_axi_arvalid_0, 1'h0};
      if (_GEN_9)
        write_counter <= write_counter - 32'h1;
      else if (~(|AXI_REQUEST_STATE) & _GEN_7)
        write_counter <= {24'h0, m_axi_awlen_0};
      DATA_CACHE_STATE <= DATA_CACHE_NEXT_STATE;
      if ((&DATA_CACHE_STATE) & _GEN_5)
        MSHR_front_pointer <= MSHR_front_pointer + 3'h1;
    end
  end // always @(posedge)
  Queue1_UInt256 final_response_buffer (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (m_axi_rready_0 & _GEN_0),
    .io_enq_bits  (_GEN_1),
    .io_deq_ready (1'h1),
    .io_deq_valid (_final_response_buffer_io_deq_valid),
    .io_deq_bits  (_final_response_buffer_io_deq_bits)
  );
  Queue4_AXI_request_Q_entry AXI_request_Q (
    .clock                     (clock),
    .reset                     (reset),
    .io_enq_valid              (request_non_cacheable_read | request_non_cacheable_write),
    .io_enq_bits_write_valid   (request_non_cacheable_write),
    .io_enq_bits_write_address
      ({6'h0, _GEN_3[_miss_way_T_1[0] ? 2'h1 : {_miss_way_T_1[1], 1'h0}], 5'h0}),
    .io_enq_bits_write_data
      (request_non_cacheable_write
         ? {224'h0, AXI_request_Q_io_enq_bits_write_data_REG}
         : data_way),
    .io_enq_bits_write_bytes   (_GEN_2),
    .io_enq_bits_read_valid    (request_non_cacheable_read),
    .io_enq_bits_read_address  (AXI_request_Q_io_enq_bits_read_address_r_1),
    .io_enq_bits_read_bytes    (_GEN_2),
    .io_deq_valid              (_AXI_request_Q_io_deq_valid),
    .io_deq_bits_write_valid   (_AXI_request_Q_io_deq_bits_write_valid),
    .io_deq_bits_write_address (_AXI_request_Q_io_deq_bits_write_address),
    .io_deq_bits_write_data    (_AXI_request_Q_io_deq_bits_write_data),
    .io_deq_bits_read_valid    (_AXI_request_Q_io_deq_bits_read_valid),
    .io_deq_bits_read_address  (_AXI_request_Q_io_deq_bits_read_address),
    .io_deq_bits_read_bytes    (_AXI_request_Q_io_deq_bits_read_bytes)
  );
  Queue1_UInt256_2 cacheable_response_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_valid (_final_response_buffer_io_deq_valid),
    .io_enq_bits  (_final_response_buffer_io_deq_bits),
    .io_deq_valid (_cacheable_response_Q_io_deq_valid),
    .io_deq_bits  (_cacheable_response_Q_io_deq_bits)
  );
  ReadWriteSmem data_memories_0 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | ~(|word_offset) & _byte_offset_match_T_125
       & (&active_access_width) | ~(|word_offset) & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | ~(|word_offset) & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[7:0]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_0_io_data_out)
  );
  ReadWriteSmem data_memories_1 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | ~(|word_offset) & _byte_offset_match_T_125
       & (&active_access_width) | ~(|word_offset) & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[15:8]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_1_io_data_out)
  );
  ReadWriteSmem data_memories_2 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | ~(|word_offset) & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h1 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h2 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[23:16]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_2_io_data_out)
  );
  ReadWriteSmem data_memories_3 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | ~(|word_offset) & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h1 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h3 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[31:24]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_3_io_data_out)
  );
  ReadWriteSmem data_memories_4 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h1 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h2 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h4 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[39:32]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_4_io_data_out)
  );
  ReadWriteSmem data_memories_5 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h1 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h2 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h5 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[47:40]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_5_io_data_out)
  );
  ReadWriteSmem data_memories_6 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h1 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h3 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h6 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[55:48]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_6_io_data_out)
  );
  ReadWriteSmem data_memories_7 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h1 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h3 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h7 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[63:56]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_7_io_data_out)
  );
  ReadWriteSmem data_memories_8 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h2 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h4 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h8 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[71:64]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_8_io_data_out)
  );
  ReadWriteSmem data_memories_9 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h2 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h4 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h9 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[79:72]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_9_io_data_out)
  );
  ReadWriteSmem data_memories_10 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h2 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h5 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hA & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[87:80]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_10_io_data_out)
  );
  ReadWriteSmem data_memories_11 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h2 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h5 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hB & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[95:88]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_11_io_data_out)
  );
  ReadWriteSmem data_memories_12 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h3 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h6 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hC & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[103:96]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_12_io_data_out)
  );
  ReadWriteSmem data_memories_13 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h3 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h6 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hD & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[111:104]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_13_io_data_out)
  );
  ReadWriteSmem data_memories_14 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h3 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h7 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hE & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[119:112]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_14_io_data_out)
  );
  ReadWriteSmem data_memories_15 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h3 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h7 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'hF & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[127:120]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_15_io_data_out)
  );
  ReadWriteSmem data_memories_16 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h4 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h8 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h10 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[135:128]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_16_io_data_out)
  );
  ReadWriteSmem data_memories_17 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h4 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h8 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h11 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[143:136]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_17_io_data_out)
  );
  ReadWriteSmem data_memories_18 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h4 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h9 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h12 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[151:144]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_18_io_data_out)
  );
  ReadWriteSmem data_memories_19 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h4 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'h9 & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h13 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[159:152]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_19_io_data_out)
  );
  ReadWriteSmem data_memories_20 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h5 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hA & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h14 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[167:160]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_20_io_data_out)
  );
  ReadWriteSmem data_memories_21 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h5 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hA & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h15 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[175:168]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_21_io_data_out)
  );
  ReadWriteSmem data_memories_22 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h5 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hB & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h16 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[183:176]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_22_io_data_out)
  );
  ReadWriteSmem data_memories_23 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h5 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hB & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h17 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[191:184]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_23_io_data_out)
  );
  ReadWriteSmem data_memories_24 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h6 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hC & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h18 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[199:192]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_24_io_data_out)
  );
  ReadWriteSmem data_memories_25 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h6 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hC & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h19 & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[207:200]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_25_io_data_out)
  );
  ReadWriteSmem data_memories_26 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h6 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hD & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1A & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[215:208]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_26_io_data_out)
  );
  ReadWriteSmem data_memories_27 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h6 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hD & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1B & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[223:216]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_27_io_data_out)
  );
  ReadWriteSmem data_memories_28 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h7 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hE & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1C & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[231:224]
         : io_CPU_request_bits_data[7:0]),
    .io_data_out (_data_memories_28_io_data_out)
  );
  ReadWriteSmem data_memories_29 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h7 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hE & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1D & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[239:232]
         : io_CPU_request_bits_data[15:8]),
    .io_data_out (_data_memories_29_io_data_out)
  );
  ReadWriteSmem data_memories_30 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h7 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hF & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1E & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[247:240]
         : io_CPU_request_bits_data[23:16]),
    .io_data_out (_data_memories_30_io_data_out)
  );
  ReadWriteSmem data_memories_31 (
    .clock       (clock),
    .io_wr_en
      (_data_memories_data_in_31_T | word_offset == 32'h7 & _byte_offset_match_T_125
       & (&active_access_width) | word_offset == 32'hF & _byte_offset_match_T_125
       & _half_word_offset_match_T_127 | word_offset == 32'h1F & _byte_offset_match_T_125
       & _byte_offset_match_T_127),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[255:248]
         : io_CPU_request_bits_data[31:24]),
    .io_data_out (_data_memories_31_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_0 (
    .clock       (clock),
    .io_wr_en    (DATA_CACHE_NEXT_STATE == 2'h2),
    .io_addr     ((&DATA_CACHE_STATE) ? 6'h0 : backend_set),
    .io_data_in  (21'h0),
    .io_data_out (_tag_memories_0_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_1 (
    .clock       (clock),
    .io_wr_en    (1'h0),
    .io_addr     (6'h0),
    .io_data_in  (21'h0),
    .io_data_out (_tag_memories_1_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_2 (
    .clock       (clock),
    .io_wr_en    (1'h0),
    .io_addr     (6'h0),
    .io_data_in  (21'h0),
    .io_data_out (_tag_memories_2_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_3 (
    .clock       (clock),
    .io_wr_en    (1'h0),
    .io_addr     (6'h0),
    .io_data_in  (21'h0),
    .io_data_out (_tag_memories_3_io_data_out)
  );
  assign m_axi_awvalid = m_axi_awvalid_0;
  assign m_axi_awid = 8'h0;
  assign m_axi_awaddr =
    write_request_valid ? _AXI_request_Q_io_deq_bits_write_address : 32'h0;
  assign m_axi_awlen = m_axi_awlen_0;
  assign m_axi_awsize = write_request_valid ? 3'h5 : 3'h0;
  assign m_axi_awburst = {1'h0, write_request_valid};
  assign m_axi_awlock = 1'h0;
  assign m_axi_awcache = 4'h0;
  assign m_axi_awprot = 3'h0;
  assign m_axi_awqos = 4'h0;
  assign m_axi_awregion = 4'h0;
  assign m_axi_awuser = 1'h0;
  assign m_axi_wvalid = m_axi_wvalid_0;
  assign m_axi_wdata = m_axi_wvalid_0 ? AXI_AW_DATA_BUFFER[31:0] : 32'h0;
  assign m_axi_wstrb = {4{m_axi_wvalid_0}};
  assign m_axi_wlast = m_axi_wlast_0;
  assign m_axi_wuser = 1'h0;
  assign m_axi_bready = &AXI_REQUEST_STATE;
  assign m_axi_arvalid = m_axi_arvalid_0;
  assign m_axi_arid = 8'h0;
  assign m_axi_araddr =
    read_request_valid ? _AXI_request_Q_io_deq_bits_read_address : 32'h0;
  assign m_axi_arlen =
    read_request_valid
      ? {1'h0,
         _AXI_request_Q_io_deq_bits_read_bytes < 7'h4
           ? 7'h0
           : _AXI_request_Q_io_deq_bits_read_bytes / 7'h4 - 7'h1}
      : 8'h0;
  assign m_axi_arsize = {1'h0, read_request_valid, 1'h0};
  assign m_axi_arburst = {1'h0, read_request_valid};
  assign m_axi_arlock = 1'h0;
  assign m_axi_arcache = 4'h0;
  assign m_axi_arprot = 3'h0;
  assign m_axi_arqos = 4'h0;
  assign m_axi_arregion = 4'h0;
  assign m_axi_aruser = 1'h0;
  assign m_axi_rready = m_axi_rready_0;
  assign io_CPU_request_ready = 1'h1;
  assign io_CPU_response_valid = output_valid_r_1;
  assign io_CPU_response_bits_data = 32'h0;
  assign io_CPU_response_bits_MOB_index = hit_MOB_index_REG;
endmodule

