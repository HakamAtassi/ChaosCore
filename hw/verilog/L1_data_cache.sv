// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module L1_data_cache(
  input                                                                                                                                                                                                                                    clock,
                                                                                                                                                                                                                                           reset,
                                                                                                                                                                                                                                           AXI_port_AXI_AW_ready,
  output                                                                                                                                                                                                                                   AXI_port_AXI_AW_valid,
  output struct packed {logic [7:0] awid; logic [31:0] awaddr; logic [7:0] awlen; logic [2:0] awsize; logic [1:0] awburst; logic awlock; logic [3:0] awcache; logic [2:0] awprot; logic [3:0] awqos; logic [3:0] awregion; logic awuser; } AXI_port_AXI_AW_bits,
  input                                                                                                                                                                                                                                    AXI_port_AXI_W_ready,
  output                                                                                                                                                                                                                                   AXI_port_AXI_W_valid,
  output struct packed {logic [31:0] wdata; logic [3:0] wstrb; logic wlast; logic wuser; }                                                                                                                                                 AXI_port_AXI_W_bits,
  output                                                                                                                                                                                                                                   AXI_port_AXI_B_ready,
  input                                                                                                                                                                                                                                    AXI_port_AXI_B_valid,
  input  struct packed {logic [7:0] bid; logic [1:0] bresp; logic buser; }                                                                                                                                                                 AXI_port_AXI_B_bits,
  input                                                                                                                                                                                                                                    AXI_port_AXI_AR_ready,
  output                                                                                                                                                                                                                                   AXI_port_AXI_AR_valid,
  output struct packed {logic [7:0] arid; logic [31:0] araddr; logic [7:0] arlen; logic [2:0] arsize; logic [1:0] arburst; logic arlock; logic [3:0] arcache; logic [2:0] arprot; logic [3:0] arqos; logic [3:0] arregion; logic aruser; } AXI_port_AXI_AR_bits,
  output                                                                                                                                                                                                                                   AXI_port_AXI_R_ready,
  input                                                                                                                                                                                                                                    AXI_port_AXI_R_valid,
  input  struct packed {logic [7:0] rid; logic [31:0] rdata; logic [1:0] rresp; logic rlast; logic ruser; }                                                                                                                                AXI_port_AXI_R_bits,
  output                                                                                                                                                                                                                                   io_backend_memory_request_ready,
  input                                                                                                                                                                                                                                    io_backend_memory_request_valid,
  input  struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }                                                                                                  io_backend_memory_request_bits,
  input                                                                                                                                                                                                                                    io_backend_memory_response_ready,
  output                                                                                                                                                                                                                                   io_backend_memory_response_valid,
  output struct packed {logic [31:0] data; logic [3:0] MOB_index; }                                                                                                                                                                        io_backend_memory_response_bits
);

  wire [31:0]      data_memories_wr_en;
  wire [1:0]       replay_access_width;
  wire [1:0]       replay_memory_type;
  wire [5:0]       replay_set;
  wire [31:0]      replay_address;
  wire [1:0]       DATA_CACHE_NEXT_STATE;
  wire [4:0]       allocate_tag;
  wire [1:0]       allocate_way;
  wire             _tag_hit_OH_1_T;
  wire             _tag_hit_OH_0_T;
  wire [255:0]     data_way;
  wire [1:0]       _GEN;
  wire [2:0]       _GEN_0;
  wire [7:0]       _GEN_1;
  wire [31:0]      _GEN_2;
  wire [1:0]       _GEN_3;
  wire [2:0]       _GEN_4;
  wire [7:0]       _GEN_5;
  wire [31:0]      _GEN_6;
  wire [5:0]       backend_set;
  wire             _GEN_7;
  wire [3:0]       _GEN_8;
  wire [31:0]      _GEN_9;
  wire [20:0]      _tag_memories_3_io_data_out;
  wire [20:0]      _tag_memories_2_io_data_out;
  wire [20:0]      _tag_memories_1_io_data_out;
  wire [20:0]      _tag_memories_0_io_data_out;
  wire [7:0]       _data_memories_31_io_data_out;
  wire [7:0]       _data_memories_30_io_data_out;
  wire [7:0]       _data_memories_29_io_data_out;
  wire [7:0]       _data_memories_28_io_data_out;
  wire [7:0]       _data_memories_27_io_data_out;
  wire [7:0]       _data_memories_26_io_data_out;
  wire [7:0]       _data_memories_25_io_data_out;
  wire [7:0]       _data_memories_24_io_data_out;
  wire [7:0]       _data_memories_23_io_data_out;
  wire [7:0]       _data_memories_22_io_data_out;
  wire [7:0]       _data_memories_21_io_data_out;
  wire [7:0]       _data_memories_20_io_data_out;
  wire [7:0]       _data_memories_19_io_data_out;
  wire [7:0]       _data_memories_18_io_data_out;
  wire [7:0]       _data_memories_17_io_data_out;
  wire [7:0]       _data_memories_16_io_data_out;
  wire [7:0]       _data_memories_15_io_data_out;
  wire [7:0]       _data_memories_14_io_data_out;
  wire [7:0]       _data_memories_13_io_data_out;
  wire [7:0]       _data_memories_12_io_data_out;
  wire [7:0]       _data_memories_11_io_data_out;
  wire [7:0]       _data_memories_10_io_data_out;
  wire [7:0]       _data_memories_9_io_data_out;
  wire [7:0]       _data_memories_8_io_data_out;
  wire [7:0]       _data_memories_7_io_data_out;
  wire [7:0]       _data_memories_6_io_data_out;
  wire [7:0]       _data_memories_5_io_data_out;
  wire [7:0]       _data_memories_4_io_data_out;
  wire [7:0]       _data_memories_3_io_data_out;
  wire [7:0]       _data_memories_2_io_data_out;
  wire [7:0]       _data_memories_1_io_data_out;
  wire [7:0]       _data_memories_0_io_data_out;
  wire             _non_cacheable_response_Q_io_deq_valid;
  wire [31:0]      _non_cacheable_response_Q_io_deq_bits;
  wire             _cacheable_response_Q_io_deq_valid;
  wire [255:0]     _cacheable_response_Q_io_deq_bits;
  wire             _AXI_request_Q_io_deq_valid;
  wire
    struct packed {logic write_valid; logic [31:0] write_address; logic [255:0] write_data; logic [6:0] write_bytes; logic read_valid; logic [31:0] read_address; logic [6:0] read_bytes; }
    _AXI_request_Q_io_deq_bits;
  wire             _final_response_buffer_io_deq_valid;
  wire [255:0]     _final_response_buffer_io_deq_bits;
  reg  [255:0]     AXI_AW_DATA_BUFFER;
  reg  [1:0]       AXI_REQUEST_STATE;
  wire             _GEN_10 = AXI_REQUEST_STATE == 2'h1;
  wire             _GEN_11 = AXI_REQUEST_STATE == 2'h2;
  wire             _GEN_12 = _GEN_11 & AXI_port_AXI_R_valid;
  reg  [31:0]      write_counter;
  assign _GEN_9 = _GEN_10 ? AXI_AW_DATA_BUFFER[31:0] : 32'h0;
  assign _GEN_8 = {4{_GEN_10}};
  assign _GEN_7 = _GEN_10 & write_counter == 32'h0;
  reg  [255:0]     AXI_read_buffer;
  wire             _GEN_13 = _GEN_12 & AXI_port_AXI_R_bits.rlast;
  wire [255:0]     _GEN_14 = {AXI_read_buffer[223:0], AXI_port_AXI_R_bits.rdata};
  reg  [1:0]       DATA_CACHE_STATE;
  wire [31:0]      active_address =
    (&DATA_CACHE_STATE) ? replay_address : io_backend_memory_request_bits.addr;
  wire [5:0]       active_set = (&DATA_CACHE_STATE) ? replay_set : backend_set;
  wire [1:0]       active_access_width =
    (&DATA_CACHE_STATE)
      ? replay_access_width
      : io_backend_memory_request_bits.access_width;
  reg              valid_hit_REG;
  reg              valid_miss_REG;
  wire             _byte_offset_match_T_125 =
    ((&DATA_CACHE_STATE)
       ? replay_memory_type
       : io_backend_memory_request_bits.memory_type) == 2'h2;
  reg              valid_write_hit_REG;
  reg  [5:0]       hit_set_REG;
  reg  [3:0]       hit_MOB_index_REG;
  reg  [31:0]      miss_address_REG;
  reg  [5:0]       miss_set_REG;
  wire [1:0]       _miss_way_T_1 = ~{_tag_hit_OH_1_T, _tag_hit_OH_0_T};
  assign backend_set = io_backend_memory_request_bits.addr[10:5];
  wire [31:0]      word_offset = io_backend_memory_request_bits.addr / 32'h4;
  wire             request_non_cacheable_read =
    io_backend_memory_request_bits.memory_type == 2'h1
    & io_backend_memory_request_bits.addr[0];
  wire             request_non_cacheable_write =
    io_backend_memory_request_bits.memory_type == 2'h2
    & io_backend_memory_request_bits.addr[0];
  reg  [31:0]      AXI_request_Q_io_enq_bits_write_data_REG;
  wire [6:0]       _GEN_15 =
    {1'h0,
     request_non_cacheable_write
       ? {4'h0,
          (&io_backend_memory_request_bits.access_width)
            ? 2'h0
            : io_backend_memory_request_bits.access_width == 2'h2 ? 2'h2 : 2'h1}
       : 6'h20};
  reg  [31:0]      AXI_request_Q_io_enq_bits_read_address_r;
  reg  [31:0]      AXI_request_Q_io_enq_bits_read_address_r_1;
  wire             write_request_valid =
    _AXI_request_Q_io_deq_valid & _AXI_request_Q_io_deq_bits.write_valid;
  wire             read_request_valid =
    _AXI_request_Q_io_deq_valid & _AXI_request_Q_io_deq_bits.read_valid;
  wire             _GEN_16 = write_request_valid & ~(|AXI_REQUEST_STATE);
  assign _GEN_6 = write_request_valid ? _AXI_request_Q_io_deq_bits.write_address : 32'h0;
  assign _GEN_5 =
    write_request_valid
      ? {1'h0,
         _AXI_request_Q_io_deq_bits.read_bytes < 7'h4
           ? 7'h0
           : _AXI_request_Q_io_deq_bits.read_bytes / 7'h4 - 7'h1}
      : 8'h0;
  assign _GEN_4 = write_request_valid ? 3'h5 : 3'h0;
  assign _GEN_3 = {1'h0, write_request_valid};
  wire             _GEN_17 = read_request_valid & ~(|AXI_REQUEST_STATE);
  assign _GEN_2 = read_request_valid ? _AXI_request_Q_io_deq_bits.read_address : 32'h0;
  assign _GEN_1 =
    read_request_valid
      ? {1'h0,
         _AXI_request_Q_io_deq_bits.read_bytes < 7'h4
           ? 7'h0
           : _AXI_request_Q_io_deq_bits.read_bytes / 7'h4 - 7'h1}
      : 8'h0;
  assign _GEN_0 = read_request_valid ? 3'h5 : 3'h0;
  assign _GEN = {1'h0, read_request_valid};
  wire             _half_word_offset_match_T_127 = active_access_width == 2'h2;
  wire             _byte_offset_match_T_127 = active_access_width == 2'h1;
  wire             _data_memories_data_in_31_T = DATA_CACHE_STATE == 2'h2;
  assign data_way =
    {_data_memories_31_io_data_out,
     _data_memories_30_io_data_out,
     _data_memories_29_io_data_out,
     _data_memories_28_io_data_out,
     _data_memories_27_io_data_out,
     _data_memories_26_io_data_out,
     _data_memories_25_io_data_out,
     _data_memories_24_io_data_out,
     _data_memories_23_io_data_out,
     _data_memories_22_io_data_out,
     _data_memories_21_io_data_out,
     _data_memories_20_io_data_out,
     _data_memories_19_io_data_out,
     _data_memories_18_io_data_out,
     _data_memories_17_io_data_out,
     _data_memories_16_io_data_out,
     _data_memories_15_io_data_out,
     _data_memories_14_io_data_out,
     _data_memories_13_io_data_out,
     _data_memories_12_io_data_out,
     _data_memories_11_io_data_out,
     _data_memories_10_io_data_out,
     _data_memories_9_io_data_out,
     _data_memories_8_io_data_out,
     _data_memories_7_io_data_out,
     _data_memories_6_io_data_out,
     _data_memories_5_io_data_out,
     _data_memories_4_io_data_out,
     _data_memories_3_io_data_out,
     _data_memories_2_io_data_out,
     _data_memories_1_io_data_out,
     _data_memories_0_io_data_out};
  reg  [4:0]       tag_hit_OH_0_REG;
  assign _tag_hit_OH_0_T = _tag_memories_0_io_data_out == {16'h0, tag_hit_OH_0_REG};
  reg  [4:0]       tag_hit_OH_1_REG;
  assign _tag_hit_OH_1_T = _tag_memories_1_io_data_out == {16'h0, tag_hit_OH_1_REG};
  reg  [4:0]       tag_hit_OH_2_REG;
  wire             _tag_hit_OH_2_T =
    _tag_memories_2_io_data_out == {16'h0, tag_hit_OH_2_REG};
  reg  [4:0]       tag_hit_OH_3_REG;
  wire             _tag_hit_OH_3_T =
    _tag_memories_3_io_data_out == {16'h0, tag_hit_OH_3_REG};
  wire             _GEN_18 = allocate_way == 2'h0;
  wire [20:0]      _GEN_19 = {16'h0, allocate_tag};
  wire             _GEN_20 = allocate_way == 2'h1;
  wire             _GEN_21 = allocate_way == 2'h2;
  wire [3:0][20:0] _writeback_tag_WIRE =
    {{_tag_memories_3_io_data_out},
     {_tag_memories_2_io_data_out},
     {_tag_memories_1_io_data_out},
     {_tag_memories_0_io_data_out}};
  struct packed {logic [31:0] address; struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }[7:0] miss_request; logic [1:0] allocate_way; logic [2:0] front_pointer; logic [1:0] back_pointer; }[3:0]
    MSHRs;
  reg  [2:0]       MSHR_front_pointer;
  wire
    struct packed {logic [31:0] address; struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }[7:0] miss_request; logic [1:0] allocate_way; logic [2:0] front_pointer; logic [1:0] back_pointer; }
    _GEN_22 = MSHRs[MSHR_front_pointer[1:0]];
  wire             _GEN_23 = _GEN_22.front_pointer == {1'h0, _GEN_22.back_pointer};
  assign allocate_way = _GEN_22.allocate_way;
  assign allocate_tag = _GEN_22.address[15:11];
  wire [3:0][1:0]  _GEN_24 =
    {{(&DATA_CACHE_STATE) & (&DATA_CACHE_STATE) & _GEN_23 ? 2'h0 : DATA_CACHE_STATE},
     {2'h3},
     {DATA_CACHE_STATE},
     {_non_cacheable_response_Q_io_deq_valid | ~_cacheable_response_Q_io_deq_valid
        ? DATA_CACHE_STATE
        : 2'h2}};
  assign DATA_CACHE_NEXT_STATE = _GEN_24[DATA_CACHE_STATE];
  wire
    struct packed {logic [31:0] addr; logic [31:0] data; logic [1:0] memory_type; logic [1:0] access_width; logic [3:0] MOB_index; }
    _GEN_25 = _GEN_22.miss_request[_GEN_22.front_pointer];
  assign replay_address = _GEN_25.addr;
  assign replay_set = replay_address[10:5];
  assign replay_memory_type = _GEN_25.memory_type;
  assign replay_access_width = _GEN_25.access_width;
  wire             _GEN_26 =
    _data_memories_data_in_31_T & _non_cacheable_response_Q_io_deq_valid;
  reg              output_valid_r;
  reg              output_valid_r_1;
  wire [31:0]      _GEN_27 =
    {{_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125},
     {_byte_offset_match_T_125}};
  assign data_memories_wr_en =
    {{_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T},
     {_data_memories_data_in_31_T}}
    | {{word_offset == 32'h7},
       {word_offset == 32'h7},
       {word_offset == 32'h7},
       {word_offset == 32'h7},
       {word_offset == 32'h6},
       {word_offset == 32'h6},
       {word_offset == 32'h6},
       {word_offset == 32'h6},
       {word_offset == 32'h5},
       {word_offset == 32'h5},
       {word_offset == 32'h5},
       {word_offset == 32'h5},
       {word_offset == 32'h4},
       {word_offset == 32'h4},
       {word_offset == 32'h4},
       {word_offset == 32'h4},
       {word_offset == 32'h3},
       {word_offset == 32'h3},
       {word_offset == 32'h3},
       {word_offset == 32'h3},
       {word_offset == 32'h2},
       {word_offset == 32'h2},
       {word_offset == 32'h2},
       {word_offset == 32'h2},
       {word_offset == 32'h1},
       {word_offset == 32'h1},
       {word_offset == 32'h1},
       {word_offset == 32'h1},
       {~(|word_offset)},
       {~(|word_offset)},
       {~(|word_offset)},
       {~(|word_offset)}} & _GEN_27
    & {{&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width},
       {&active_access_width}}
    | {{word_offset == 32'hF},
       {word_offset == 32'hF},
       {word_offset == 32'hE},
       {word_offset == 32'hE},
       {word_offset == 32'hD},
       {word_offset == 32'hD},
       {word_offset == 32'hC},
       {word_offset == 32'hC},
       {word_offset == 32'hB},
       {word_offset == 32'hB},
       {word_offset == 32'hA},
       {word_offset == 32'hA},
       {word_offset == 32'h9},
       {word_offset == 32'h9},
       {word_offset == 32'h8},
       {word_offset == 32'h8},
       {word_offset == 32'h7},
       {word_offset == 32'h7},
       {word_offset == 32'h6},
       {word_offset == 32'h6},
       {word_offset == 32'h5},
       {word_offset == 32'h5},
       {word_offset == 32'h4},
       {word_offset == 32'h4},
       {word_offset == 32'h3},
       {word_offset == 32'h3},
       {word_offset == 32'h2},
       {word_offset == 32'h2},
       {word_offset == 32'h1},
       {word_offset == 32'h1},
       {~(|word_offset)},
       {~(|word_offset)}} & _GEN_27
    & {{_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127},
       {_half_word_offset_match_T_127}}
    | {{word_offset == 32'h1F},
       {word_offset == 32'h1E},
       {word_offset == 32'h1D},
       {word_offset == 32'h1C},
       {word_offset == 32'h1B},
       {word_offset == 32'h1A},
       {word_offset == 32'h19},
       {word_offset == 32'h18},
       {word_offset == 32'h17},
       {word_offset == 32'h16},
       {word_offset == 32'h15},
       {word_offset == 32'h14},
       {word_offset == 32'h13},
       {word_offset == 32'h12},
       {word_offset == 32'h11},
       {word_offset == 32'h10},
       {word_offset == 32'hF},
       {word_offset == 32'hE},
       {word_offset == 32'hD},
       {word_offset == 32'hC},
       {word_offset == 32'hB},
       {word_offset == 32'hA},
       {word_offset == 32'h9},
       {word_offset == 32'h8},
       {word_offset == 32'h7},
       {word_offset == 32'h6},
       {word_offset == 32'h5},
       {word_offset == 32'h4},
       {word_offset == 32'h3},
       {word_offset == 32'h2},
       {word_offset == 32'h1},
       {~(|word_offset)}} & _GEN_27
    & {{_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127},
       {_byte_offset_match_T_127}};
  wire
    struct packed {logic write_valid; logic [31:0] write_address; logic [255:0] write_data; logic [6:0] write_bytes; logic read_valid; logic [31:0] read_address; logic [6:0] read_bytes; }
    _GEN_28 =
    '{write_valid: request_non_cacheable_write,
      write_address:
        {6'h0,
         _writeback_tag_WIRE[_miss_way_T_1[0] ? 2'h1 : {_miss_way_T_1[1], 1'h0}],
         5'h0},
      write_data:
        (request_non_cacheable_write
           ? {224'h0, AXI_request_Q_io_enq_bits_write_data_REG}
           : data_way),
      write_bytes: _GEN_15,
      read_valid: request_non_cacheable_read,
      read_address: AXI_request_Q_io_enq_bits_read_address_r_1,
      read_bytes: _GEN_15};
  always @(posedge clock) begin
    automatic logic       _GEN_29;
    automatic logic       _GEN_30;
    automatic logic       _GEN_31;
    automatic logic [4:0] active_tag =
      (&DATA_CACHE_STATE)
        ? replay_address[15:11]
        : io_backend_memory_request_bits.addr[15:11];
    automatic logic       _valid_miss_T = _tag_hit_OH_0_T | _tag_hit_OH_1_T;
    _GEN_29 = AXI_port_AXI_AW_ready & _GEN_16;
    _GEN_30 = AXI_port_AXI_W_ready & _GEN_10;
    _GEN_31 = _GEN_10 & _GEN_30;
    if (write_request_valid & _GEN_29)
      AXI_AW_DATA_BUFFER <= _AXI_request_Q_io_deq_bits.write_data;
    else if (_GEN_31)
      AXI_AW_DATA_BUFFER <= {32'h0, AXI_AW_DATA_BUFFER[255:32]};
    if (~_GEN_11 | _GEN_13 | ~_GEN_12) begin
    end
    else
      AXI_read_buffer <= _GEN_14;
    valid_hit_REG <= io_backend_memory_request_valid;
    valid_miss_REG <= io_backend_memory_request_valid;
    valid_write_hit_REG <= _byte_offset_match_T_125;
    hit_set_REG <= active_set;
    hit_MOB_index_REG <= io_backend_memory_request_bits.MOB_index;
    miss_address_REG <= active_address;
    miss_set_REG <= active_set;
    AXI_request_Q_io_enq_bits_write_data_REG <= io_backend_memory_request_bits.data;
    AXI_request_Q_io_enq_bits_read_address_r <= io_backend_memory_request_bits.addr;
    AXI_request_Q_io_enq_bits_read_address_r_1 <=
      AXI_request_Q_io_enq_bits_read_address_r;
    tag_hit_OH_0_REG <= active_tag;
    tag_hit_OH_1_REG <= active_tag;
    tag_hit_OH_2_REG <= active_tag;
    tag_hit_OH_3_REG <= active_tag;
    MSHRs[2'h3] <=
      '{address: MSHRs[2'h3].address,
        miss_request: MSHRs[2'h3].miss_request,
        allocate_way: MSHRs[2'h3].allocate_way,
        front_pointer: MSHRs[2'h3].front_pointer,
        back_pointer:
          (~(_valid_miss_T | _tag_hit_OH_2_T | _tag_hit_OH_3_T) & valid_miss_REG
           & (MSHRs[2'h3].address == miss_address_REG
              | MSHRs[2'h2].address == miss_address_REG
              | MSHRs[2'h1].address == miss_address_REG
              | MSHRs[2'h0].address == miss_address_REG)
             ? MSHRs[2'h3].back_pointer + 2'h1
             : MSHRs[2'h3].back_pointer)};
    output_valid_r <= (_valid_miss_T | _tag_hit_OH_2_T | _tag_hit_OH_3_T) & valid_hit_REG;
    output_valid_r_1 <= output_valid_r;
    if (reset) begin
      AXI_REQUEST_STATE <= 2'h0;
      write_counter <= 32'h0;
      DATA_CACHE_STATE <= 2'h0;
      MSHR_front_pointer <= 3'h0;
    end
    else begin
      if (|AXI_REQUEST_STATE) begin
        if (_GEN_10) begin
          if (_GEN_7 & _GEN_30)
            AXI_REQUEST_STATE <= 2'h3;
        end
        else if ((&AXI_REQUEST_STATE)
                   ? (&AXI_REQUEST_STATE) & AXI_port_AXI_B_valid
                   : _GEN_11 & AXI_port_AXI_R_bits.rlast & _GEN_12)
          AXI_REQUEST_STATE <= 2'h0;
      end
      else if (_GEN_29)
        AXI_REQUEST_STATE <= 2'h1;
      else
        AXI_REQUEST_STATE <= {AXI_port_AXI_AR_ready & _GEN_17, 1'h0};
      if (_GEN_31)
        write_counter <= write_counter - 32'h1;
      else if (~(|AXI_REQUEST_STATE) & _GEN_29)
        write_counter <= {24'h0, _GEN_5};
      DATA_CACHE_STATE <= DATA_CACHE_NEXT_STATE;
      if ((&DATA_CACHE_STATE) & _GEN_23)
        MSHR_front_pointer <= MSHR_front_pointer + 3'h1;
    end
  end // always @(posedge)
  Queue1_UInt256 final_response_buffer (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (_GEN_11 & _GEN_13),
    .io_enq_bits  (_GEN_14),
    .io_deq_ready (1'h1),
    .io_deq_valid (_final_response_buffer_io_deq_valid),
    .io_deq_bits  (_final_response_buffer_io_deq_bits),
    .io_count     (/* unused */)
  );
  Queue4_AXI_request_Q_entry AXI_request_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (request_non_cacheable_read | request_non_cacheable_write),
    .io_enq_bits  (_GEN_28),
    .io_deq_valid (_AXI_request_Q_io_deq_valid),
    .io_deq_bits  (_AXI_request_Q_io_deq_bits),
    .io_count     (/* unused */)
  );
  Queue1_UInt256_2 cacheable_response_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (_final_response_buffer_io_deq_valid),
    .io_enq_bits  (_final_response_buffer_io_deq_bits),
    .io_deq_valid (_cacheable_response_Q_io_deq_valid),
    .io_deq_bits  (_cacheable_response_Q_io_deq_bits),
    .io_count     (/* unused */)
  );
  Queue1_UInt32 non_cacheable_response_Q (
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (/* unused */),
    .io_enq_valid (1'h0),
    .io_enq_bits  (_final_response_buffer_io_deq_bits[31:0]),
    .io_deq_ready (_GEN_26),
    .io_deq_valid (_non_cacheable_response_Q_io_deq_valid),
    .io_deq_bits  (_non_cacheable_response_Q_io_deq_bits),
    .io_count     (/* unused */)
  );
  ReadWriteSmem data_memories_0 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h0]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[7:0]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_0_io_data_out)
  );
  ReadWriteSmem data_memories_1 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[15:8]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_1_io_data_out)
  );
  ReadWriteSmem data_memories_2 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h2]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[23:16]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_2_io_data_out)
  );
  ReadWriteSmem data_memories_3 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h3]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[31:24]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_3_io_data_out)
  );
  ReadWriteSmem data_memories_4 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h4]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[39:32]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_4_io_data_out)
  );
  ReadWriteSmem data_memories_5 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h5]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[47:40]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_5_io_data_out)
  );
  ReadWriteSmem data_memories_6 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h6]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[55:48]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_6_io_data_out)
  );
  ReadWriteSmem data_memories_7 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h7]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[63:56]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_7_io_data_out)
  );
  ReadWriteSmem data_memories_8 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h8]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[71:64]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_8_io_data_out)
  );
  ReadWriteSmem data_memories_9 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h9]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[79:72]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_9_io_data_out)
  );
  ReadWriteSmem data_memories_10 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hA]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[87:80]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_10_io_data_out)
  );
  ReadWriteSmem data_memories_11 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hB]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[95:88]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_11_io_data_out)
  );
  ReadWriteSmem data_memories_12 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hC]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[103:96]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_12_io_data_out)
  );
  ReadWriteSmem data_memories_13 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hD]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[111:104]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_13_io_data_out)
  );
  ReadWriteSmem data_memories_14 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hE]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[119:112]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_14_io_data_out)
  );
  ReadWriteSmem data_memories_15 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'hF]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[127:120]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_15_io_data_out)
  );
  ReadWriteSmem data_memories_16 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h10]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[135:128]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_16_io_data_out)
  );
  ReadWriteSmem data_memories_17 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h11]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[143:136]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_17_io_data_out)
  );
  ReadWriteSmem data_memories_18 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h12]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[151:144]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_18_io_data_out)
  );
  ReadWriteSmem data_memories_19 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h13]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[159:152]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_19_io_data_out)
  );
  ReadWriteSmem data_memories_20 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h14]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[167:160]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_20_io_data_out)
  );
  ReadWriteSmem data_memories_21 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h15]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[175:168]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_21_io_data_out)
  );
  ReadWriteSmem data_memories_22 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h16]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[183:176]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_22_io_data_out)
  );
  ReadWriteSmem data_memories_23 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h17]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[191:184]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_23_io_data_out)
  );
  ReadWriteSmem data_memories_24 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h18]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[199:192]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_24_io_data_out)
  );
  ReadWriteSmem data_memories_25 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h19]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[207:200]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_25_io_data_out)
  );
  ReadWriteSmem data_memories_26 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1A]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[215:208]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_26_io_data_out)
  );
  ReadWriteSmem data_memories_27 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1B]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[223:216]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_27_io_data_out)
  );
  ReadWriteSmem data_memories_28 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1C]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[231:224]
         : io_backend_memory_request_bits.data[7:0]),
    .io_data_out (_data_memories_28_io_data_out)
  );
  ReadWriteSmem data_memories_29 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1D]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[239:232]
         : io_backend_memory_request_bits.data[15:8]),
    .io_data_out (_data_memories_29_io_data_out)
  );
  ReadWriteSmem data_memories_30 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1E]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[247:240]
         : io_backend_memory_request_bits.data[23:16]),
    .io_data_out (_data_memories_30_io_data_out)
  );
  ReadWriteSmem data_memories_31 (
    .clock       (clock),
    .io_wr_en    (data_memories_wr_en[5'h1F]),
    .io_addr     (active_address[7:0]),
    .io_data_in
      (_data_memories_data_in_31_T
         ? _cacheable_response_Q_io_deq_bits[255:248]
         : io_backend_memory_request_bits.data[31:24]),
    .io_data_out (_data_memories_31_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_0 (
    .clock       (clock),
    .io_wr_en    (_GEN_18 & DATA_CACHE_NEXT_STATE == 2'h2),
    .io_addr     (_GEN_18 ? active_set : 6'h0),
    .io_data_in  (_GEN_18 ? _GEN_19 : 21'h0),
    .io_data_out (_tag_memories_0_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_1 (
    .clock       (clock),
    .io_wr_en    (_GEN_20 & DATA_CACHE_NEXT_STATE == 2'h2),
    .io_addr     (_GEN_20 ? active_set : 6'h0),
    .io_data_in  (_GEN_20 ? _GEN_19 : 21'h0),
    .io_data_out (_tag_memories_1_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_2 (
    .clock       (clock),
    .io_wr_en    (_GEN_21 & DATA_CACHE_NEXT_STATE == 2'h2),
    .io_addr     (_GEN_21 ? active_set : 6'h0),
    .io_data_in  (_GEN_21 ? _GEN_19 : 21'h0),
    .io_data_out (_tag_memories_2_io_data_out)
  );
  ReadWriteSmem_32 tag_memories_3 (
    .clock       (clock),
    .io_wr_en    ((&allocate_way) & DATA_CACHE_NEXT_STATE == 2'h2),
    .io_addr     ((&allocate_way) ? active_set : 6'h0),
    .io_data_in  ((&allocate_way) ? _GEN_19 : 21'h0),
    .io_data_out (_tag_memories_3_io_data_out)
  );
  assign AXI_port_AXI_AW_valid = _GEN_16;
  assign AXI_port_AXI_AW_bits =
    '{awid: (8'h0),
      awaddr: _GEN_6,
      awlen: _GEN_5,
      awsize: _GEN_4,
      awburst: _GEN_3,
      awlock: (1'h0),
      awcache: (4'h0),
      awprot: (3'h0),
      awqos: (4'h0),
      awregion: (4'h0),
      awuser: (1'h0)};
  assign AXI_port_AXI_W_valid = _GEN_10;
  assign AXI_port_AXI_W_bits =
    '{wdata: _GEN_9, wstrb: _GEN_8, wlast: _GEN_7, wuser: (1'h0)};
  assign AXI_port_AXI_B_ready = &AXI_REQUEST_STATE;
  assign AXI_port_AXI_AR_valid = _GEN_17;
  assign AXI_port_AXI_AR_bits =
    '{arid: (8'h0),
      araddr: _GEN_2,
      arlen: _GEN_1,
      arsize: _GEN_0,
      arburst: _GEN,
      arlock: (1'h0),
      arcache: (4'h0),
      arprot: (3'h0),
      arqos: (4'h0),
      arregion: (4'h0),
      aruser: (1'h0)};
  assign AXI_port_AXI_R_ready = _GEN_11;
  assign io_backend_memory_request_ready = 1'h1;
  assign io_backend_memory_response_valid = output_valid_r_1;
  assign io_backend_memory_response_bits =
    '{data: (_GEN_26 ? _non_cacheable_response_Q_io_deq_bits : 32'h0),
      MOB_index: hit_MOB_index_REG};
endmodule

