// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Arbiter2_FU_output(
  output                                                                                                                                                                                                                                                                                                                                                                                                            io_in_0_ready,
  input                                                                                                                                                                                                                                                                                                                                                                                                             io_in_0_valid,
  input  struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } io_in_0_bits,
  output                                                                                                                                                                                                                                                                                                                                                                                                            io_in_1_ready,
  input                                                                                                                                                                                                                                                                                                                                                                                                             io_in_1_valid,
  input  struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } io_in_1_bits,
  input                                                                                                                                                                                                                                                                                                                                                                                                             io_out_ready,
  output                                                                                                                                                                                                                                                                                                                                                                                                            io_out_valid,
  output struct packed {logic [6:0] RD; logic [31:0] RD_data; logic RD_valid; logic [31:0] fetch_PC; logic branch_taken; logic [31:0] target_address; logic branch_valid; logic [31:0] address; logic [1:0] memory_type; logic [1:0] access_width; logic is_unsigned; logic [31:0] wr_data; logic [3:0] MOB_index; logic [5:0] ROB_index; logic [3:0] FTQ_index; logic [1:0] fetch_packet_index; logic exception; } io_out_bits,
  output                                                                                                                                                                                                                                                                                                                                                                                                            io_chosen
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits =
    '{RD: (io_in_0_valid ? io_in_0_bits.RD : io_in_1_bits.RD),
      RD_data: (io_in_0_valid ? io_in_0_bits.RD_data : io_in_1_bits.RD_data),
      RD_valid: (io_in_0_valid ? io_in_0_bits.RD_valid : io_in_1_bits.RD_valid),
      fetch_PC: (io_in_0_valid ? io_in_0_bits.fetch_PC : io_in_1_bits.fetch_PC),
      branch_taken:
        (io_in_0_valid ? io_in_0_bits.branch_taken : io_in_1_bits.branch_taken),
      target_address:
        (io_in_0_valid ? io_in_0_bits.target_address : io_in_1_bits.target_address),
      branch_valid:
        (io_in_0_valid ? io_in_0_bits.branch_valid : io_in_1_bits.branch_valid),
      address: (io_in_0_valid ? io_in_0_bits.address : io_in_1_bits.address),
      memory_type: (io_in_0_valid ? io_in_0_bits.memory_type : io_in_1_bits.memory_type),
      access_width:
        (io_in_0_valid ? io_in_0_bits.access_width : io_in_1_bits.access_width),
      is_unsigned: (io_in_0_valid ? io_in_0_bits.is_unsigned : io_in_1_bits.is_unsigned),
      wr_data: (io_in_0_valid ? io_in_0_bits.wr_data : io_in_1_bits.wr_data),
      MOB_index: (io_in_0_valid ? io_in_0_bits.MOB_index : io_in_1_bits.MOB_index),
      ROB_index: (io_in_0_valid ? io_in_0_bits.ROB_index : io_in_1_bits.ROB_index),
      FTQ_index: (io_in_0_valid ? io_in_0_bits.FTQ_index : io_in_1_bits.FTQ_index),
      fetch_packet_index:
        (io_in_0_valid
           ? io_in_0_bits.fetch_packet_index
           : io_in_1_bits.fetch_packet_index),
      exception: (io_in_0_valid ? io_in_0_bits.exception : io_in_1_bits.exception)};
  assign io_chosen = ~io_in_0_valid;
endmodule

