// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Arbiter2_FU_output(
  output        io_in_0_ready,
  input         io_in_0_valid,
  input  [6:0]  io_in_0_bits_RD,
  input  [31:0] io_in_0_bits_RD_data,
  input         io_in_0_bits_RD_valid,
  input  [31:0] io_in_0_bits_fetch_PC,
  input         io_in_0_bits_branch_taken,
  input  [31:0] io_in_0_bits_target_address,
  input         io_in_0_bits_branch_valid,
  input  [31:0] io_in_0_bits_address,
  input  [1:0]  io_in_0_bits_memory_type,
                io_in_0_bits_access_width,
  input         io_in_0_bits_is_unsigned,
  input  [31:0] io_in_0_bits_wr_data,
  input  [3:0]  io_in_0_bits_MOB_index,
  input  [5:0]  io_in_0_bits_ROB_index,
  input  [3:0]  io_in_0_bits_FTQ_index,
  input  [1:0]  io_in_0_bits_fetch_packet_index,
  input         io_in_0_bits_exception,
                io_in_0_bits_memory_violation,
  output        io_in_1_ready,
  input         io_in_1_valid,
  input  [6:0]  io_in_1_bits_RD,
  input  [31:0] io_in_1_bits_RD_data,
  input         io_in_1_bits_RD_valid,
  input  [31:0] io_in_1_bits_fetch_PC,
  input         io_in_1_bits_branch_taken,
  input  [31:0] io_in_1_bits_target_address,
  input         io_in_1_bits_branch_valid,
  input  [31:0] io_in_1_bits_address,
  input  [1:0]  io_in_1_bits_memory_type,
                io_in_1_bits_access_width,
  input         io_in_1_bits_is_unsigned,
  input  [31:0] io_in_1_bits_wr_data,
  input  [3:0]  io_in_1_bits_MOB_index,
  input  [5:0]  io_in_1_bits_ROB_index,
  input  [3:0]  io_in_1_bits_FTQ_index,
  input  [1:0]  io_in_1_bits_fetch_packet_index,
  input         io_in_1_bits_exception,
                io_in_1_bits_memory_violation,
                io_out_ready,
  output        io_out_valid,
  output [6:0]  io_out_bits_RD,
  output [31:0] io_out_bits_RD_data,
  output        io_out_bits_RD_valid,
  output [31:0] io_out_bits_fetch_PC,
  output        io_out_bits_branch_taken,
  output [31:0] io_out_bits_target_address,
  output        io_out_bits_branch_valid,
  output [31:0] io_out_bits_address,
  output [1:0]  io_out_bits_memory_type,
                io_out_bits_access_width,
  output        io_out_bits_is_unsigned,
  output [31:0] io_out_bits_wr_data,
  output [3:0]  io_out_bits_MOB_index,
  output [5:0]  io_out_bits_ROB_index,
  output [3:0]  io_out_bits_FTQ_index,
  output [1:0]  io_out_bits_fetch_packet_index,
  output        io_out_bits_exception,
                io_out_bits_memory_violation
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_RD = io_in_0_valid ? io_in_0_bits_RD : io_in_1_bits_RD;
  assign io_out_bits_RD_data =
    io_in_0_valid ? io_in_0_bits_RD_data : io_in_1_bits_RD_data;
  assign io_out_bits_RD_valid =
    io_in_0_valid ? io_in_0_bits_RD_valid : io_in_1_bits_RD_valid;
  assign io_out_bits_fetch_PC =
    io_in_0_valid ? io_in_0_bits_fetch_PC : io_in_1_bits_fetch_PC;
  assign io_out_bits_branch_taken =
    io_in_0_valid ? io_in_0_bits_branch_taken : io_in_1_bits_branch_taken;
  assign io_out_bits_target_address =
    io_in_0_valid ? io_in_0_bits_target_address : io_in_1_bits_target_address;
  assign io_out_bits_branch_valid =
    io_in_0_valid ? io_in_0_bits_branch_valid : io_in_1_bits_branch_valid;
  assign io_out_bits_address =
    io_in_0_valid ? io_in_0_bits_address : io_in_1_bits_address;
  assign io_out_bits_memory_type =
    io_in_0_valid ? io_in_0_bits_memory_type : io_in_1_bits_memory_type;
  assign io_out_bits_access_width =
    io_in_0_valid ? io_in_0_bits_access_width : io_in_1_bits_access_width;
  assign io_out_bits_is_unsigned =
    io_in_0_valid ? io_in_0_bits_is_unsigned : io_in_1_bits_is_unsigned;
  assign io_out_bits_wr_data =
    io_in_0_valid ? io_in_0_bits_wr_data : io_in_1_bits_wr_data;
  assign io_out_bits_MOB_index =
    io_in_0_valid ? io_in_0_bits_MOB_index : io_in_1_bits_MOB_index;
  assign io_out_bits_ROB_index =
    io_in_0_valid ? io_in_0_bits_ROB_index : io_in_1_bits_ROB_index;
  assign io_out_bits_FTQ_index =
    io_in_0_valid ? io_in_0_bits_FTQ_index : io_in_1_bits_FTQ_index;
  assign io_out_bits_fetch_packet_index =
    io_in_0_valid ? io_in_0_bits_fetch_packet_index : io_in_1_bits_fetch_packet_index;
  assign io_out_bits_exception =
    io_in_0_valid ? io_in_0_bits_exception : io_in_1_bits_exception;
  assign io_out_bits_memory_violation =
    io_in_0_valid ? io_in_0_bits_memory_violation : io_in_1_bits_memory_violation;
endmodule

