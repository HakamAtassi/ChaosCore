// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module free_list(
  input         clock,
                reset,
                io_rename_valid_0,
                io_rename_valid_1,
                io_rename_valid_2,
                io_rename_valid_3,
  output [6:0]  io_renamed_values_0,
                io_renamed_values_1,
                io_renamed_values_2,
                io_renamed_values_3,
  output        io_renamed_valid_0,
                io_renamed_valid_1,
                io_renamed_valid_2,
                io_renamed_valid_3,
  input         io_commit_valid,
  input  [31:0] io_commit_bits_fetch_PC,
  input         io_commit_bits_T_NT,
  input  [5:0]  io_commit_bits_ROB_index,
  input  [2:0]  io_commit_bits_br_type,
  input  [1:0]  io_commit_bits_fetch_packet_index,
  input         io_commit_bits_is_misprediction,
                io_commit_bits_exception,
  input  [31:0] io_commit_bits_expected_PC,
  input  [15:0] io_commit_bits_GHR,
  input  [6:0]  io_commit_bits_TOS,
                io_commit_bits_NEXT,
  input  [7:0]  io_commit_bits_free_list_front_pointer,
  input  [4:0]  io_commit_bits_RDold_0,
                io_commit_bits_RDold_1,
                io_commit_bits_RDold_2,
                io_commit_bits_RDold_3,
  input  [6:0]  io_commit_bits_RD_0,
                io_commit_bits_RD_1,
                io_commit_bits_RD_2,
                io_commit_bits_RD_3,
  input         io_commit_bits_RD_valid_0,
                io_commit_bits_RD_valid_1,
                io_commit_bits_RD_valid_2,
                io_commit_bits_RD_valid_3,
  output [6:0]  io_free_list_front_pointer,
  output        io_can_reallocate,
                io_can_allocate
);

  wire [4:0]       _available_elemets_6to2;
  wire [63:0][6:0] _GEN =
    '{7'h40,
      7'h3F,
      7'h3E,
      7'h3D,
      7'h3C,
      7'h3B,
      7'h3A,
      7'h39,
      7'h38,
      7'h37,
      7'h36,
      7'h35,
      7'h34,
      7'h33,
      7'h32,
      7'h31,
      7'h30,
      7'h2F,
      7'h2E,
      7'h2D,
      7'h2C,
      7'h2B,
      7'h2A,
      7'h29,
      7'h28,
      7'h27,
      7'h26,
      7'h25,
      7'h24,
      7'h23,
      7'h22,
      7'h21,
      7'h20,
      7'h1F,
      7'h1E,
      7'h1D,
      7'h1C,
      7'h1B,
      7'h1A,
      7'h19,
      7'h18,
      7'h17,
      7'h16,
      7'h15,
      7'h14,
      7'h13,
      7'h12,
      7'h11,
      7'h10,
      7'hF,
      7'hE,
      7'hD,
      7'hC,
      7'hB,
      7'hA,
      7'h9,
      7'h8,
      7'h7,
      7'h6,
      7'h5,
      7'h4,
      7'h3,
      7'h2,
      7'h1};
  wire             flush = io_commit_valid & io_commit_bits_is_misprediction;
  reg  [6:0]       front_pointer;
  reg  [6:0]       back_pointer;
  wire [5:0]       front_index = front_pointer[5:0];
  wire [5:0]       back_index = back_pointer[5:0];
  wire [1:0]       _GEN_0 = {1'h0, io_rename_valid_0};
  wire             valid = io_rename_valid_0 & ~flush & (|_available_elemets_6to2);
  wire [1:0]       _GEN_1 = {1'h0, io_rename_valid_1};
  wire [1:0]       _front_pointer_T_1 = _GEN_0 + _GEN_1;
  wire [2:0]       _GEN_2 = {1'h0, _front_pointer_T_1};
  wire             valid_1 = io_rename_valid_1 & ~flush & (|_available_elemets_6to2);
  wire [1:0]       _GEN_3 = {1'h0, io_rename_valid_2};
  wire             valid_2 = io_rename_valid_2 & ~flush & (|_available_elemets_6to2);
  wire [2:0]       _GEN_4 = {1'h0, _GEN_3 + {1'h0, io_rename_valid_3}};
  wire             valid_3 = io_rename_valid_3 & ~flush & (|_available_elemets_6to2);
  wire             allocate_valid_0 =
    io_commit_bits_RD_valid_0 & (|io_commit_bits_RD_0) & io_commit_valid;
  wire             allocate_valid_1 =
    io_commit_bits_RD_valid_1 & (|io_commit_bits_RD_1) & io_commit_valid;
  wire             allocate_valid_2 =
    io_commit_bits_RD_valid_2 & (|io_commit_bits_RD_2) & io_commit_valid;
  wire             allocate_valid_3 =
    io_commit_bits_RD_valid_3 & (|io_commit_bits_RD_3) & io_commit_valid;
  wire [6:0]       available_elemets = back_pointer - front_pointer;
  wire             io_can_reallocate_0 = available_elemets + 7'h4 < 7'h41;
  assign _available_elemets_6to2 = available_elemets[6:2];
  reg              hasBeenResetReg;
  initial
    hasBeenResetReg = 1'bx;
  wire             hasBeenReset = hasBeenResetReg === 1'h1 & reset === 1'h0;
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   available_elemets < 7'h41);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   available_elemets < 7'h3D == io_can_reallocate_0);
  assert property (@(posedge clock) disable iff (~hasBeenReset)
                   (|(available_elemets[6:2])) == (|_available_elemets_6to2));
  assume property (@(posedge clock) disable iff (~hasBeenReset) ~io_commit_valid);
  always @(posedge clock) begin
    if (reset) begin
      hasBeenResetReg <= 1'h1;
      front_pointer <= 7'h0;
      back_pointer <= 7'h40;
    end
    else begin
      if (~flush & (|_available_elemets_6to2))
        front_pointer <= front_pointer + {4'h0, _GEN_2 + _GEN_4};
      else if (flush)
        front_pointer <= io_commit_bits_free_list_front_pointer[6:0];
      if (io_commit_valid & io_can_reallocate_0 & ~flush)
        back_pointer <=
          back_pointer
          + {4'h0,
             {1'h0, {1'h0, allocate_valid_0} + {1'h0, allocate_valid_1}}
               + {1'h0, {1'h0, allocate_valid_2} + {1'h0, allocate_valid_3}}};
    end
  end // always @(posedge)
  assign io_renamed_values_0 =
    valid ? _GEN[front_index + {5'h0, io_rename_valid_0 - 1'h1}] : 7'h0;
  assign io_renamed_values_1 =
    valid_1 ? _GEN[front_index + {4'h0, _front_pointer_T_1 - 2'h1}] : 7'h0;
  assign io_renamed_values_2 =
    valid_2 ? _GEN[front_index + {4'h0, _GEN_0 + _GEN_1 + _GEN_3 - 2'h1}] : 7'h0;
  assign io_renamed_values_3 =
    valid_3 ? _GEN[front_index + {3'h0, _GEN_2 + _GEN_4 - 3'h1}] : 7'h0;
  assign io_renamed_valid_0 = valid;
  assign io_renamed_valid_1 = valid_1;
  assign io_renamed_valid_2 = valid_2;
  assign io_renamed_valid_3 = valid_3;
  assign io_free_list_front_pointer = front_pointer;
  assign io_can_reallocate = io_can_reallocate_0;
  assign io_can_allocate = |_available_elemets_6to2;
endmodule

