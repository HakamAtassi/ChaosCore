// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module L1_instruction_cache(
  input         clock,
                reset,
                m_axi_wready,
  output        m_axi_wvalid,
  output [31:0] m_axi_wdata,
  output [3:0]  m_axi_wstrb,
  output        m_axi_wlast,
                m_axi_bready,
  input         m_axi_bvalid,
  output        m_axi_arvalid,
  input         m_axi_arready,
  output [31:0] m_axi_araddr,
  output [7:0]  m_axi_arlen,
  output [2:0]  m_axi_arsize,
  output [1:0]  m_axi_arburst,
  output        m_axi_rready,
  input         m_axi_rvalid,
  input  [7:0]  m_axi_rid,
  input  [31:0] m_axi_rdata,
  input         m_axi_rlast,
  output        io_CPU_request_ready,
                io_CPU_response_valid,
  output [31:0] io_CPU_response_bits_fetch_PC,
  output        io_CPU_response_bits_valid_bits_0,
                io_CPU_response_bits_valid_bits_1,
                io_CPU_response_bits_valid_bits_2,
                io_CPU_response_bits_valid_bits_3,
  output [31:0] io_CPU_response_bits_instructions_0_instruction,
  output [3:0]  io_CPU_response_bits_instructions_0_packet_index,
  output [5:0]  io_CPU_response_bits_instructions_0_ROB_index,
  output [31:0] io_CPU_response_bits_instructions_1_instruction,
  output [3:0]  io_CPU_response_bits_instructions_1_packet_index,
  output [5:0]  io_CPU_response_bits_instructions_1_ROB_index,
  output [31:0] io_CPU_response_bits_instructions_2_instruction,
  output [3:0]  io_CPU_response_bits_instructions_2_packet_index,
  output [5:0]  io_CPU_response_bits_instructions_2_ROB_index,
  output [31:0] io_CPU_response_bits_instructions_3_instruction,
  output [3:0]  io_CPU_response_bits_instructions_3_packet_index,
  output [5:0]  io_CPU_response_bits_instructions_3_ROB_index,
  output [15:0] io_CPU_response_bits_GHR,
  output [6:0]  io_CPU_response_bits_NEXT,
                io_CPU_response_bits_TOS
);

  wire             CPU_response_valid;
  wire             miss;
  wire [1:0]       hit_oh;
  wire             _CPU_response_skid_buffer_io_enq_ready;
  wire [3:0]       _validator_io_instruction_output;
  wire             _data_memory_1_io_data_out_valid;
  wire [20:0]      _data_memory_1_io_data_out_tag;
  wire [255:0]     _data_memory_1_io_data_out_data;
  wire             _data_memory_0_io_data_out_valid;
  wire [20:0]      _data_memory_0_io_data_out_tag;
  wire [255:0]     _data_memory_0_io_data_out_data;
  wire [1:0]       _LRU_memory_io_data_out;
  wire             _final_response_buffer_io_deq_valid;
  wire [255:0]     _final_response_buffer_io_deq_bits_data;
  reg  [255:0]     AXI_AW_DATA_BUFFER;
  reg  [1:0]       AXI_REQUEST_STATE;
  wire             m_axi_wvalid_0 = AXI_REQUEST_STATE == 2'h1;
  wire             m_axi_rready_0 = AXI_REQUEST_STATE == 2'h2;
  wire             _GEN = m_axi_rready_0 & m_axi_rvalid;
  reg  [31:0]      write_counter;
  wire             m_axi_wlast_0 = m_axi_wvalid_0 & write_counter == 32'h0;
  reg  [255:0]     AXI_read_buffer;
  wire             _GEN_0 = _GEN & m_axi_rlast;
  wire [255:0]     _GEN_1 = {m_axi_rdata, AXI_read_buffer[255:32]};
  reg  [2:0]       cache_state;
  reg  [31:0]      fetch_PC_buf_addr;
  reg  [31:0]      replay_address_addr;
  reg  [31:0]      replay_address_wr_data;
  reg              replay_address_wr_en;
  reg  [31:0]      request_addr;
  reg              cache_valid;
  wire             _GEN_2 = cache_state == 3'h1;
  wire             m_axi_arvalid_0 =
    (|cache_state) ? _GEN_2 & ~(|AXI_REQUEST_STATE) : miss & ~(|AXI_REQUEST_STATE);
  wire             _GEN_3 = (|cache_state) ? _GEN_2 : miss;
  wire             _GEN_4 = (|cache_state) ? _GEN_2 : miss;
  wire             _GEN_5 = cache_state == 3'h2;
  wire             _GEN_6 = ~(|cache_state) | _GEN_2;
  wire             _GEN_7 = ~_GEN_6 & _GEN_5;
  wire [255:0]     axi_response =
    _GEN_6 | ~_GEN_5 ? 256'h0 : _final_response_buffer_io_deq_bits_data;
  wire             axi_response_valid =
    ~_GEN_6 & _GEN_5 & _GEN_7 & _final_response_buffer_io_deq_valid;
  wire             _current_address_T_1 = (|cache_state) | miss;
  wire [31:0]      current_address_addr =
    _current_address_T_1 ? replay_address_addr : 32'h0;
  wire [31:0]      current_address_wr_data =
    _current_address_T_1 ? replay_address_wr_data : 32'h0;
  wire             current_address_wr_en = _current_address_T_1 & replay_address_wr_en;
  wire [20:0]      current_packet_tag = current_address_addr[31:11];
  wire [5:0]       current_packet_set = current_address_addr[10:5];
  wire             current_packet_fetch_packet = current_address_addr[4];
  wire [2:0]       current_packet_instruction_offset = current_address_addr[4:2];
  reg  [5:0]       LRU_memory_io_wr_addr_REG;
  wire [1:0]       allocate_way =
    _LRU_memory_io_data_out[1] ? {1'h0, ~(_LRU_memory_io_data_out[0])} : 2'h2;
  wire             _data_memory_1_io_wr_en_T_2 = cache_state == 3'h2;
  reg  [20:0]      hit_oh_vec_0_REG;
  wire             hit_oh_vec_0 =
    _data_memory_0_io_data_out_tag == hit_oh_vec_0_REG & _data_memory_0_io_data_out_valid;
  reg  [20:0]      hit_oh_vec_1_REG;
  wire             hit_oh_vec_1 =
    _data_memory_1_io_data_out_tag == hit_oh_vec_1_REG & _data_memory_1_io_data_out_valid;
  assign hit_oh = {hit_oh_vec_1, hit_oh_vec_0};
  wire             replay_valid = cache_state == 3'h3;
  reg              hit_REG_2;
  wire             hit = (|hit_oh) & replay_valid & ~hit_REG_2;
  reg              miss_REG_2;
  assign miss = ~(|hit_oh) & replay_valid & ~miss_REG_2;
  wire [255:0]     hit_instruction_data =
    hit_oh_vec_1
      ? _data_memory_1_io_data_out_data
      : hit_oh_vec_0 ? _data_memory_0_io_data_out_data : 256'h0;
  wire [31:0]      instruction_vec_0 = hit_instruction_data[31:0];
  wire [31:0]      instruction_vec_1 = hit_instruction_data[63:32];
  wire [31:0]      instruction_vec_2 = hit_instruction_data[95:64];
  wire [31:0]      instruction_vec_3 = hit_instruction_data[127:96];
  wire [31:0]      instruction_vec_4 = hit_instruction_data[159:128];
  wire [31:0]      instruction_vec_5 = hit_instruction_data[191:160];
  wire [31:0]      instruction_vec_6 = hit_instruction_data[223:192];
  wire [31:0]      instruction_vec_7 = hit_instruction_data[255:224];
  reg              CPU_response_bits_instructions_0_instruction_REG;
  wire [7:0][31:0] _GEN_8 =
    {{instruction_vec_7},
     {instruction_vec_6},
     {instruction_vec_5},
     {instruction_vec_4},
     {instruction_vec_3},
     {instruction_vec_2},
     {instruction_vec_1},
     {instruction_vec_0}};
  reg              CPU_response_bits_instructions_1_instruction_REG;
  reg              CPU_response_bits_instructions_2_instruction_REG;
  reg              CPU_response_bits_instructions_3_instruction_REG;
  assign CPU_response_valid = cache_valid | hit;
  always @(posedge clock) begin
    automatic logic _GEN_9;
    automatic logic _GEN_10;
    _GEN_9 = m_axi_wready & m_axi_wvalid_0;
    _GEN_10 = m_axi_wvalid_0 & _GEN_9;
    if (_GEN_10)
      AXI_AW_DATA_BUFFER <= {32'h0, AXI_AW_DATA_BUFFER[255:32]};
    if (~m_axi_rready_0 | _GEN_0 | ~_GEN) begin
    end
    else
      AXI_read_buffer <= _GEN_1;
    LRU_memory_io_wr_addr_REG <= current_packet_set;
    hit_oh_vec_0_REG <= current_packet_tag;
    hit_oh_vec_1_REG <= current_packet_tag;
    hit_REG_2 <= reset;
    miss_REG_2 <= reset;
    CPU_response_bits_instructions_0_instruction_REG <= current_packet_fetch_packet;
    CPU_response_bits_instructions_1_instruction_REG <= current_packet_fetch_packet;
    CPU_response_bits_instructions_2_instruction_REG <= current_packet_fetch_packet;
    CPU_response_bits_instructions_3_instruction_REG <= current_packet_fetch_packet;
    if (reset) begin
      AXI_REQUEST_STATE <= 2'h0;
      write_counter <= 32'h0;
      cache_state <= 3'h0;
      fetch_PC_buf_addr <= 32'h0;
      replay_address_addr <= 32'h0;
      replay_address_wr_data <= 32'h0;
      replay_address_wr_en <= 1'h0;
      request_addr <= 32'h0;
      cache_valid <= 1'h0;
    end
    else begin
      automatic logic _GEN_11 = (|cache_state) | miss;
      automatic logic _GEN_12;
      _GEN_12 =
        cache_state == 3'h3 & CPU_response_valid & _CPU_response_skid_buffer_io_enq_ready;
      if (|AXI_REQUEST_STATE) begin
        if (m_axi_wvalid_0) begin
          if (m_axi_wlast_0 & _GEN_9)
            AXI_REQUEST_STATE <= 2'h3;
        end
        else if ((&AXI_REQUEST_STATE)
                   ? (&AXI_REQUEST_STATE) & m_axi_bvalid
                   : m_axi_rready_0 & m_axi_rlast & _GEN)
          AXI_REQUEST_STATE <= 2'h0;
      end
      else
        AXI_REQUEST_STATE <= {m_axi_arready & m_axi_arvalid_0, 1'h0};
      if (_GEN_10)
        write_counter <= write_counter - 32'h1;
      if (|cache_state) begin
        if (_GEN_2) begin
          if (m_axi_arready & m_axi_arvalid_0)
            cache_state <= 3'h2;
        end
        else if (_GEN_5) begin
          if (axi_response_valid)
            cache_state <= 3'h3;
        end
        else if (_GEN_12)
          cache_state <= 3'h0;
      end
      else if (miss) begin
        if (m_axi_arready & m_axi_arvalid_0)
          cache_state <= 3'h2;
        else
          cache_state <= 3'h1;
      end
      if (_GEN_11) begin
      end
      else begin
        fetch_PC_buf_addr <= 32'h0;
        replay_address_addr <= 32'h0;
        replay_address_wr_data <= 32'h0;
      end
      replay_address_wr_en <= _GEN_11 & replay_address_wr_en;
      if (_GEN_11) begin
      end
      else
        request_addr <= 32'h0;
      cache_valid <= (_GEN_6 | _GEN_5 | ~_GEN_12) & cache_valid;
    end
  end // always @(posedge)
  Queue1_final_AXI_response final_response_buffer (
    .clock            (clock),
    .reset            (reset),
    .io_enq_valid     (m_axi_rready_0 & _GEN_0),
    .io_enq_bits_data (_GEN_1),
    .io_enq_bits_ID   (m_axi_rid),
    .io_deq_ready     (_GEN_7),
    .io_deq_valid     (_final_response_buffer_io_deq_valid),
    .io_deq_bits_data (_final_response_buffer_io_deq_bits_data),
    .io_deq_bits_ID   (/* unused */)
  );
  SDPReadWriteSmem_1 LRU_memory (
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr  (current_packet_set),
    .io_data_out (_LRU_memory_io_data_out),
    .io_wr_addr  (LRU_memory_io_wr_addr_REG),
    .io_wr_en    (hit),
    .io_data_in
      ({2{(_LRU_memory_io_data_out | hit_oh) != 2'h3}} & _LRU_memory_io_data_out | hit_oh)
  );
  icache_ReadWriteSmem data_memory_0 (
    .clock             (clock),
    .io_wr_en
      (axi_response_valid & allocate_way[0] & _data_memory_1_io_wr_en_T_2),
    .io_addr           (current_packet_set),
    .io_data_in_tag    (replay_address_addr[31:11]),
    .io_data_in_data   (axi_response),
    .io_data_out_valid (_data_memory_0_io_data_out_valid),
    .io_data_out_tag   (_data_memory_0_io_data_out_tag),
    .io_data_out_data  (_data_memory_0_io_data_out_data)
  );
  icache_ReadWriteSmem data_memory_1 (
    .clock             (clock),
    .io_wr_en
      (axi_response_valid & allocate_way[1] & _data_memory_1_io_wr_en_T_2),
    .io_addr           (current_packet_set),
    .io_data_in_tag    (replay_address_addr[31:11]),
    .io_data_in_data   (axi_response),
    .io_data_out_valid (_data_memory_1_io_data_out_valid),
    .io_data_out_tag   (_data_memory_1_io_data_out_tag),
    .io_data_out_data  (_data_memory_1_io_data_out_data)
  );
  instruction_validator validator (
    .io_instruction_index  (fetch_PC_buf_addr[3:2]),
    .io_instruction_output (_validator_io_instruction_output)
  );
  Queue1_fetch_packet CPU_response_skid_buffer (
    .clock                                   (clock),
    .reset                                   (reset),
    .io_enq_ready                            (_CPU_response_skid_buffer_io_enq_ready),
    .io_enq_valid                            (CPU_response_valid),
    .io_enq_bits_fetch_PC                    (fetch_PC_buf_addr),
    .io_enq_bits_valid_bits_0
      (_validator_io_instruction_output[3] & CPU_response_valid),
    .io_enq_bits_valid_bits_1
      (_validator_io_instruction_output[2] & CPU_response_valid),
    .io_enq_bits_valid_bits_2
      (_validator_io_instruction_output[1] & CPU_response_valid),
    .io_enq_bits_valid_bits_3
      (_validator_io_instruction_output[0] & CPU_response_valid),
    .io_enq_bits_instructions_0_instruction
      (_GEN_8[{CPU_response_bits_instructions_0_instruction_REG, 2'h0}]),
    .io_enq_bits_instructions_1_instruction
      (_GEN_8[{CPU_response_bits_instructions_1_instruction_REG, 2'h0} + 3'h1]),
    .io_enq_bits_instructions_2_instruction
      (_GEN_8[{CPU_response_bits_instructions_2_instruction_REG, 2'h0} + 3'h2]),
    .io_enq_bits_instructions_3_instruction
      (_GEN_8[{CPU_response_bits_instructions_3_instruction_REG, 2'h0} + 3'h3]),
    .io_deq_valid                            (io_CPU_response_valid),
    .io_deq_bits_fetch_PC                    (io_CPU_response_bits_fetch_PC),
    .io_deq_bits_valid_bits_0                (io_CPU_response_bits_valid_bits_0),
    .io_deq_bits_valid_bits_1                (io_CPU_response_bits_valid_bits_1),
    .io_deq_bits_valid_bits_2                (io_CPU_response_bits_valid_bits_2),
    .io_deq_bits_valid_bits_3                (io_CPU_response_bits_valid_bits_3),
    .io_deq_bits_instructions_0_instruction
      (io_CPU_response_bits_instructions_0_instruction),
    .io_deq_bits_instructions_0_packet_index
      (io_CPU_response_bits_instructions_0_packet_index),
    .io_deq_bits_instructions_0_ROB_index
      (io_CPU_response_bits_instructions_0_ROB_index),
    .io_deq_bits_instructions_1_instruction
      (io_CPU_response_bits_instructions_1_instruction),
    .io_deq_bits_instructions_1_packet_index
      (io_CPU_response_bits_instructions_1_packet_index),
    .io_deq_bits_instructions_1_ROB_index
      (io_CPU_response_bits_instructions_1_ROB_index),
    .io_deq_bits_instructions_2_instruction
      (io_CPU_response_bits_instructions_2_instruction),
    .io_deq_bits_instructions_2_packet_index
      (io_CPU_response_bits_instructions_2_packet_index),
    .io_deq_bits_instructions_2_ROB_index
      (io_CPU_response_bits_instructions_2_ROB_index),
    .io_deq_bits_instructions_3_instruction
      (io_CPU_response_bits_instructions_3_instruction),
    .io_deq_bits_instructions_3_packet_index
      (io_CPU_response_bits_instructions_3_packet_index),
    .io_deq_bits_instructions_3_ROB_index
      (io_CPU_response_bits_instructions_3_ROB_index),
    .io_deq_bits_GHR                         (io_CPU_response_bits_GHR),
    .io_deq_bits_NEXT                        (io_CPU_response_bits_NEXT),
    .io_deq_bits_TOS                         (io_CPU_response_bits_TOS)
  );
  assign m_axi_wvalid = m_axi_wvalid_0;
  assign m_axi_wdata = m_axi_wvalid_0 ? AXI_AW_DATA_BUFFER[31:0] : 32'h0;
  assign m_axi_wstrb = {4{m_axi_wvalid_0}};
  assign m_axi_wlast = m_axi_wlast_0;
  assign m_axi_bready = &AXI_REQUEST_STATE;
  assign m_axi_arvalid = m_axi_arvalid_0;
  assign m_axi_araddr = _GEN_3 ? request_addr : 32'h0;
  assign m_axi_arlen = _GEN_3 ? 8'h7 : 8'h0;
  assign m_axi_arsize = {1'h0, _GEN_4, 1'h0};
  assign m_axi_arburst = {1'h0, _GEN_4};
  assign m_axi_rready = m_axi_rready_0;
  assign io_CPU_request_ready = ~(|cache_state) & ~miss;
endmodule

