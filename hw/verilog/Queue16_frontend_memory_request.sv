// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module Queue16_frontend_memory_request(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [31:0] io_enq_bits_addr,
                io_enq_bits_wr_data,
  input         io_enq_bits_wr_en,
                io_deq_ready,
  output        io_deq_valid,
  output [31:0] io_deq_bits_addr,
                io_deq_bits_wr_data,
  output        io_deq_bits_wr_en,
  input         io_flush
);

  wire        do_deq;
  wire [64:0] _ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  wire        io_deq_valid_0 = io_enq_valid | ~empty;
  assign do_deq = ~empty & io_deq_ready & io_deq_valid_0;
  wire        do_enq = ~(empty & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (io_flush) begin
        enq_ptr_value <= 4'h0;
        deq_ptr_value <= 4'h0;
      end
      else begin
        if (do_enq)
          enq_ptr_value <= enq_ptr_value + 4'h1;
        if (do_deq)
          deq_ptr_value <= deq_ptr_value + 4'h1;
      end
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_16x65 ram_ext (
    .R0_addr (do_deq ? ((&deq_ptr_value) ? 4'h0 : deq_ptr_value + 4'h1) : deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({io_enq_bits_wr_en, io_enq_bits_wr_data, io_enq_bits_addr})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = io_deq_valid_0;
  assign io_deq_bits_addr = empty ? io_enq_bits_addr : _ram_ext_R0_data[31:0];
  assign io_deq_bits_wr_data = empty ? io_enq_bits_wr_data : _ram_ext_R0_data[63:32];
  assign io_deq_bits_wr_en = empty ? io_enq_bits_wr_en : _ram_ext_R0_data[64];
endmodule

