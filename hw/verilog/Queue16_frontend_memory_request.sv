// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue16_frontend_memory_request(
  input                                                                         clock,
                                                                                reset,
  output                                                                        io_enq_ready,
  input                                                                         io_enq_valid,
  input  struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; } io_enq_bits,
  input                                                                         io_deq_ready,
  output                                                                        io_deq_valid,
  output struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; } io_deq_bits,
  output [4:0]                                                                  io_count,
  input                                                                         io_flush
);

  wire        do_enq;
  wire        do_deq;
  wire        _GEN;
  wire [31:0] _GEN_0;
  wire [31:0] _GEN_1;
  wire        _GEN_2;
  wire        _GEN_3;
  wire        _GEN_4;
  wire [64:0] _ram_ext_R0_data;
  wire struct packed {logic addr; logic wr_data; logic wr_en; } _GEN_5 =
    /*cast(bit)*/3'h0;
  wire struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; } _GEN_6 =
    /*cast(bit)*/65'h0;
  wire struct packed {logic [31:0] addr; logic [31:0] wr_data; logic wr_en; }
    ram_io_deq_bits_MPORT_data = /*cast(bit)*/_ram_ext_R0_data;
  reg  [3:0]  enq_ptr_value;
  reg  [3:0]  deq_ptr_value;
  reg         maybe_full;
  wire        ptr_match = enq_ptr_value == deq_ptr_value;
  wire        empty = ptr_match & ~maybe_full;
  wire        full = ptr_match & maybe_full;
  assign _GEN_4 = do_enq | _GEN_5.addr;
  assign _GEN_3 = do_enq | _GEN_5.wr_data;
  assign _GEN_2 = do_enq | _GEN_5.wr_en;
  assign _GEN_1 = do_enq ? io_enq_bits.addr : _GEN_6.addr;
  assign _GEN_0 = do_enq ? io_enq_bits.wr_data : _GEN_6.wr_data;
  assign _GEN = do_enq ? io_enq_bits.wr_en : _GEN_6.wr_en;
  wire        _GEN_7 = io_enq_valid | ~empty;
  assign do_deq = ~empty & io_deq_ready & _GEN_7;
  assign do_enq = ~(empty & io_deq_ready) & ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 4'h0;
      deq_ptr_value <= 4'h0;
      maybe_full <= 1'h0;
    end
    else begin
      if (io_flush) begin
        enq_ptr_value <= 4'h0;
        deq_ptr_value <= 4'h0;
      end
      else begin
        if (do_enq)
          enq_ptr_value <= enq_ptr_value + 4'h1;
        if (do_deq)
          deq_ptr_value <= deq_ptr_value + 4'h1;
      end
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_16x65 ram_ext (
    .R0_addr (do_deq ? ((&deq_ptr_value) ? 4'h0 : deq_ptr_value + 4'h1) : deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data ({_GEN, _GEN_0, _GEN_1}),
    .W0_mask ({_GEN_2, {32{_GEN_3}}, {32{_GEN_4}}})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = _GEN_7;
  assign io_deq_bits =
    '{addr: (empty ? io_enq_bits.addr : ram_io_deq_bits_MPORT_data.addr),
      wr_data: (empty ? io_enq_bits.wr_data : ram_io_deq_bits_MPORT_data.wr_data),
      wr_en: (empty ? io_enq_bits.wr_en : ram_io_deq_bits_MPORT_data.wr_en)};
  assign io_count = {maybe_full & ptr_match, enq_ptr_value - deq_ptr_value};
endmodule

