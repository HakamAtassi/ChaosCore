// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue2_decoded_fetch_packet(
  inputclock,
reset,
  outputio_enq_ready,
  inputio_enq_valid,
  input  struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; } io_enq_bits,
  inputio_deq_ready,
  outputio_deq_valid,
  output struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; } io_deq_bits,
  outputio_count,
  inputio_flush
);

  wire [7:0]   _GEN;
  wire [6:0]   _GEN_0;
  wire [6:0]   _GEN_1;
  wire [15:0]  _GEN_2;
  wire         _GEN_3;
  wire         _GEN_4;
  wire         _GEN_5;
  wire         _GEN_6;
  wire [1:0]   _GEN_7;
  wire [1:0]   _GEN_8;
  wire         _GEN_9;
  wire         _GEN_10;
  wire         _GEN_11;
  wire         _GEN_12;
  wire         _GEN_13;
  wire         _GEN_14;
  wire [1:0]   _GEN_15;
  wire [1:0]   _GEN_16;
  wire [4:0]   _GEN_17;
  wire [3:0]   _GEN_18;
  wire [3:0]   _GEN_19;
  wire [5:0]   _GEN_20;
  wire [1:0]   _GEN_21;
  wire [2:0]   _GEN_22;
  wire [20:0]  _GEN_23;
  wire         _GEN_24;
  wire [6:0]   _GEN_25;
  wire         _GEN_26;
  wire [6:0]   _GEN_27;
  wire         _GEN_28;
  wire [6:0]   _GEN_29;
  wire [4:0]   _GEN_30;
  wire         _GEN_31;
  wire         _GEN_32;
  wire [1:0]   _GEN_33;
  wire [1:0]   _GEN_34;
  wire         _GEN_35;
  wire         _GEN_36;
  wire         _GEN_37;
  wire         _GEN_38;
  wire         _GEN_39;
  wire         _GEN_40;
  wire [1:0]   _GEN_41;
  wire [1:0]   _GEN_42;
  wire [4:0]   _GEN_43;
  wire [3:0]   _GEN_44;
  wire [3:0]   _GEN_45;
  wire [5:0]   _GEN_46;
  wire [1:0]   _GEN_47;
  wire [2:0]   _GEN_48;
  wire [20:0]  _GEN_49;
  wire         _GEN_50;
  wire [6:0]   _GEN_51;
  wire         _GEN_52;
  wire [6:0]   _GEN_53;
  wire         _GEN_54;
  wire [6:0]   _GEN_55;
  wire [4:0]   _GEN_56;
  wire         _GEN_57;
  wire         _GEN_58;
  wire [1:0]   _GEN_59;
  wire [1:0]   _GEN_60;
  wire         _GEN_61;
  wire         _GEN_62;
  wire         _GEN_63;
  wire         _GEN_64;
  wire         _GEN_65;
  wire         _GEN_66;
  wire [1:0]   _GEN_67;
  wire [1:0]   _GEN_68;
  wire [4:0]   _GEN_69;
  wire [3:0]   _GEN_70;
  wire [3:0]   _GEN_71;
  wire [5:0]   _GEN_72;
  wire [1:0]   _GEN_73;
  wire [2:0]   _GEN_74;
  wire [20:0]  _GEN_75;
  wire         _GEN_76;
  wire [6:0]   _GEN_77;
  wire         _GEN_78;
  wire [6:0]   _GEN_79;
  wire         _GEN_80;
  wire [6:0]   _GEN_81;
  wire [4:0]   _GEN_82;
  wire         _GEN_83;
  wire         _GEN_84;
  wire [1:0]   _GEN_85;
  wire [1:0]   _GEN_86;
  wire         _GEN_87;
  wire         _GEN_88;
  wire         _GEN_89;
  wire         _GEN_90;
  wire         _GEN_91;
  wire         _GEN_92;
  wire [1:0]   _GEN_93;
  wire [1:0]   _GEN_94;
  wire [4:0]   _GEN_95;
  wire [3:0]   _GEN_96;
  wire [3:0]   _GEN_97;
  wire [5:0]   _GEN_98;
  wire [1:0]   _GEN_99;
  wire [2:0]   _GEN_100;
  wire [20:0]  _GEN_101;
  wire         _GEN_102;
  wire [6:0]   _GEN_103;
  wire         _GEN_104;
  wire [6:0]   _GEN_105;
  wire         _GEN_106;
  wire [6:0]   _GEN_107;
  wire [4:0]   _GEN_108;
  wire         _GEN_109;
  wire         _GEN_110;
  wire [31:0]  _GEN_111;
  wire         _GEN_112;
  wire         _GEN_113;
  wire         _GEN_114;
  wire         _GEN_115;
  wire         _GEN_116;
  wire         _GEN_117;
  wire         _GEN_118;
  wire         _GEN_119;
  wire         _GEN_120;
  wire         _GEN_121;
  wire         _GEN_122;
  wire         _GEN_123;
  wire         _GEN_124;
  wire         _GEN_125;
  wire         _GEN_126;
  wire         _GEN_127;
  wire         _GEN_128;
  wire         _GEN_129;
  wire         _GEN_130;
  wire         _GEN_131;
  wire         _GEN_132;
  wire         _GEN_133;
  wire         _GEN_134;
  wire         _GEN_135;
  wire         _GEN_136;
  wire         _GEN_137;
  wire         _GEN_138;
  wire         _GEN_139;
  wire         _GEN_140;
  wire         _GEN_141;
  wire         _GEN_142;
  wire         _GEN_143;
  wire         _GEN_144;
  wire         _GEN_145;
  wire         _GEN_146;
  wire         _GEN_147;
  wire         _GEN_148;
  wire         _GEN_149;
  wire         _GEN_150;
  wire         _GEN_151;
  wire         _GEN_152;
  wire         _GEN_153;
  wire         _GEN_154;
  wire         _GEN_155;
  wire         _GEN_156;
  wire         _GEN_157;
  wire         _GEN_158;
  wire         _GEN_159;
  wire         _GEN_160;
  wire         _GEN_161;
  wire         _GEN_162;
  wire         _GEN_163;
  wire         _GEN_164;
  wire         _GEN_165;
  wire         _GEN_166;
  wire         _GEN_167;
  wire         _GEN_168;
  wire         _GEN_169;
  wire         _GEN_170;
  wire         _GEN_171;
  wire         _GEN_172;
  wire         _GEN_173;
  wire         _GEN_174;
  wire         _GEN_175;
  wire         _GEN_176;
  wire         _GEN_177;
  wire         _GEN_178;
  wire         _GEN_179;
  wire         _GEN_180;
  wire         _GEN_181;
  wire         _GEN_182;
  wire         _GEN_183;
  wire         _GEN_184;
  wire         _GEN_185;
  wire         _GEN_186;
  wire         _GEN_187;
  wire         _GEN_188;
  wire         _GEN_189;
  wire         _GEN_190;
  wire         _GEN_191;
  wire         _GEN_192;
  wire         _GEN_193;
  wire         _GEN_194;
  wire         _GEN_195;
  wire         _GEN_196;
  wire         _GEN_197;
  wire         _GEN_198;
  wire         _GEN_199;
  wire         _GEN_200;
  wire         _GEN_201;
  wire         _GEN_202;
  wire         _GEN_203;
  wire         _GEN_204;
  wire         _GEN_205;
  wire         _GEN_206;
  wire         _GEN_207;
  wire         _GEN_208;
  wire         _GEN_209;
  wire         _GEN_210;
  wire         _GEN_211;
  wire         _GEN_212;
  wire         _GEN_213;
  wire         _GEN_214;
  wire         _GEN_215;
  wire         _GEN_216;
  wire         _GEN_217;
  wire         _GEN_218;
  wire         _GEN_219;
  wire         _GEN_220;
  wire         _GEN_221;
  wire         _GEN_222;
  wire         _GEN_223;
  wire         _GEN_224;
  wire [433:0] _ram_ext_R0_data;
  wire
    struct packed {logic fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic RDold; logic RD; logic RD_valid; logic RS1; logic RS1_valid; logic RS2; logic RS2_valid; logic IMM; logic FUNCT3; logic packet_index; logic ROB_index; logic MOB_index; logic FTQ_index; logic instructionType; logic portID; logic RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic memory_type; logic access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic GHR; logic TOS; logic NEXT; logic free_list_front_pointer; }
    _GEN_225 = /*cast(bit)*/113'h0;
  wire
    struct packed {logic [31:0] fetch_PC; struct packed {struct packed {logic RS1_ready; logic RS2_ready; } ready_bits; logic [4:0] RDold; logic [6:0] RD; logic RD_valid; logic [6:0] RS1; logic RS1_valid; logic [6:0] RS2; logic RS2_valid; logic [20:0] IMM; logic [2:0] FUNCT3; logic [1:0] packet_index; logic [5:0] ROB_index; logic [3:0] MOB_index; logic [3:0] FTQ_index; logic [4:0] instructionType; logic [1:0] portID; logic [1:0] RS_type; logic needs_ALU; logic needs_branch_unit; logic needs_CSRs; logic SUBTRACT; logic MULTIPLY; logic IS_IMM; logic [1:0] memory_type; logic [1:0] access_width; }[3:0] decoded_instruction; logic [3:0] valid_bits; logic [15:0] GHR; logic [6:0] TOS; logic [6:0] NEXT; logic [7:0] free_list_front_pointer; }
    _GEN_226 = /*cast(bit)*/434'h0;
  reg          wrap;
  reg          wrap_1;
  reg          maybe_full;
  wire         ptr_match = wrap == wrap_1;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  assign _GEN_224 = do_enq | _GEN_225.fetch_PC;
  assign _GEN_223 = do_enq | _GEN_225.decoded_instruction[2'h0].ready_bits.RS1_ready;
  assign _GEN_222 = do_enq | _GEN_225.decoded_instruction[2'h0].ready_bits.RS2_ready;
  assign _GEN_221 = do_enq | _GEN_225.decoded_instruction[2'h0].RDold;
  assign _GEN_220 = do_enq | _GEN_225.decoded_instruction[2'h0].RD;
  assign _GEN_219 = do_enq | _GEN_225.decoded_instruction[2'h0].RD_valid;
  assign _GEN_218 = do_enq | _GEN_225.decoded_instruction[2'h0].RS1;
  assign _GEN_217 = do_enq | _GEN_225.decoded_instruction[2'h0].RS1_valid;
  assign _GEN_216 = do_enq | _GEN_225.decoded_instruction[2'h0].RS2;
  assign _GEN_215 = do_enq | _GEN_225.decoded_instruction[2'h0].RS2_valid;
  assign _GEN_214 = do_enq | _GEN_225.decoded_instruction[2'h0].IMM;
  assign _GEN_213 = do_enq | _GEN_225.decoded_instruction[2'h0].FUNCT3;
  assign _GEN_212 = do_enq | _GEN_225.decoded_instruction[2'h0].packet_index;
  assign _GEN_211 = do_enq | _GEN_225.decoded_instruction[2'h0].ROB_index;
  assign _GEN_210 = do_enq | _GEN_225.decoded_instruction[2'h0].MOB_index;
  assign _GEN_209 = do_enq | _GEN_225.decoded_instruction[2'h0].FTQ_index;
  assign _GEN_208 = do_enq | _GEN_225.decoded_instruction[2'h0].instructionType;
  assign _GEN_207 = do_enq | _GEN_225.decoded_instruction[2'h0].portID;
  assign _GEN_206 = do_enq | _GEN_225.decoded_instruction[2'h0].RS_type;
  assign _GEN_205 = do_enq | _GEN_225.decoded_instruction[2'h0].needs_ALU;
  assign _GEN_204 = do_enq | _GEN_225.decoded_instruction[2'h0].needs_branch_unit;
  assign _GEN_203 = do_enq | _GEN_225.decoded_instruction[2'h0].needs_CSRs;
  assign _GEN_202 = do_enq | _GEN_225.decoded_instruction[2'h0].SUBTRACT;
  assign _GEN_201 = do_enq | _GEN_225.decoded_instruction[2'h0].MULTIPLY;
  assign _GEN_200 = do_enq | _GEN_225.decoded_instruction[2'h0].IS_IMM;
  assign _GEN_199 = do_enq | _GEN_225.decoded_instruction[2'h0].memory_type;
  assign _GEN_198 = do_enq | _GEN_225.decoded_instruction[2'h0].access_width;
  assign _GEN_197 = do_enq | _GEN_225.decoded_instruction[2'h1].ready_bits.RS1_ready;
  assign _GEN_196 = do_enq | _GEN_225.decoded_instruction[2'h1].ready_bits.RS2_ready;
  assign _GEN_195 = do_enq | _GEN_225.decoded_instruction[2'h1].RDold;
  assign _GEN_194 = do_enq | _GEN_225.decoded_instruction[2'h1].RD;
  assign _GEN_193 = do_enq | _GEN_225.decoded_instruction[2'h1].RD_valid;
  assign _GEN_192 = do_enq | _GEN_225.decoded_instruction[2'h1].RS1;
  assign _GEN_191 = do_enq | _GEN_225.decoded_instruction[2'h1].RS1_valid;
  assign _GEN_190 = do_enq | _GEN_225.decoded_instruction[2'h1].RS2;
  assign _GEN_189 = do_enq | _GEN_225.decoded_instruction[2'h1].RS2_valid;
  assign _GEN_188 = do_enq | _GEN_225.decoded_instruction[2'h1].IMM;
  assign _GEN_187 = do_enq | _GEN_225.decoded_instruction[2'h1].FUNCT3;
  assign _GEN_186 = do_enq | _GEN_225.decoded_instruction[2'h1].packet_index;
  assign _GEN_185 = do_enq | _GEN_225.decoded_instruction[2'h1].ROB_index;
  assign _GEN_184 = do_enq | _GEN_225.decoded_instruction[2'h1].MOB_index;
  assign _GEN_183 = do_enq | _GEN_225.decoded_instruction[2'h1].FTQ_index;
  assign _GEN_182 = do_enq | _GEN_225.decoded_instruction[2'h1].instructionType;
  assign _GEN_181 = do_enq | _GEN_225.decoded_instruction[2'h1].portID;
  assign _GEN_180 = do_enq | _GEN_225.decoded_instruction[2'h1].RS_type;
  assign _GEN_179 = do_enq | _GEN_225.decoded_instruction[2'h1].needs_ALU;
  assign _GEN_178 = do_enq | _GEN_225.decoded_instruction[2'h1].needs_branch_unit;
  assign _GEN_177 = do_enq | _GEN_225.decoded_instruction[2'h1].needs_CSRs;
  assign _GEN_176 = do_enq | _GEN_225.decoded_instruction[2'h1].SUBTRACT;
  assign _GEN_175 = do_enq | _GEN_225.decoded_instruction[2'h1].MULTIPLY;
  assign _GEN_174 = do_enq | _GEN_225.decoded_instruction[2'h1].IS_IMM;
  assign _GEN_173 = do_enq | _GEN_225.decoded_instruction[2'h1].memory_type;
  assign _GEN_172 = do_enq | _GEN_225.decoded_instruction[2'h1].access_width;
  assign _GEN_171 = do_enq | _GEN_225.decoded_instruction[2'h2].ready_bits.RS1_ready;
  assign _GEN_170 = do_enq | _GEN_225.decoded_instruction[2'h2].ready_bits.RS2_ready;
  assign _GEN_169 = do_enq | _GEN_225.decoded_instruction[2'h2].RDold;
  assign _GEN_168 = do_enq | _GEN_225.decoded_instruction[2'h2].RD;
  assign _GEN_167 = do_enq | _GEN_225.decoded_instruction[2'h2].RD_valid;
  assign _GEN_166 = do_enq | _GEN_225.decoded_instruction[2'h2].RS1;
  assign _GEN_165 = do_enq | _GEN_225.decoded_instruction[2'h2].RS1_valid;
  assign _GEN_164 = do_enq | _GEN_225.decoded_instruction[2'h2].RS2;
  assign _GEN_163 = do_enq | _GEN_225.decoded_instruction[2'h2].RS2_valid;
  assign _GEN_162 = do_enq | _GEN_225.decoded_instruction[2'h2].IMM;
  assign _GEN_161 = do_enq | _GEN_225.decoded_instruction[2'h2].FUNCT3;
  assign _GEN_160 = do_enq | _GEN_225.decoded_instruction[2'h2].packet_index;
  assign _GEN_159 = do_enq | _GEN_225.decoded_instruction[2'h2].ROB_index;
  assign _GEN_158 = do_enq | _GEN_225.decoded_instruction[2'h2].MOB_index;
  assign _GEN_157 = do_enq | _GEN_225.decoded_instruction[2'h2].FTQ_index;
  assign _GEN_156 = do_enq | _GEN_225.decoded_instruction[2'h2].instructionType;
  assign _GEN_155 = do_enq | _GEN_225.decoded_instruction[2'h2].portID;
  assign _GEN_154 = do_enq | _GEN_225.decoded_instruction[2'h2].RS_type;
  assign _GEN_153 = do_enq | _GEN_225.decoded_instruction[2'h2].needs_ALU;
  assign _GEN_152 = do_enq | _GEN_225.decoded_instruction[2'h2].needs_branch_unit;
  assign _GEN_151 = do_enq | _GEN_225.decoded_instruction[2'h2].needs_CSRs;
  assign _GEN_150 = do_enq | _GEN_225.decoded_instruction[2'h2].SUBTRACT;
  assign _GEN_149 = do_enq | _GEN_225.decoded_instruction[2'h2].MULTIPLY;
  assign _GEN_148 = do_enq | _GEN_225.decoded_instruction[2'h2].IS_IMM;
  assign _GEN_147 = do_enq | _GEN_225.decoded_instruction[2'h2].memory_type;
  assign _GEN_146 = do_enq | _GEN_225.decoded_instruction[2'h2].access_width;
  assign _GEN_145 = do_enq | _GEN_225.decoded_instruction[2'h3].ready_bits.RS1_ready;
  assign _GEN_144 = do_enq | _GEN_225.decoded_instruction[2'h3].ready_bits.RS2_ready;
  assign _GEN_143 = do_enq | _GEN_225.decoded_instruction[2'h3].RDold;
  assign _GEN_142 = do_enq | _GEN_225.decoded_instruction[2'h3].RD;
  assign _GEN_141 = do_enq | _GEN_225.decoded_instruction[2'h3].RD_valid;
  assign _GEN_140 = do_enq | _GEN_225.decoded_instruction[2'h3].RS1;
  assign _GEN_139 = do_enq | _GEN_225.decoded_instruction[2'h3].RS1_valid;
  assign _GEN_138 = do_enq | _GEN_225.decoded_instruction[2'h3].RS2;
  assign _GEN_137 = do_enq | _GEN_225.decoded_instruction[2'h3].RS2_valid;
  assign _GEN_136 = do_enq | _GEN_225.decoded_instruction[2'h3].IMM;
  assign _GEN_135 = do_enq | _GEN_225.decoded_instruction[2'h3].FUNCT3;
  assign _GEN_134 = do_enq | _GEN_225.decoded_instruction[2'h3].packet_index;
  assign _GEN_133 = do_enq | _GEN_225.decoded_instruction[2'h3].ROB_index;
  assign _GEN_132 = do_enq | _GEN_225.decoded_instruction[2'h3].MOB_index;
  assign _GEN_131 = do_enq | _GEN_225.decoded_instruction[2'h3].FTQ_index;
  assign _GEN_130 = do_enq | _GEN_225.decoded_instruction[2'h3].instructionType;
  assign _GEN_129 = do_enq | _GEN_225.decoded_instruction[2'h3].portID;
  assign _GEN_128 = do_enq | _GEN_225.decoded_instruction[2'h3].RS_type;
  assign _GEN_127 = do_enq | _GEN_225.decoded_instruction[2'h3].needs_ALU;
  assign _GEN_126 = do_enq | _GEN_225.decoded_instruction[2'h3].needs_branch_unit;
  assign _GEN_125 = do_enq | _GEN_225.decoded_instruction[2'h3].needs_CSRs;
  assign _GEN_124 = do_enq | _GEN_225.decoded_instruction[2'h3].SUBTRACT;
  assign _GEN_123 = do_enq | _GEN_225.decoded_instruction[2'h3].MULTIPLY;
  assign _GEN_122 = do_enq | _GEN_225.decoded_instruction[2'h3].IS_IMM;
  assign _GEN_121 = do_enq | _GEN_225.decoded_instruction[2'h3].memory_type;
  assign _GEN_120 = do_enq | _GEN_225.decoded_instruction[2'h3].access_width;
  assign _GEN_119 = do_enq | _GEN_225.valid_bits[2'h0];
  assign _GEN_118 = do_enq | _GEN_225.valid_bits[2'h1];
  assign _GEN_117 = do_enq | _GEN_225.valid_bits[2'h2];
  assign _GEN_116 = do_enq | _GEN_225.valid_bits[2'h3];
  assign _GEN_115 = do_enq | _GEN_225.GHR;
  assign _GEN_114 = do_enq | _GEN_225.TOS;
  assign _GEN_113 = do_enq | _GEN_225.NEXT;
  assign _GEN_112 = do_enq | _GEN_225.free_list_front_pointer;
  assign _GEN_111 = do_enq ? io_enq_bits.fetch_PC : _GEN_226.fetch_PC;
  assign _GEN_110 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].ready_bits.RS1_ready
      : _GEN_226.decoded_instruction[2'h0].ready_bits.RS1_ready;
  assign _GEN_109 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].ready_bits.RS2_ready
      : _GEN_226.decoded_instruction[2'h0].ready_bits.RS2_ready;
  assign _GEN_108 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RDold
      : _GEN_226.decoded_instruction[2'h0].RDold;
  assign _GEN_107 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RD
      : _GEN_226.decoded_instruction[2'h0].RD;
  assign _GEN_106 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RD_valid
      : _GEN_226.decoded_instruction[2'h0].RD_valid;
  assign _GEN_105 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RS1
      : _GEN_226.decoded_instruction[2'h0].RS1;
  assign _GEN_104 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RS1_valid
      : _GEN_226.decoded_instruction[2'h0].RS1_valid;
  assign _GEN_103 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RS2
      : _GEN_226.decoded_instruction[2'h0].RS2;
  assign _GEN_102 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RS2_valid
      : _GEN_226.decoded_instruction[2'h0].RS2_valid;
  assign _GEN_101 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].IMM
      : _GEN_226.decoded_instruction[2'h0].IMM;
  assign _GEN_100 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].FUNCT3
      : _GEN_226.decoded_instruction[2'h0].FUNCT3;
  assign _GEN_99 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].packet_index
      : _GEN_226.decoded_instruction[2'h0].packet_index;
  assign _GEN_98 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].ROB_index
      : _GEN_226.decoded_instruction[2'h0].ROB_index;
  assign _GEN_97 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].MOB_index
      : _GEN_226.decoded_instruction[2'h0].MOB_index;
  assign _GEN_96 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].FTQ_index
      : _GEN_226.decoded_instruction[2'h0].FTQ_index;
  assign _GEN_95 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].instructionType
      : _GEN_226.decoded_instruction[2'h0].instructionType;
  assign _GEN_94 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].portID
      : _GEN_226.decoded_instruction[2'h0].portID;
  assign _GEN_93 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].RS_type
      : _GEN_226.decoded_instruction[2'h0].RS_type;
  assign _GEN_92 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].needs_ALU
      : _GEN_226.decoded_instruction[2'h0].needs_ALU;
  assign _GEN_91 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].needs_branch_unit
      : _GEN_226.decoded_instruction[2'h0].needs_branch_unit;
  assign _GEN_90 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].needs_CSRs
      : _GEN_226.decoded_instruction[2'h0].needs_CSRs;
  assign _GEN_89 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].SUBTRACT
      : _GEN_226.decoded_instruction[2'h0].SUBTRACT;
  assign _GEN_88 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].MULTIPLY
      : _GEN_226.decoded_instruction[2'h0].MULTIPLY;
  assign _GEN_87 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].IS_IMM
      : _GEN_226.decoded_instruction[2'h0].IS_IMM;
  assign _GEN_86 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].memory_type
      : _GEN_226.decoded_instruction[2'h0].memory_type;
  assign _GEN_85 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h0].access_width
      : _GEN_226.decoded_instruction[2'h0].access_width;
  assign _GEN_84 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].ready_bits.RS1_ready
      : _GEN_226.decoded_instruction[2'h1].ready_bits.RS1_ready;
  assign _GEN_83 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].ready_bits.RS2_ready
      : _GEN_226.decoded_instruction[2'h1].ready_bits.RS2_ready;
  assign _GEN_82 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RDold
      : _GEN_226.decoded_instruction[2'h1].RDold;
  assign _GEN_81 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RD
      : _GEN_226.decoded_instruction[2'h1].RD;
  assign _GEN_80 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RD_valid
      : _GEN_226.decoded_instruction[2'h1].RD_valid;
  assign _GEN_79 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RS1
      : _GEN_226.decoded_instruction[2'h1].RS1;
  assign _GEN_78 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RS1_valid
      : _GEN_226.decoded_instruction[2'h1].RS1_valid;
  assign _GEN_77 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RS2
      : _GEN_226.decoded_instruction[2'h1].RS2;
  assign _GEN_76 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RS2_valid
      : _GEN_226.decoded_instruction[2'h1].RS2_valid;
  assign _GEN_75 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].IMM
      : _GEN_226.decoded_instruction[2'h1].IMM;
  assign _GEN_74 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].FUNCT3
      : _GEN_226.decoded_instruction[2'h1].FUNCT3;
  assign _GEN_73 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].packet_index
      : _GEN_226.decoded_instruction[2'h1].packet_index;
  assign _GEN_72 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].ROB_index
      : _GEN_226.decoded_instruction[2'h1].ROB_index;
  assign _GEN_71 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].MOB_index
      : _GEN_226.decoded_instruction[2'h1].MOB_index;
  assign _GEN_70 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].FTQ_index
      : _GEN_226.decoded_instruction[2'h1].FTQ_index;
  assign _GEN_69 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].instructionType
      : _GEN_226.decoded_instruction[2'h1].instructionType;
  assign _GEN_68 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].portID
      : _GEN_226.decoded_instruction[2'h1].portID;
  assign _GEN_67 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].RS_type
      : _GEN_226.decoded_instruction[2'h1].RS_type;
  assign _GEN_66 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].needs_ALU
      : _GEN_226.decoded_instruction[2'h1].needs_ALU;
  assign _GEN_65 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].needs_branch_unit
      : _GEN_226.decoded_instruction[2'h1].needs_branch_unit;
  assign _GEN_64 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].needs_CSRs
      : _GEN_226.decoded_instruction[2'h1].needs_CSRs;
  assign _GEN_63 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].SUBTRACT
      : _GEN_226.decoded_instruction[2'h1].SUBTRACT;
  assign _GEN_62 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].MULTIPLY
      : _GEN_226.decoded_instruction[2'h1].MULTIPLY;
  assign _GEN_61 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].IS_IMM
      : _GEN_226.decoded_instruction[2'h1].IS_IMM;
  assign _GEN_60 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].memory_type
      : _GEN_226.decoded_instruction[2'h1].memory_type;
  assign _GEN_59 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h1].access_width
      : _GEN_226.decoded_instruction[2'h1].access_width;
  assign _GEN_58 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].ready_bits.RS1_ready
      : _GEN_226.decoded_instruction[2'h2].ready_bits.RS1_ready;
  assign _GEN_57 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].ready_bits.RS2_ready
      : _GEN_226.decoded_instruction[2'h2].ready_bits.RS2_ready;
  assign _GEN_56 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RDold
      : _GEN_226.decoded_instruction[2'h2].RDold;
  assign _GEN_55 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RD
      : _GEN_226.decoded_instruction[2'h2].RD;
  assign _GEN_54 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RD_valid
      : _GEN_226.decoded_instruction[2'h2].RD_valid;
  assign _GEN_53 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RS1
      : _GEN_226.decoded_instruction[2'h2].RS1;
  assign _GEN_52 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RS1_valid
      : _GEN_226.decoded_instruction[2'h2].RS1_valid;
  assign _GEN_51 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RS2
      : _GEN_226.decoded_instruction[2'h2].RS2;
  assign _GEN_50 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RS2_valid
      : _GEN_226.decoded_instruction[2'h2].RS2_valid;
  assign _GEN_49 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].IMM
      : _GEN_226.decoded_instruction[2'h2].IMM;
  assign _GEN_48 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].FUNCT3
      : _GEN_226.decoded_instruction[2'h2].FUNCT3;
  assign _GEN_47 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].packet_index
      : _GEN_226.decoded_instruction[2'h2].packet_index;
  assign _GEN_46 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].ROB_index
      : _GEN_226.decoded_instruction[2'h2].ROB_index;
  assign _GEN_45 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].MOB_index
      : _GEN_226.decoded_instruction[2'h2].MOB_index;
  assign _GEN_44 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].FTQ_index
      : _GEN_226.decoded_instruction[2'h2].FTQ_index;
  assign _GEN_43 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].instructionType
      : _GEN_226.decoded_instruction[2'h2].instructionType;
  assign _GEN_42 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].portID
      : _GEN_226.decoded_instruction[2'h2].portID;
  assign _GEN_41 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].RS_type
      : _GEN_226.decoded_instruction[2'h2].RS_type;
  assign _GEN_40 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].needs_ALU
      : _GEN_226.decoded_instruction[2'h2].needs_ALU;
  assign _GEN_39 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].needs_branch_unit
      : _GEN_226.decoded_instruction[2'h2].needs_branch_unit;
  assign _GEN_38 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].needs_CSRs
      : _GEN_226.decoded_instruction[2'h2].needs_CSRs;
  assign _GEN_37 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].SUBTRACT
      : _GEN_226.decoded_instruction[2'h2].SUBTRACT;
  assign _GEN_36 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].MULTIPLY
      : _GEN_226.decoded_instruction[2'h2].MULTIPLY;
  assign _GEN_35 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].IS_IMM
      : _GEN_226.decoded_instruction[2'h2].IS_IMM;
  assign _GEN_34 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].memory_type
      : _GEN_226.decoded_instruction[2'h2].memory_type;
  assign _GEN_33 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h2].access_width
      : _GEN_226.decoded_instruction[2'h2].access_width;
  assign _GEN_32 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].ready_bits.RS1_ready
      : _GEN_226.decoded_instruction[2'h3].ready_bits.RS1_ready;
  assign _GEN_31 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].ready_bits.RS2_ready
      : _GEN_226.decoded_instruction[2'h3].ready_bits.RS2_ready;
  assign _GEN_30 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RDold
      : _GEN_226.decoded_instruction[2'h3].RDold;
  assign _GEN_29 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RD
      : _GEN_226.decoded_instruction[2'h3].RD;
  assign _GEN_28 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RD_valid
      : _GEN_226.decoded_instruction[2'h3].RD_valid;
  assign _GEN_27 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RS1
      : _GEN_226.decoded_instruction[2'h3].RS1;
  assign _GEN_26 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RS1_valid
      : _GEN_226.decoded_instruction[2'h3].RS1_valid;
  assign _GEN_25 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RS2
      : _GEN_226.decoded_instruction[2'h3].RS2;
  assign _GEN_24 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RS2_valid
      : _GEN_226.decoded_instruction[2'h3].RS2_valid;
  assign _GEN_23 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].IMM
      : _GEN_226.decoded_instruction[2'h3].IMM;
  assign _GEN_22 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].FUNCT3
      : _GEN_226.decoded_instruction[2'h3].FUNCT3;
  assign _GEN_21 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].packet_index
      : _GEN_226.decoded_instruction[2'h3].packet_index;
  assign _GEN_20 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].ROB_index
      : _GEN_226.decoded_instruction[2'h3].ROB_index;
  assign _GEN_19 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].MOB_index
      : _GEN_226.decoded_instruction[2'h3].MOB_index;
  assign _GEN_18 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].FTQ_index
      : _GEN_226.decoded_instruction[2'h3].FTQ_index;
  assign _GEN_17 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].instructionType
      : _GEN_226.decoded_instruction[2'h3].instructionType;
  assign _GEN_16 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].portID
      : _GEN_226.decoded_instruction[2'h3].portID;
  assign _GEN_15 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].RS_type
      : _GEN_226.decoded_instruction[2'h3].RS_type;
  assign _GEN_14 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].needs_ALU
      : _GEN_226.decoded_instruction[2'h3].needs_ALU;
  assign _GEN_13 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].needs_branch_unit
      : _GEN_226.decoded_instruction[2'h3].needs_branch_unit;
  assign _GEN_12 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].needs_CSRs
      : _GEN_226.decoded_instruction[2'h3].needs_CSRs;
  assign _GEN_11 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].SUBTRACT
      : _GEN_226.decoded_instruction[2'h3].SUBTRACT;
  assign _GEN_10 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].MULTIPLY
      : _GEN_226.decoded_instruction[2'h3].MULTIPLY;
  assign _GEN_9 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].IS_IMM
      : _GEN_226.decoded_instruction[2'h3].IS_IMM;
  assign _GEN_8 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].memory_type
      : _GEN_226.decoded_instruction[2'h3].memory_type;
  assign _GEN_7 =
    do_enq
      ? io_enq_bits.decoded_instruction[2'h3].access_width
      : _GEN_226.decoded_instruction[2'h3].access_width;
  assign _GEN_6 = do_enq ? io_enq_bits.valid_bits[2'h0] : _GEN_226.valid_bits[2'h0];
  assign _GEN_5 = do_enq ? io_enq_bits.valid_bits[2'h1] : _GEN_226.valid_bits[2'h1];
  assign _GEN_4 = do_enq ? io_enq_bits.valid_bits[2'h2] : _GEN_226.valid_bits[2'h2];
  assign _GEN_3 = do_enq ? io_enq_bits.valid_bits[2'h3] : _GEN_226.valid_bits[2'h3];
  assign _GEN_2 = do_enq ? io_enq_bits.GHR : _GEN_226.GHR;
  assign _GEN_1 = do_enq ? io_enq_bits.TOS : _GEN_226.TOS;
  assign _GEN_0 = do_enq ? io_enq_bits.NEXT : _GEN_226.NEXT;
  assign _GEN =
    do_enq ? io_enq_bits.free_list_front_pointer : _GEN_226.free_list_front_pointer;
  always @(posedge clock) begin
    if (reset) begin
      wrap <= 1'h0;
      wrap_1 <= 1'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq = io_deq_ready & ~empty;
      wrap <= ~io_flush & (do_enq ? wrap - 1'h1 : wrap);
      wrap_1 <= ~io_flush & (do_deq ? wrap_1 - 1'h1 : wrap_1);
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_2x434 ram_ext (
    .R0_addr (wrap_1),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (wrap),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({_GEN,
        _GEN_0,
        _GEN_1,
        _GEN_2,
        _GEN_3,
        _GEN_4,
        _GEN_5,
        _GEN_6,
        _GEN_7,
        _GEN_8,
        _GEN_9,
        _GEN_10,
        _GEN_11,
        _GEN_12,
        _GEN_13,
        _GEN_14,
        _GEN_15,
        _GEN_16,
        _GEN_17,
        _GEN_18,
        _GEN_19,
        _GEN_20,
        _GEN_21,
        _GEN_22,
        _GEN_23,
        _GEN_24,
        _GEN_25,
        _GEN_26,
        _GEN_27,
        _GEN_28,
        _GEN_29,
        _GEN_30,
        _GEN_31,
        _GEN_32,
        _GEN_33,
        _GEN_34,
        _GEN_35,
        _GEN_36,
        _GEN_37,
        _GEN_38,
        _GEN_39,
        _GEN_40,
        _GEN_41,
        _GEN_42,
        _GEN_43,
        _GEN_44,
        _GEN_45,
        _GEN_46,
        _GEN_47,
        _GEN_48,
        _GEN_49,
        _GEN_50,
        _GEN_51,
        _GEN_52,
        _GEN_53,
        _GEN_54,
        _GEN_55,
        _GEN_56,
        _GEN_57,
        _GEN_58,
        _GEN_59,
        _GEN_60,
        _GEN_61,
        _GEN_62,
        _GEN_63,
        _GEN_64,
        _GEN_65,
        _GEN_66,
        _GEN_67,
        _GEN_68,
        _GEN_69,
        _GEN_70,
        _GEN_71,
        _GEN_72,
        _GEN_73,
        _GEN_74,
        _GEN_75,
        _GEN_76,
        _GEN_77,
        _GEN_78,
        _GEN_79,
        _GEN_80,
        _GEN_81,
        _GEN_82,
        _GEN_83,
        _GEN_84,
        _GEN_85,
        _GEN_86,
        _GEN_87,
        _GEN_88,
        _GEN_89,
        _GEN_90,
        _GEN_91,
        _GEN_92,
        _GEN_93,
        _GEN_94,
        _GEN_95,
        _GEN_96,
        _GEN_97,
        _GEN_98,
        _GEN_99,
        _GEN_100,
        _GEN_101,
        _GEN_102,
        _GEN_103,
        _GEN_104,
        _GEN_105,
        _GEN_106,
        _GEN_107,
        _GEN_108,
        _GEN_109,
        _GEN_110,
        _GEN_111}),
    .W0_mask
      ({{8{_GEN_112}},
        {7{_GEN_113}},
        {7{_GEN_114}},
        {16{_GEN_115}},
        _GEN_116,
        _GEN_117,
        _GEN_118,
        _GEN_119,
        {2{_GEN_120}},
        {2{_GEN_121}},
        _GEN_122,
        _GEN_123,
        _GEN_124,
        _GEN_125,
        _GEN_126,
        _GEN_127,
        {2{_GEN_128}},
        {2{_GEN_129}},
        {5{_GEN_130}},
        {4{_GEN_131}},
        {4{_GEN_132}},
        {6{_GEN_133}},
        {2{_GEN_134}},
        {3{_GEN_135}},
        {21{_GEN_136}},
        _GEN_137,
        {7{_GEN_138}},
        _GEN_139,
        {7{_GEN_140}},
        _GEN_141,
        {7{_GEN_142}},
        {5{_GEN_143}},
        _GEN_144,
        _GEN_145,
        {2{_GEN_146}},
        {2{_GEN_147}},
        _GEN_148,
        _GEN_149,
        _GEN_150,
        _GEN_151,
        _GEN_152,
        _GEN_153,
        {2{_GEN_154}},
        {2{_GEN_155}},
        {5{_GEN_156}},
        {4{_GEN_157}},
        {4{_GEN_158}},
        {6{_GEN_159}},
        {2{_GEN_160}},
        {3{_GEN_161}},
        {21{_GEN_162}},
        _GEN_163,
        {7{_GEN_164}},
        _GEN_165,
        {7{_GEN_166}},
        _GEN_167,
        {7{_GEN_168}},
        {5{_GEN_169}},
        _GEN_170,
        _GEN_171,
        {2{_GEN_172}},
        {2{_GEN_173}},
        _GEN_174,
        _GEN_175,
        _GEN_176,
        _GEN_177,
        _GEN_178,
        _GEN_179,
        {2{_GEN_180}},
        {2{_GEN_181}},
        {5{_GEN_182}},
        {4{_GEN_183}},
        {4{_GEN_184}},
        {6{_GEN_185}},
        {2{_GEN_186}},
        {3{_GEN_187}},
        {21{_GEN_188}},
        _GEN_189,
        {7{_GEN_190}},
        _GEN_191,
        {7{_GEN_192}},
        _GEN_193,
        {7{_GEN_194}},
        {5{_GEN_195}},
        _GEN_196,
        _GEN_197,
        {2{_GEN_198}},
        {2{_GEN_199}},
        _GEN_200,
        _GEN_201,
        _GEN_202,
        _GEN_203,
        _GEN_204,
        _GEN_205,
        {2{_GEN_206}},
        {2{_GEN_207}},
        {5{_GEN_208}},
        {4{_GEN_209}},
        {4{_GEN_210}},
        {6{_GEN_211}},
        {2{_GEN_212}},
        {3{_GEN_213}},
        {21{_GEN_214}},
        _GEN_215,
        {7{_GEN_216}},
        _GEN_217,
        {7{_GEN_218}},
        _GEN_219,
        {7{_GEN_220}},
        {5{_GEN_221}},
        _GEN_222,
        _GEN_223,
        {32{_GEN_224}}})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits = /*cast(bit)*/_ram_ext_R0_data;
  assign io_count = {maybe_full & ptr_match, wrap - wrap_1};
endmodule

