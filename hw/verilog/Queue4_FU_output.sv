// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Queue4_FU_output(
  input         clock,
                reset,
  output        io_enq_ready,
  input         io_enq_valid,
  input  [6:0]  io_enq_bits_RD,
  input  [31:0] io_enq_bits_RD_data,
  input         io_enq_bits_RD_valid,
  input  [5:0]  io_enq_bits_ROB_index,
  input  [1:0]  io_enq_bits_fetch_packet_index,
  input         io_enq_bits_exception,
                io_deq_ready,
  output        io_deq_valid,
  output [6:0]  io_deq_bits_RD,
  output [31:0] io_deq_bits_RD_data,
  output        io_deq_bits_RD_valid,
  output [31:0] io_deq_bits_fetch_PC,
  output        io_deq_bits_branch_taken,
  output [31:0] io_deq_bits_target_address,
  output        io_deq_bits_branch_valid,
  output [31:0] io_deq_bits_address,
  output [1:0]  io_deq_bits_memory_type,
                io_deq_bits_access_width,
  output        io_deq_bits_is_unsigned,
  output [31:0] io_deq_bits_wr_data,
  output [3:0]  io_deq_bits_MOB_index,
  output [5:0]  io_deq_bits_ROB_index,
  output [3:0]  io_deq_bits_FTQ_index,
  output [1:0]  io_deq_bits_fetch_packet_index,
  output        io_deq_bits_exception,
                io_deq_bits_memory_violation,
  input         io_flush
);

  wire [192:0] _ram_ext_R0_data;
  reg  [1:0]   enq_ptr_value;
  reg  [1:0]   deq_ptr_value;
  reg          maybe_full;
  wire         ptr_match = enq_ptr_value == deq_ptr_value;
  wire         empty = ptr_match & ~maybe_full;
  wire         full = ptr_match & maybe_full;
  wire         do_enq = ~full & io_enq_valid;
  always @(posedge clock) begin
    if (reset) begin
      enq_ptr_value <= 2'h0;
      deq_ptr_value <= 2'h0;
      maybe_full <= 1'h0;
    end
    else begin
      automatic logic do_deq;
      do_deq = io_deq_ready & ~empty;
      if (io_flush) begin
        enq_ptr_value <= 2'h0;
        deq_ptr_value <= 2'h0;
      end
      else begin
        if (do_enq)
          enq_ptr_value <= enq_ptr_value + 2'h1;
        if (do_deq)
          deq_ptr_value <= deq_ptr_value + 2'h1;
      end
      maybe_full <= ~io_flush & (do_enq == do_deq ? maybe_full : do_enq);
    end
  end // always @(posedge)
  ram_4x193 ram_ext (
    .R0_addr (deq_ptr_value),
    .R0_en   (1'h1),
    .R0_clk  (clock),
    .R0_data (_ram_ext_R0_data),
    .W0_addr (enq_ptr_value),
    .W0_en   (do_enq),
    .W0_clk  (clock),
    .W0_data
      ({1'h0,
        io_enq_bits_exception,
        io_enq_bits_fetch_packet_index,
        4'h0,
        io_enq_bits_ROB_index,
        139'h0,
        io_enq_bits_RD_valid,
        io_enq_bits_RD_data,
        io_enq_bits_RD})
  );
  assign io_enq_ready = ~full;
  assign io_deq_valid = ~empty;
  assign io_deq_bits_RD = _ram_ext_R0_data[6:0];
  assign io_deq_bits_RD_data = _ram_ext_R0_data[38:7];
  assign io_deq_bits_RD_valid = _ram_ext_R0_data[39];
  assign io_deq_bits_fetch_PC = _ram_ext_R0_data[71:40];
  assign io_deq_bits_branch_taken = _ram_ext_R0_data[72];
  assign io_deq_bits_target_address = _ram_ext_R0_data[104:73];
  assign io_deq_bits_branch_valid = _ram_ext_R0_data[105];
  assign io_deq_bits_address = _ram_ext_R0_data[137:106];
  assign io_deq_bits_memory_type = _ram_ext_R0_data[139:138];
  assign io_deq_bits_access_width = _ram_ext_R0_data[141:140];
  assign io_deq_bits_is_unsigned = _ram_ext_R0_data[142];
  assign io_deq_bits_wr_data = _ram_ext_R0_data[174:143];
  assign io_deq_bits_MOB_index = _ram_ext_R0_data[178:175];
  assign io_deq_bits_ROB_index = _ram_ext_R0_data[184:179];
  assign io_deq_bits_FTQ_index = _ram_ext_R0_data[188:185];
  assign io_deq_bits_fetch_packet_index = _ram_ext_R0_data[190:189];
  assign io_deq_bits_exception = _ram_ext_R0_data[191];
  assign io_deq_bits_memory_violation = _ram_ext_R0_data[192];
endmodule

