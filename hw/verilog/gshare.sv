// Generated by CIRCT firtool-1.76.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module gshare(	// src/main/scala/Frontend/BP/gshare.scala:70:7
  input         clock,	// src/main/scala/Frontend/BP/gshare.scala:70:7
  input  [15:0] io_predict_GHR,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  input  [31:0] io_predict_PC,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  output        io_T_NT,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  input         io_commit_valid,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  input  [31:0] io_commit_bits_fetch_PC,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  input         io_commit_bits_T_NT,	// src/main/scala/Frontend/BP/gshare.scala:74:16
  input  [15:0] io_commit_bits_GHR	// src/main/scala/Frontend/BP/gshare.scala:74:16
);

  wire [15:0] _PHT_io_readDataA;	// src/main/scala/Frontend/BP/gshare.scala:107:21
  wire [15:0] _PHT_io_readDataB;	// src/main/scala/Frontend/BP/gshare.scala:107:21
  wire [15:0] hashed_predict_addr = io_predict_PC[15:0] ^ io_predict_GHR;	// src/main/scala/Frontend/BP/gshare.scala:104:43, :110:{41,57}
  wire [15:0] hashed_commit_addr = io_commit_bits_fetch_PC[15:0] ^ io_commit_bits_GHR;	// src/main/scala/Frontend/BP/gshare.scala:105:43, :111:{51,67}
  reg  [15:0] PHT_io_addrC_REG;	// src/main/scala/Frontend/BP/gshare.scala:128:35
  reg         PHT_io_writeEnableC_REG;	// src/main/scala/Frontend/BP/gshare.scala:130:35
  reg         REG;	// src/main/scala/Frontend/BP/gshare.scala:136:17
  always @(posedge clock) begin	// src/main/scala/Frontend/BP/gshare.scala:70:7
    PHT_io_addrC_REG <= hashed_commit_addr;	// src/main/scala/Frontend/BP/gshare.scala:105:43, :128:35
    PHT_io_writeEnableC_REG <= io_commit_valid;	// src/main/scala/Frontend/BP/gshare.scala:130:35
    REG <= io_commit_bits_T_NT;	// src/main/scala/Frontend/BP/gshare.scala:136:17
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/Frontend/BP/gshare.scala:70:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/Frontend/BP/gshare.scala:70:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/Frontend/BP/gshare.scala:70:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/Frontend/BP/gshare.scala:70:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/Frontend/BP/gshare.scala:70:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/Frontend/BP/gshare.scala:70:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/Frontend/BP/gshare.scala:70:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Frontend/BP/gshare.scala:70:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/Frontend/BP/gshare.scala:70:7
        PHT_io_addrC_REG = _RANDOM[/*Zero width*/ 1'b0][16:1];	// src/main/scala/Frontend/BP/gshare.scala:70:7, :128:35
        PHT_io_writeEnableC_REG = _RANDOM[/*Zero width*/ 1'b0][17];	// src/main/scala/Frontend/BP/gshare.scala:70:7, :128:35, :130:35
        REG = _RANDOM[/*Zero width*/ 1'b0][18];	// src/main/scala/Frontend/BP/gshare.scala:70:7, :128:35, :136:17
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/Frontend/BP/gshare.scala:70:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/Frontend/BP/gshare.scala:70:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  PHT_memory PHT (	// src/main/scala/Frontend/BP/gshare.scala:107:21
    .clock           (clock),
    .io_addrA        (hashed_predict_addr),	// src/main/scala/Frontend/BP/gshare.scala:104:43
    .io_readDataA    (_PHT_io_readDataA),
    .io_addrB        (hashed_commit_addr),	// src/main/scala/Frontend/BP/gshare.scala:105:43
    .io_readDataB    (_PHT_io_readDataB),
    .io_addrC        (PHT_io_addrC_REG),	// src/main/scala/Frontend/BP/gshare.scala:128:35
    .io_writeDataC
      (REG
         ? (_PHT_io_readDataB[1:0] != 2'h3
              ? _PHT_io_readDataB[1:0] + 2'h1
              : _PHT_io_readDataB[1:0])
         : (|(_PHT_io_readDataB[1:0]))
             ? _PHT_io_readDataB[1:0] - 2'h1
             : _PHT_io_readDataB[1:0]),	// src/main/scala/Frontend/BP/gshare.scala:107:21, :125:18, :136:{17,47}, :137:{27,33}, :138:{34,50}, :140:34, :143:{27,33}, :144:{34,50}, :146:34
    .io_writeEnableC (PHT_io_writeEnableC_REG)	// src/main/scala/Frontend/BP/gshare.scala:130:35
  );	// src/main/scala/Frontend/BP/gshare.scala:107:21
  assign io_T_NT = _PHT_io_readDataA[1];	// src/main/scala/Frontend/BP/gshare.scala:70:7, :107:21, :120:36
endmodule

