// Generated by CIRCT firtool-1.76.0
module gshare(
  input         clock,
  input  [15:0] io_predict_GHR,
  input  [31:0] io_predict_PC,
  output        io_T_NT,
  input         io_commit_valid,
  input  [31:0] io_commit_bits_fetch_PC,
  input         io_commit_bits_T_NT,
  input  [15:0] io_commit_bits_GHR
);

  wire [15:0] _PHT_io_readDataA;
  wire [15:0] _PHT_io_readDataB;
  wire [15:0] hashed_predict_addr = io_predict_PC[15:0] ^ io_predict_GHR;
  wire [15:0] hashed_commit_addr = io_commit_bits_fetch_PC[15:0] ^ io_commit_bits_GHR;
  reg  [15:0] PHT_io_addrC_REG;
  reg         PHT_io_writeEnableC_REG;
  reg         REG;
  always @(posedge clock) begin
    PHT_io_addrC_REG <= hashed_commit_addr;
    PHT_io_writeEnableC_REG <= io_commit_valid;
    REG <= io_commit_bits_T_NT;
  end // always @(posedge)
  PHT_memory PHT (
    .clock           (clock),
    .io_addrA        (hashed_predict_addr),
    .io_readDataA    (_PHT_io_readDataA),
    .io_addrB        (hashed_commit_addr),
    .io_readDataB    (_PHT_io_readDataB),
    .io_addrC        (PHT_io_addrC_REG),
    .io_writeDataC
      (REG
         ? (_PHT_io_readDataB[1:0] != 2'h3
              ? _PHT_io_readDataB[1:0] + 2'h1
              : _PHT_io_readDataB[1:0])
         : (|(_PHT_io_readDataB[1:0]))
             ? _PHT_io_readDataB[1:0] - 2'h1
             : _PHT_io_readDataB[1:0]),
    .io_writeEnableC (PHT_io_writeEnableC_REG)
  );
  assign io_T_NT = _PHT_io_readDataA[1];
endmodule

