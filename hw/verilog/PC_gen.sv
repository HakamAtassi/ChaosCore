// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module PC_gen(
  input         clock,
                reset,
                io_commit_valid,
  input  [31:0] io_commit_bits_fetch_PC,
  input         io_commit_bits_T_NT,
  input  [5:0]  io_commit_bits_ROB_index,
  input  [2:0]  io_commit_bits_br_type,
  input  [1:0]  io_commit_bits_fetch_packet_index,
  input         io_commit_bits_is_misprediction,
  input  [31:0] io_commit_bits_expected_PC,
  input  [15:0] io_commit_bits_GHR,
  input  [6:0]  io_commit_bits_TOS,
                io_commit_bits_NEXT,
  input  [7:0]  io_commit_bits_free_list_front_pointer,
  input  [4:0]  io_commit_bits_RD_0,
                io_commit_bits_RD_1,
                io_commit_bits_RD_2,
                io_commit_bits_RD_3,
  input  [6:0]  io_commit_bits_PRD_0,
                io_commit_bits_PRD_1,
                io_commit_bits_PRD_2,
                io_commit_bits_PRD_3,
  input         io_commit_bits_RD_valid_0,
                io_commit_bits_RD_valid_1,
                io_commit_bits_RD_valid_2,
                io_commit_bits_RD_valid_3,
                io_revert_valid,
  input  [31:0] io_revert_bits_PC,
  output        io_prediction_ready,
  input         io_prediction_valid,
                io_prediction_bits_hit,
  input  [31:0] io_prediction_bits_target,
  input  [2:0]  io_prediction_bits_br_type,
  input         io_prediction_bits_T_NT,
  input  [6:0]  io_RAS_read_NEXT,
                io_RAS_read_TOS,
  input  [31:0] io_RAS_read_ret_addr,
  input         io_PC_next_ready,
  output        io_PC_next_valid,
  output [31:0] io_PC_next_bits_addr,
                io_PC_next_bits_wr_data,
  output        io_PC_next_bits_wr_en
);

  reg  [31:0] PC_reg;
  reg  [31:0] flush_PC_reg;
  wire        is_misprediction = io_commit_valid & io_commit_bits_is_misprediction;
  wire        use_RAS = io_prediction_bits_br_type == 3'h4 & io_prediction_valid;
  wire        use_BTB = io_prediction_bits_hit & io_prediction_valid & ~use_RAS;
  wire        flushing_event = is_misprediction | io_revert_valid;
  reg         REG;
  reg         REG_1;
  wire [31:0] PC_mux =
    use_BTB
      ? io_prediction_bits_target
      : use_RAS ? io_RAS_read_ret_addr : REG_1 ? flush_PC_reg : PC_reg;
  always @(posedge clock) begin
    if (reset) begin
      PC_reg <= 32'h0;
      flush_PC_reg <= 32'h0;
    end
    else begin
      if (io_PC_next_ready & ~flushing_event)
        PC_reg <= PC_mux + {26'h0, 6'h10 - {2'h0, PC_mux[3:0]}};
      flush_PC_reg <=
        is_misprediction
          ? io_commit_bits_expected_PC
          : io_revert_valid ? io_revert_bits_PC : 32'h0;
    end
    REG <= flushing_event;
    REG_1 <= flushing_event;
  end // always @(posedge)
  assign io_prediction_ready = io_PC_next_ready;
  assign io_PC_next_valid = ~flushing_event;
  assign io_PC_next_bits_addr = PC_mux;
  assign io_PC_next_bits_wr_data = 32'h0;
  assign io_PC_next_bits_wr_en = 1'h0;
endmodule

