// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module CSR_FU(
  input         clock,
                reset,
                io_flush_valid,
                io_flush_bits_is_exception,
  input  [4:0]  io_flush_bits_exception_cause,
  input  [31:0] io_flush_bits_flushing_PC,
  input         io_FU_input_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_PRD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_RS1,
  input  [20:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [1:0]  io_FU_input_bits_decoded_instruction_packet_index,
  input  [5:0]  io_FU_input_bits_decoded_instruction_ROB_index,
  input  [3:0]  io_FU_input_bits_decoded_instruction_MOB_index,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input         io_FU_input_bits_decoded_instruction_needs_ALU,
                io_FU_input_bits_decoded_instruction_needs_branch_unit,
                io_FU_input_bits_decoded_instruction_needs_CSRs,
                io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
                io_FU_input_bits_decoded_instruction_FENCE,
                io_FU_input_bits_decoded_instruction_ECALL,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_fetch_PC,
  output        io_FU_output_valid,
  output [6:0]  io_FU_output_bits_PRD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid,
  output [31:0] io_FU_output_bits_fetch_PC,
  output        io_FU_output_bits_branch_taken,
  output [31:0] io_FU_output_bits_target_address,
  output        io_FU_output_bits_branch_valid,
                io_FU_output_bits_exception,
  output [4:0]  io_FU_output_bits_exception_cause,
  output [3:0]  io_FU_output_bits_MOB_index,
  output [5:0]  io_FU_output_bits_ROB_index,
  output [1:0]  io_FU_output_bits_fetch_packet_index,
  input         io_partial_commit_valid_0,
                io_partial_commit_valid_1,
                io_partial_commit_valid_2,
                io_partial_commit_valid_3,
                io_commit_valid,
  output [29:0] CSR_port_mtvec_BASE,
  output [1:0]  CSR_port_mtvec_MODE
);

  wire        CSR_input_valid;
  wire [31:0] instruction_PC =
    io_FU_input_bits_fetch_PC
    + {29'h0, io_FU_input_bits_decoded_instruction_packet_index, 1'h0};
  wire [11:0] CSR_addr = io_FU_input_bits_decoded_instruction_IMM[11:0];
  wire        _REMU_T = io_FU_input_bits_decoded_instruction_instructionType == 5'hC;
  wire        _SLTU_T_1 = io_FU_input_bits_decoded_instruction_instructionType == 5'h4;
  wire        _is_CSRRW_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
  wire        SLL =
    (_REMU_T | _SLTU_T_1) & _is_CSRRW_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY;
  wire        _is_CSRRWI_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5;
  wire        SRL =
    (_REMU_T | _SLTU_T_1) & _is_CSRRWI_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY
    & ~io_FU_input_bits_decoded_instruction_SUBTRACT;
  wire        SRA =
    (_REMU_T | _SLTU_T_1) & _is_CSRRWI_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY
    & io_FU_input_bits_decoded_instruction_SUBTRACT;
  wire        AUIPC =
    io_FU_input_bits_decoded_instruction_instructionType == 5'h5
    & ~io_FU_input_bits_decoded_instruction_MULTIPLY;
  wire        ALU_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_ALU;
  wire        branch_unit_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_branch_unit;
  wire        mult_unit_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_MULTIPLY;
  assign CSR_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_CSRs;
  wire        input_valid = CSR_input_valid;
  reg         io_FU_output_valid_REG;
  wire [1:0]  input_CSR_privilage = io_FU_input_bits_decoded_instruction_IMM[11:10];
  wire        input_CSR_read_request = |io_FU_input_bits_decoded_instruction_PRD;
  wire        input_CSR_write_request =
    io_FU_input_bits_decoded_instruction_needs_CSRs & _is_CSRRW_T
    | io_FU_input_bits_decoded_instruction_needs_CSRs & _is_CSRRWI_T
    | io_FU_input_bits_decoded_instruction_needs_CSRs
    & (|io_FU_input_bits_decoded_instruction_RS1);
  reg  [31:0] cycle_reg;
  reg  [31:0] instret_reg;
  reg  [31:0] cycleh_reg;
  reg  [31:0] instreth_reg;
  reg  [6:0]  mvendorid_reg_Offset;
  reg  [24:0] mvendorid_reg_Bank;
  reg  [31:0] marchid_reg_archID;
  reg  [31:0] mimpid_reg;
  reg  [31:0] mhartid_reg_hartid;
  reg  [31:0] mconfigptr_reg_ptr;
  reg         mstatus_reg_SD;
  reg  [6:0]  mstatus_reg_WPRI1;
  reg         mstatus_reg_TSR;
  reg         mstatus_reg_TW;
  reg         mstatus_reg_TVM;
  reg         mstatus_reg_MXR;
  reg         mstatus_reg_SUM;
  reg         mstatus_reg_MPRV;
  reg  [1:0]  mstatus_reg_XS;
  reg  [1:0]  mstatus_reg_FS;
  reg  [1:0]  mstatus_reg_MPP;
  reg         mstatus_reg_SPP;
  reg         mstatus_reg_MPIE;
  reg         mstatus_reg_UBE;
  reg         mstatus_reg_SPIE;
  reg         mstatus_reg_WPRI2;
  reg         mstatus_reg_MIE;
  reg         mstatus_reg_SIE;
  reg         misa_reg_A;
  reg         misa_reg_B;
  reg         misa_reg_C;
  reg         misa_reg_D;
  reg         misa_reg_E;
  reg         misa_reg_F;
  reg         misa_reg_G;
  reg         misa_reg_H;
  reg         misa_reg_I;
  reg         misa_reg_J;
  reg         misa_reg_K;
  reg         misa_reg_L;
  reg         misa_reg_M;
  reg         misa_reg_N;
  reg         misa_reg_O;
  reg         misa_reg_P;
  reg         misa_reg_Q;
  reg         misa_reg_R;
  reg         misa_reg_S;
  reg         misa_reg_T;
  reg         misa_reg_U;
  reg         misa_reg_V;
  reg         misa_reg_W;
  reg         misa_reg_X;
  reg         misa_reg_Y;
  reg         misa_reg_Z;
  reg  [3:0]  misa_reg_WPRI;
  reg  [1:0]  misa_reg_MXL;
  reg  [31:0] medeleg_reg;
  reg  [31:0] mideleg_reg;
  reg  [19:0] mie_reg_WPRI1;
  reg         mie_reg_MEIE;
  reg         mie_reg_SEIE;
  reg         mie_reg_UEIE;
  reg  [2:0]  mie_reg_WPRI2;
  reg         mie_reg_MTIE;
  reg         mie_reg_STIE;
  reg         mie_reg_UTIE;
  reg         mie_reg_MSIE;
  reg         mie_reg_SSIE;
  reg         mie_reg_USIE;
  reg  [29:0] mtvec_reg_BASE;
  reg  [1:0]  mtvec_reg_MODE;
  reg  [31:0] mcounteren_reg;
  reg  [31:0] mstatush_reg;
  reg  [31:0] mscratch_reg_scratch;
  reg  [31:0] mepc_reg_PC;
  reg         mcause_reg_INTERRUPT;
  reg  [30:0] mcause_reg_CODE;
  reg  [31:0] mtval_reg_badaddr;
  reg  [19:0] mip_reg_WPRI1;
  reg         mip_reg_MEIP;
  reg         mip_reg_SEIP;
  reg         mip_reg_UEIP;
  reg  [2:0]  mip_reg_WPRI2;
  reg         mip_reg_MTIP;
  reg         mip_reg_STIP;
  reg         mip_reg_UTIP;
  reg         mip_reg_MSIP;
  reg         mip_reg_SSIP;
  reg         mip_reg_USIP;
  reg  [31:0] mtinst_reg;
  reg  [31:0] mtval2_reg;
  reg  [31:0] mnscratch_reg;
  reg  [31:0] mnepc_reg;
  reg  [31:0] mncause_reg;
  reg  [31:0] mnstatus_reg;
  reg  [31:0] mcycle_reg;
  reg  [31:0] minstret_reg;
  wire [31:0] user_mode_CSR_read_resp =
    (CSR_addr == 12'hC00 ? cycle_reg : 32'h0)
    | (CSR_addr == 12'hC82 ? instreth_reg : 32'h0)
    | (CSR_addr == 12'hC80 ? cycleh_reg : 32'h0)
    | (CSR_addr == 12'hC02 ? instret_reg : 32'h0);
  wire        machine_mode_CSR_OH_0 = CSR_addr == 12'hF12;
  wire        machine_mode_CSR_OH_1 = CSR_addr == 12'h744;
  wire        machine_mode_CSR_OH_2 = CSR_addr == 12'h302;
  wire        machine_mode_CSR_OH_3 = CSR_addr == 12'h306;
  wire        machine_mode_CSR_OH_4 = CSR_addr == 12'hF11;
  wire        machine_mode_CSR_OH_5 = CSR_addr == 12'h34A;
  wire        machine_mode_CSR_OH_6 = CSR_addr == 12'h310;
  wire        machine_mode_CSR_OH_7 = CSR_addr == 12'h300;
  wire        machine_mode_CSR_OH_8 = CSR_addr == 12'hF13;
  wire        machine_mode_CSR_OH_9 = CSR_addr == 12'h340;
  wire        machine_mode_CSR_OH_10 = CSR_addr == 12'h342;
  wire        machine_mode_CSR_OH_11 = CSR_addr == 12'h742;
  wire        machine_mode_CSR_OH_12 = CSR_addr == 12'hB82;
  wire        machine_mode_CSR_OH_13 = CSR_addr == 12'h740;
  wire        machine_mode_CSR_OH_14 = CSR_addr == 12'h741;
  wire        machine_mode_CSR_OH_15 = CSR_addr == 12'h305;
  wire        machine_mode_CSR_OH_16 = CSR_addr == 12'h34B;
  wire        machine_mode_CSR_OH_17 = CSR_addr == 12'h304;
  wire        machine_mode_CSR_OH_18 = CSR_addr == 12'h301;
  wire        machine_mode_CSR_OH_19 = CSR_addr == 12'hF15;
  wire        machine_mode_CSR_OH_20 = CSR_addr == 12'hB00;
  wire        machine_mode_CSR_OH_21 = CSR_addr == 12'h344;
  wire        machine_mode_CSR_OH_22 = CSR_addr == 12'hB02;
  wire        machine_mode_CSR_OH_23 = CSR_addr == 12'h303;
  wire        machine_mode_CSR_OH_24 = CSR_addr == 12'hF14;
  wire        machine_mode_CSR_OH_25 = CSR_addr == 12'h341;
  wire        machine_mode_CSR_OH_26 = CSR_addr == 12'h343;
  wire [31:0] _machine_mode_CSR_read_resp_T_39 =
    (machine_mode_CSR_OH_0 ? marchid_reg_archID : 32'h0)
    | (machine_mode_CSR_OH_1 ? mnstatus_reg : 32'h0)
    | (machine_mode_CSR_OH_2 ? medeleg_reg : 32'h0)
    | (machine_mode_CSR_OH_3 ? mcounteren_reg : 32'h0)
    | (machine_mode_CSR_OH_4 ? {mvendorid_reg_Offset, mvendorid_reg_Bank} : 32'h0)
    | (machine_mode_CSR_OH_5 ? mtinst_reg : 32'h0)
    | (machine_mode_CSR_OH_6 ? mstatush_reg : 32'h0);
  wire [31:0] machine_mode_CSR_read_resp =
    {_machine_mode_CSR_read_resp_T_39[31:27],
     _machine_mode_CSR_read_resp_T_39[26:0]
       | (machine_mode_CSR_OH_7
            ? {mstatus_reg_SD,
               mstatus_reg_WPRI1,
               mstatus_reg_TSR,
               mstatus_reg_TW,
               mstatus_reg_TVM,
               mstatus_reg_MXR,
               mstatus_reg_SUM,
               mstatus_reg_MPRV,
               mstatus_reg_XS,
               mstatus_reg_FS,
               mstatus_reg_MPP,
               mstatus_reg_SPP,
               mstatus_reg_MPIE,
               mstatus_reg_UBE,
               mstatus_reg_SPIE,
               mstatus_reg_WPRI2,
               mstatus_reg_MIE,
               mstatus_reg_SIE}
            : 27'h0)} | (machine_mode_CSR_OH_8 ? mimpid_reg : 32'h0)
    | (machine_mode_CSR_OH_9 ? mscratch_reg_scratch : 32'h0)
    | (machine_mode_CSR_OH_10 ? {mcause_reg_INTERRUPT, mcause_reg_CODE} : 32'h0)
    | (machine_mode_CSR_OH_11 ? mncause_reg : 32'h0)
    | (machine_mode_CSR_OH_12 ? minstret_reg : 32'h0)
    | (machine_mode_CSR_OH_13 ? mnscratch_reg : 32'h0)
    | (machine_mode_CSR_OH_14 ? mnepc_reg : 32'h0)
    | (machine_mode_CSR_OH_15 ? {mtvec_reg_BASE, mtvec_reg_MODE} : 32'h0)
    | (machine_mode_CSR_OH_16 ? mtval2_reg : 32'h0)
    | (machine_mode_CSR_OH_17
         ? {mie_reg_WPRI1,
            mie_reg_MEIE,
            mie_reg_SEIE,
            mie_reg_UEIE,
            mie_reg_WPRI2,
            mie_reg_MTIE,
            mie_reg_STIE,
            mie_reg_UTIE,
            mie_reg_MSIE,
            mie_reg_SSIE,
            mie_reg_USIE}
         : 32'h0)
    | (machine_mode_CSR_OH_18
         ? {misa_reg_A,
            misa_reg_B,
            misa_reg_C,
            misa_reg_D,
            misa_reg_E,
            misa_reg_F,
            misa_reg_G,
            misa_reg_H,
            misa_reg_I,
            misa_reg_J,
            misa_reg_K,
            misa_reg_L,
            misa_reg_M,
            misa_reg_N,
            misa_reg_O,
            misa_reg_P,
            misa_reg_Q,
            misa_reg_R,
            misa_reg_S,
            misa_reg_T,
            misa_reg_U,
            misa_reg_V,
            misa_reg_W,
            misa_reg_X,
            misa_reg_Y,
            misa_reg_Z,
            misa_reg_WPRI,
            misa_reg_MXL}
         : 32'h0) | (machine_mode_CSR_OH_19 ? mconfigptr_reg_ptr : 32'h0)
    | (machine_mode_CSR_OH_20 ? mcycle_reg : 32'h0)
    | (machine_mode_CSR_OH_21
         ? {mip_reg_WPRI1,
            mip_reg_MEIP,
            mip_reg_SEIP,
            mip_reg_UEIP,
            mip_reg_WPRI2,
            mip_reg_MTIP,
            mip_reg_STIP,
            mip_reg_UTIP,
            mip_reg_MSIP,
            mip_reg_SSIP,
            mip_reg_USIP}
         : 32'h0) | (machine_mode_CSR_OH_22 ? minstret_reg : 32'h0)
    | (machine_mode_CSR_OH_23 ? mideleg_reg : 32'h0)
    | (machine_mode_CSR_OH_24 ? mhartid_reg_hartid : 32'h0)
    | (machine_mode_CSR_OH_25 ? mepc_reg_PC : 32'h0)
    | (machine_mode_CSR_OH_26 ? mtval_reg_badaddr : 32'h0);
  reg  [31:0] CSR_out;
  reg         io_FU_output_bits_branch_valid_REG;
  reg         io_FU_output_bits_branch_taken_REG;
  reg  [31:0] io_FU_output_bits_target_address_REG;
  reg  [31:0] io_FU_output_bits_fetch_PC_REG;
  reg  [1:0]  io_FU_output_bits_fetch_packet_index_REG;
  reg  [6:0]  io_FU_output_bits_PRD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg  [3:0]  io_FU_output_bits_MOB_index_REG;
  reg  [5:0]  io_FU_output_bits_ROB_index_REG;
  reg         io_FU_output_bits_exception_REG;
  reg  [4:0]  io_FU_output_bits_exception_cause_REG;
  always @(posedge clock) begin
    automatic logic _sret_T_7 = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h0;
    automatic logic _sret_T =
      io_FU_input_bits_decoded_instruction_instructionType == 5'h1C;
    automatic logic _sret_T_1 = io_FU_input_bits_decoded_instruction_RS1 == 7'h0;
    automatic logic mret_sret =
      _sret_T & _sret_T_1 & ~(|io_FU_input_bits_decoded_instruction_PRD)
      & io_FU_input_bits_decoded_instruction_IMM == 21'h302 & _sret_T_7 | _sret_T
      & _sret_T_1 & ~(|io_FU_input_bits_decoded_instruction_PRD)
      & io_FU_input_bits_decoded_instruction_IMM == 21'h102 & _sret_T_7;
    io_FU_output_valid_REG <=
      input_valid & ~io_flush_valid | io_FU_input_bits_decoded_instruction_FENCE;
    if (&input_CSR_privilage)
      CSR_out <= user_mode_CSR_read_resp;
    else if (input_CSR_privilage == 2'h0)
      CSR_out <= machine_mode_CSR_read_resp;
    io_FU_output_bits_branch_valid_REG <= mret_sret;
    io_FU_output_bits_branch_taken_REG <= mret_sret;
    io_FU_output_bits_target_address_REG <= mepc_reg_PC;
    io_FU_output_bits_fetch_PC_REG <= io_FU_input_bits_fetch_PC;
    io_FU_output_bits_fetch_packet_index_REG <=
      io_FU_input_bits_decoded_instruction_packet_index;
    io_FU_output_bits_PRD_REG <= io_FU_input_bits_decoded_instruction_PRD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits_decoded_instruction_RD_valid;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits_decoded_instruction_MOB_index;
    io_FU_output_bits_ROB_index_REG <= io_FU_input_bits_decoded_instruction_ROB_index;
    io_FU_output_bits_exception_REG <= io_FU_input_bits_decoded_instruction_ECALL;
    io_FU_output_bits_exception_cause_REG <=
      io_FU_input_bits_decoded_instruction_ECALL ? 5'hB : 5'h0;
    if (reset) begin
      cycle_reg <= 32'h0;
      instret_reg <= 32'h0;
      cycleh_reg <= 32'h0;
      instreth_reg <= 32'h0;
      mvendorid_reg_Offset <= 7'h0;
      mvendorid_reg_Bank <= 25'h0;
      marchid_reg_archID <= 32'h0;
      mimpid_reg <= 32'h0;
      mhartid_reg_hartid <= 32'h0;
      mconfigptr_reg_ptr <= 32'h0;
      mstatus_reg_SD <= 1'h0;
      mstatus_reg_WPRI1 <= 7'h0;
      mstatus_reg_TSR <= 1'h0;
      mstatus_reg_TW <= 1'h0;
      mstatus_reg_TVM <= 1'h0;
      mstatus_reg_MXR <= 1'h0;
      mstatus_reg_SUM <= 1'h0;
      mstatus_reg_MPRV <= 1'h0;
      mstatus_reg_XS <= 2'h0;
      mstatus_reg_FS <= 2'h0;
      mstatus_reg_MPP <= 2'h0;
      mstatus_reg_SPP <= 1'h0;
      mstatus_reg_MPIE <= 1'h0;
      mstatus_reg_UBE <= 1'h0;
      mstatus_reg_SPIE <= 1'h0;
      mstatus_reg_WPRI2 <= 1'h0;
      mstatus_reg_MIE <= 1'h0;
      mstatus_reg_SIE <= 1'h0;
      misa_reg_A <= 1'h0;
      misa_reg_B <= 1'h0;
      misa_reg_C <= 1'h0;
      misa_reg_D <= 1'h0;
      misa_reg_E <= 1'h0;
      misa_reg_F <= 1'h0;
      misa_reg_G <= 1'h0;
      misa_reg_H <= 1'h0;
      misa_reg_I <= 1'h1;
      misa_reg_J <= 1'h0;
      misa_reg_K <= 1'h0;
      misa_reg_L <= 1'h0;
      misa_reg_M <= 1'h1;
      misa_reg_N <= 1'h0;
      misa_reg_O <= 1'h0;
      misa_reg_P <= 1'h0;
      misa_reg_Q <= 1'h0;
      misa_reg_R <= 1'h0;
      misa_reg_S <= 1'h0;
      misa_reg_T <= 1'h0;
      misa_reg_U <= 1'h0;
      misa_reg_V <= 1'h1;
      misa_reg_W <= 1'h0;
      misa_reg_X <= 1'h0;
      misa_reg_Y <= 1'h0;
      misa_reg_Z <= 1'h0;
      misa_reg_WPRI <= 4'h0;
      misa_reg_MXL <= 2'h1;
      medeleg_reg <= 32'h0;
      mideleg_reg <= 32'h0;
      mie_reg_WPRI1 <= 20'h0;
      mie_reg_MEIE <= 1'h0;
      mie_reg_SEIE <= 1'h0;
      mie_reg_UEIE <= 1'h0;
      mie_reg_WPRI2 <= 3'h0;
      mie_reg_MTIE <= 1'h0;
      mie_reg_STIE <= 1'h0;
      mie_reg_UTIE <= 1'h0;
      mie_reg_MSIE <= 1'h0;
      mie_reg_SSIE <= 1'h0;
      mie_reg_USIE <= 1'h0;
      mtvec_reg_BASE <= 30'h0;
      mtvec_reg_MODE <= 2'h0;
      mcounteren_reg <= 32'h0;
      mstatush_reg <= 32'h0;
      mscratch_reg_scratch <= 32'h0;
      mepc_reg_PC <= 32'h0;
      mcause_reg_INTERRUPT <= 1'h0;
      mcause_reg_CODE <= 31'h0;
      mtval_reg_badaddr <= 32'h0;
      mip_reg_WPRI1 <= 20'h0;
      mip_reg_MEIP <= 1'h0;
      mip_reg_SEIP <= 1'h0;
      mip_reg_UEIP <= 1'h0;
      mip_reg_WPRI2 <= 3'h0;
      mip_reg_MTIP <= 1'h0;
      mip_reg_STIP <= 1'h0;
      mip_reg_UTIP <= 1'h0;
      mip_reg_MSIP <= 1'h0;
      mip_reg_SSIP <= 1'h0;
      mip_reg_USIP <= 1'h0;
      mtinst_reg <= 32'h0;
      mtval2_reg <= 32'h0;
      mnscratch_reg <= 32'h0;
      mnepc_reg <= 32'h0;
      mncause_reg <= 32'h0;
      mnstatus_reg <= 32'h0;
      mcycle_reg <= 32'h0;
      minstret_reg <= 32'h0;
    end
    else begin
      automatic logic [63:0] _counter_new_T = {cycleh_reg, cycle_reg} + 64'h1;
      automatic logic [1:0]  _GEN;
      automatic logic [1:0]  _GEN_0;
      automatic logic [1:0]  _GEN_1;
      automatic logic [1:0]  _GEN_2;
      automatic logic        _GEN_3;
      _GEN = {1'h0, io_partial_commit_valid_0};
      _GEN_0 = {1'h0, io_partial_commit_valid_1};
      _GEN_1 = {1'h0, io_partial_commit_valid_2};
      _GEN_2 = {1'h0, io_partial_commit_valid_3};
      _GEN_3 = input_CSR_write_request & machine_mode_CSR_OH_10;
      cycle_reg <= _counter_new_T[31:0];
      if (io_commit_valid) begin
        automatic logic [63:0] _counter_new_T_2;
        _counter_new_T_2 =
          {instreth_reg, instret_reg}
          + {61'h0, {1'h0, _GEN + _GEN_0} + {1'h0, _GEN_1 + _GEN_2}};
        instret_reg <= _counter_new_T_2[63:32];
        instreth_reg <= _counter_new_T_2[31:0];
      end
      cycleh_reg <= _counter_new_T[63:32];
      if (input_CSR_write_request & machine_mode_CSR_OH_4) begin
        mvendorid_reg_Offset <= io_FU_input_bits_RS1_data[31:25];
        mvendorid_reg_Bank <= io_FU_input_bits_RS1_data[24:0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_0)
        marchid_reg_archID <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_8)
        mimpid_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_24)
        mhartid_reg_hartid <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_19)
        mconfigptr_reg_ptr <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_7) begin
        mstatus_reg_SD <= io_FU_input_bits_RS1_data[26];
        mstatus_reg_WPRI1 <= io_FU_input_bits_RS1_data[25:19];
        mstatus_reg_TSR <= io_FU_input_bits_RS1_data[18];
        mstatus_reg_TW <= io_FU_input_bits_RS1_data[17];
        mstatus_reg_TVM <= io_FU_input_bits_RS1_data[16];
        mstatus_reg_MXR <= io_FU_input_bits_RS1_data[15];
        mstatus_reg_SUM <= io_FU_input_bits_RS1_data[14];
        mstatus_reg_MPRV <= io_FU_input_bits_RS1_data[13];
        mstatus_reg_XS <= io_FU_input_bits_RS1_data[12:11];
        mstatus_reg_FS <= io_FU_input_bits_RS1_data[10:9];
        mstatus_reg_MPP <= io_FU_input_bits_RS1_data[8:7];
        mstatus_reg_SPP <= io_FU_input_bits_RS1_data[6];
        mstatus_reg_MPIE <= io_FU_input_bits_RS1_data[5];
        mstatus_reg_UBE <= io_FU_input_bits_RS1_data[4];
        mstatus_reg_SPIE <= io_FU_input_bits_RS1_data[3];
        mstatus_reg_WPRI2 <= io_FU_input_bits_RS1_data[2];
        mstatus_reg_MIE <= io_FU_input_bits_RS1_data[1];
        mstatus_reg_SIE <= io_FU_input_bits_RS1_data[0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_18) begin
        misa_reg_A <= io_FU_input_bits_RS1_data[31];
        misa_reg_B <= io_FU_input_bits_RS1_data[30];
        misa_reg_C <= io_FU_input_bits_RS1_data[29];
        misa_reg_D <= io_FU_input_bits_RS1_data[28];
        misa_reg_E <= io_FU_input_bits_RS1_data[27];
        misa_reg_F <= io_FU_input_bits_RS1_data[26];
        misa_reg_G <= io_FU_input_bits_RS1_data[25];
        misa_reg_H <= io_FU_input_bits_RS1_data[24];
        misa_reg_I <= io_FU_input_bits_RS1_data[23];
        misa_reg_J <= io_FU_input_bits_RS1_data[22];
        misa_reg_K <= io_FU_input_bits_RS1_data[21];
        misa_reg_L <= io_FU_input_bits_RS1_data[20];
        misa_reg_M <= io_FU_input_bits_RS1_data[19];
        misa_reg_N <= io_FU_input_bits_RS1_data[18];
        misa_reg_O <= io_FU_input_bits_RS1_data[17];
        misa_reg_P <= io_FU_input_bits_RS1_data[16];
        misa_reg_Q <= io_FU_input_bits_RS1_data[15];
        misa_reg_R <= io_FU_input_bits_RS1_data[14];
        misa_reg_S <= io_FU_input_bits_RS1_data[13];
        misa_reg_T <= io_FU_input_bits_RS1_data[12];
        misa_reg_U <= io_FU_input_bits_RS1_data[11];
        misa_reg_V <= io_FU_input_bits_RS1_data[10];
        misa_reg_W <= io_FU_input_bits_RS1_data[9];
        misa_reg_X <= io_FU_input_bits_RS1_data[8];
        misa_reg_Y <= io_FU_input_bits_RS1_data[7];
        misa_reg_Z <= io_FU_input_bits_RS1_data[6];
        misa_reg_WPRI <= io_FU_input_bits_RS1_data[5:2];
        misa_reg_MXL <= io_FU_input_bits_RS1_data[1:0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_2)
        medeleg_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_23)
        mideleg_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_17) begin
        mie_reg_WPRI1 <= io_FU_input_bits_RS1_data[31:12];
        mie_reg_MEIE <= io_FU_input_bits_RS1_data[11];
        mie_reg_SEIE <= io_FU_input_bits_RS1_data[10];
        mie_reg_UEIE <= io_FU_input_bits_RS1_data[9];
        mie_reg_WPRI2 <= io_FU_input_bits_RS1_data[8:6];
        mie_reg_MTIE <= io_FU_input_bits_RS1_data[5];
        mie_reg_STIE <= io_FU_input_bits_RS1_data[4];
        mie_reg_UTIE <= io_FU_input_bits_RS1_data[3];
        mie_reg_MSIE <= io_FU_input_bits_RS1_data[2];
        mie_reg_SSIE <= io_FU_input_bits_RS1_data[1];
        mie_reg_USIE <= io_FU_input_bits_RS1_data[0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_15) begin
        mtvec_reg_BASE <= io_FU_input_bits_RS1_data[31:2];
        mtvec_reg_MODE <= io_FU_input_bits_RS1_data[1:0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_3)
        mcounteren_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_6)
        mstatush_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_9)
        mscratch_reg_scratch <= io_FU_input_bits_RS1_data;
      if (io_flush_bits_is_exception) begin
        mepc_reg_PC <= io_flush_bits_flushing_PC;
        mcause_reg_CODE <= {26'h0, io_flush_bits_exception_cause};
      end
      else begin
        if (input_CSR_write_request & machine_mode_CSR_OH_25)
          mepc_reg_PC <= io_FU_input_bits_RS1_data;
        if (_GEN_3)
          mcause_reg_CODE <= io_FU_input_bits_RS1_data[30:0];
      end
      if (_GEN_3)
        mcause_reg_INTERRUPT <= io_FU_input_bits_RS1_data[31];
      if (input_CSR_write_request & machine_mode_CSR_OH_26)
        mtval_reg_badaddr <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_21) begin
        mip_reg_WPRI1 <= io_FU_input_bits_RS1_data[31:12];
        mip_reg_MEIP <= io_FU_input_bits_RS1_data[11];
        mip_reg_SEIP <= io_FU_input_bits_RS1_data[10];
        mip_reg_UEIP <= io_FU_input_bits_RS1_data[9];
        mip_reg_WPRI2 <= io_FU_input_bits_RS1_data[8:6];
        mip_reg_MTIP <= io_FU_input_bits_RS1_data[5];
        mip_reg_STIP <= io_FU_input_bits_RS1_data[4];
        mip_reg_UTIP <= io_FU_input_bits_RS1_data[3];
        mip_reg_MSIP <= io_FU_input_bits_RS1_data[2];
        mip_reg_SSIP <= io_FU_input_bits_RS1_data[1];
        mip_reg_USIP <= io_FU_input_bits_RS1_data[0];
      end
      if (input_CSR_write_request & machine_mode_CSR_OH_5)
        mtinst_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_16)
        mtval2_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_13)
        mnscratch_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_14)
        mnepc_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_11)
        mncause_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_1)
        mnstatus_reg <= io_FU_input_bits_RS1_data;
      if (input_CSR_write_request & machine_mode_CSR_OH_20)
        mcycle_reg <= io_FU_input_bits_RS1_data;
      else
        mcycle_reg <= mcycle_reg + 32'h1;
      if (input_CSR_write_request & (machine_mode_CSR_OH_22 | machine_mode_CSR_OH_12))
        minstret_reg <= io_FU_input_bits_RS1_data;
      else
        minstret_reg <=
          minstret_reg + {29'h0, {1'h0, _GEN + _GEN_0} + {1'h0, _GEN_1 + _GEN_2}};
    end
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG & ~io_flush_valid;
  assign io_FU_output_bits_PRD = io_FU_output_bits_PRD_REG;
  assign io_FU_output_bits_RD_data = CSR_out;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
  assign io_FU_output_bits_fetch_PC = io_FU_output_bits_fetch_PC_REG;
  assign io_FU_output_bits_branch_taken = io_FU_output_bits_branch_taken_REG;
  assign io_FU_output_bits_target_address = io_FU_output_bits_target_address_REG;
  assign io_FU_output_bits_branch_valid = io_FU_output_bits_branch_valid_REG;
  assign io_FU_output_bits_exception = io_FU_output_bits_exception_REG;
  assign io_FU_output_bits_exception_cause = io_FU_output_bits_exception_cause_REG;
  assign io_FU_output_bits_MOB_index = io_FU_output_bits_MOB_index_REG;
  assign io_FU_output_bits_ROB_index = io_FU_output_bits_ROB_index_REG;
  assign io_FU_output_bits_fetch_packet_index = io_FU_output_bits_fetch_packet_index_REG;
  assign CSR_port_mtvec_BASE = mtvec_reg_BASE;
  assign CSR_port_mtvec_MODE = mtvec_reg_MODE;
endmodule

