// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module CSR_FU(
  input         clock,
                reset,
                io_flush_valid,
                io_FU_input_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_PRD,
  input         io_FU_input_bits_decoded_instruction_RD_valid,
  input  [6:0]  io_FU_input_bits_decoded_instruction_RS1,
  input  [20:0] io_FU_input_bits_decoded_instruction_IMM,
  input  [2:0]  io_FU_input_bits_decoded_instruction_FUNCT3,
  input  [1:0]  io_FU_input_bits_decoded_instruction_packet_index,
  input  [5:0]  io_FU_input_bits_decoded_instruction_ROB_index,
  input  [3:0]  io_FU_input_bits_decoded_instruction_MOB_index,
  input  [4:0]  io_FU_input_bits_decoded_instruction_instructionType,
  input         io_FU_input_bits_decoded_instruction_needs_ALU,
                io_FU_input_bits_decoded_instruction_needs_branch_unit,
                io_FU_input_bits_decoded_instruction_needs_CSRs,
                io_FU_input_bits_decoded_instruction_SUBTRACT,
                io_FU_input_bits_decoded_instruction_MULTIPLY,
  input  [31:0] io_FU_input_bits_RS1_data,
                io_FU_input_bits_fetch_PC,
  output        io_FU_output_valid,
  output [6:0]  io_FU_output_bits_PRD,
  output [31:0] io_FU_output_bits_RD_data,
  output        io_FU_output_bits_RD_valid,
  output [31:0] io_FU_output_bits_fetch_PC,
  output [3:0]  io_FU_output_bits_MOB_index,
  output [5:0]  io_FU_output_bits_ROB_index,
  output [1:0]  io_FU_output_bits_fetch_packet_index,
  input         io_partial_commit_valid_0,
                io_partial_commit_valid_1,
                io_partial_commit_valid_2,
                io_partial_commit_valid_3,
                io_commit_valid
);

  wire        CSR_input_valid;
  wire [31:0] instruction_PC =
    io_FU_input_bits_fetch_PC
    + {28'h0, io_FU_input_bits_decoded_instruction_packet_index, 2'h0};
  wire [11:0] CSR_addr = io_FU_input_bits_decoded_instruction_IMM[11:0];
  wire        _REMU_T = io_FU_input_bits_decoded_instruction_instructionType == 5'hC;
  wire        _SLTU_T_1 = io_FU_input_bits_decoded_instruction_instructionType == 5'h4;
  wire        _is_CSRRW_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h1;
  wire        SLL =
    (_REMU_T | _SLTU_T_1) & _is_CSRRW_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY;
  wire        _is_CSRRWI_T = io_FU_input_bits_decoded_instruction_FUNCT3 == 3'h5;
  wire        SRL =
    (_REMU_T | _SLTU_T_1) & _is_CSRRWI_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY
    & ~io_FU_input_bits_decoded_instruction_SUBTRACT;
  wire        SRA =
    (_REMU_T | _SLTU_T_1) & _is_CSRRWI_T & ~io_FU_input_bits_decoded_instruction_MULTIPLY
    & io_FU_input_bits_decoded_instruction_SUBTRACT;
  wire        AUIPC =
    io_FU_input_bits_decoded_instruction_instructionType == 5'h5
    & ~io_FU_input_bits_decoded_instruction_MULTIPLY;
  wire        ALU_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_ALU;
  wire        branch_unit_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_branch_unit;
  wire        mult_unit_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_MULTIPLY;
  assign CSR_input_valid =
    io_FU_input_valid & io_FU_input_bits_decoded_instruction_needs_CSRs;
  wire        input_valid = CSR_input_valid;
  reg         io_FU_output_valid_REG;
  wire [1:0]  input_CSR_privilage = io_FU_input_bits_decoded_instruction_IMM[11:10];
  wire        input_CSR_read_request = |io_FU_input_bits_decoded_instruction_PRD;
  wire        input_CSR_write_request =
    io_FU_input_bits_decoded_instruction_needs_CSRs & _is_CSRRW_T
    | io_FU_input_bits_decoded_instruction_needs_CSRs & _is_CSRRWI_T
    | io_FU_input_bits_decoded_instruction_needs_CSRs
    & (|io_FU_input_bits_decoded_instruction_RS1);
  reg  [63:0] cycle_reg_reg;
  reg  [63:0] time_reg_reg;
  reg  [63:0] instret_reg_reg;
  wire [31:0] user_mode_CSR_read_resp =
    (CSR_addr == 12'hC00 ? cycle_reg_reg[31:0] : 32'h0)
    | (CSR_addr == 12'hC01 ? time_reg_reg[31:0] : 32'h0)
    | (CSR_addr == 12'hC82 ? instret_reg_reg[63:32] : 32'h0)
    | (CSR_addr == 12'hC80 ? cycle_reg_reg[63:32] : 32'h0)
    | (CSR_addr == 12'hC02 ? instret_reg_reg[31:0] : 32'h0)
    | (CSR_addr == 12'hC81 ? time_reg_reg[63:32] : 32'h0);
  reg  [31:0] mvendorid_reg_reg;
  reg  [31:0] marchid_reg_reg;
  reg  [31:0] mimpid_reg_reg;
  reg  [31:0] mhartid_reg_reg;
  reg  [31:0] mconfigptr_reg_reg;
  reg  [31:0] mstatus_reg_reg;
  reg  [31:0] misa_reg_reg;
  reg  [31:0] medeleg_reg_reg;
  reg  [31:0] mideleg_reg_reg;
  reg  [31:0] mie_reg_reg;
  reg  [31:0] mtvec_reg_reg;
  reg  [31:0] mcounteren_reg_reg;
  reg  [31:0] mstatush_reg_reg;
  reg  [31:0] mscratch_reg_reg;
  reg  [31:0] mepc_reg_reg;
  reg  [31:0] mcause_reg_reg;
  reg  [31:0] mtval_reg_reg;
  reg  [31:0] mip_reg_reg;
  reg  [31:0] mtinst_reg_reg;
  reg  [31:0] mtval2_reg_reg;
  wire        machine_mode_CSR_OH_0 = CSR_addr == 12'hF12;
  wire        machine_mode_CSR_OH_2 = CSR_addr == 12'h302;
  wire        machine_mode_CSR_OH_3 = CSR_addr == 12'h306;
  wire        machine_mode_CSR_OH_4 = CSR_addr == 12'hF11;
  wire        machine_mode_CSR_OH_5 = CSR_addr == 12'h34A;
  wire        machine_mode_CSR_OH_7 = CSR_addr == 12'h310;
  wire        machine_mode_CSR_OH_8 = CSR_addr == 12'h300;
  wire        machine_mode_CSR_OH_9 = CSR_addr == 12'h344;
  wire        machine_mode_CSR_OH_10 = CSR_addr == 12'h303;
  wire        machine_mode_CSR_OH_11 = CSR_addr == 12'hF13;
  wire        machine_mode_CSR_OH_12 = CSR_addr == 12'h340;
  wire        machine_mode_CSR_OH_13 = CSR_addr == 12'h342;
  wire        machine_mode_CSR_OH_16 = CSR_addr == 12'h305;
  wire        machine_mode_CSR_OH_17 = CSR_addr == 12'h34B;
  wire        machine_mode_CSR_OH_18 = CSR_addr == 12'h304;
  wire        machine_mode_CSR_OH_19 = CSR_addr == 12'h301;
  wire        machine_mode_CSR_OH_20 = CSR_addr == 12'hF15;
  wire        machine_mode_CSR_OH_21 = CSR_addr == 12'hF14;
  wire        machine_mode_CSR_OH_22 = CSR_addr == 12'h341;
  wire        machine_mode_CSR_OH_23 = CSR_addr == 12'h343;
  wire [31:0] _machine_mode_CSR_read_resp_WIRE_reg =
    (machine_mode_CSR_OH_0 ? marchid_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_2 ? medeleg_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_3 ? mcounteren_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_4 ? mvendorid_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_5 ? mtinst_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_7 ? mstatush_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_8 ? mstatus_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_9 ? mip_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_10 ? mideleg_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_11 ? mimpid_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_12 ? mscratch_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_13 ? mcause_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_16 ? mtvec_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_17 ? mtval2_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_18 ? mie_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_19 ? misa_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_20 ? mconfigptr_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_21 ? mhartid_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_22 ? mepc_reg_reg : 32'h0)
    | (machine_mode_CSR_OH_23 ? mtval_reg_reg : 32'h0);
  reg  [31:0] CSR_out;
  reg  [31:0] io_FU_output_bits_fetch_PC_REG;
  reg  [1:0]  io_FU_output_bits_fetch_packet_index_REG;
  reg  [6:0]  io_FU_output_bits_PRD_REG;
  reg         io_FU_output_bits_RD_valid_REG;
  reg  [3:0]  io_FU_output_bits_MOB_index_REG;
  reg  [5:0]  io_FU_output_bits_ROB_index_REG;
  always @(posedge clock) begin
    io_FU_output_valid_REG <= input_valid & ~io_flush_valid;
    if (input_CSR_write_request & machine_mode_CSR_OH_4)
      mvendorid_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_0)
      marchid_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_11)
      mimpid_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_21)
      mhartid_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_20)
      mconfigptr_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_8)
      mstatus_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_19)
      misa_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_2)
      medeleg_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_10)
      mideleg_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_18)
      mie_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_16)
      mtvec_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_3)
      mcounteren_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_7)
      mstatush_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_12)
      mscratch_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_22)
      mepc_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_13)
      mcause_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_23)
      mtval_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_9)
      mip_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_5)
      mtinst_reg_reg <= io_FU_input_bits_RS1_data;
    if (input_CSR_write_request & machine_mode_CSR_OH_17)
      mtval2_reg_reg <= io_FU_input_bits_RS1_data;
    if (&input_CSR_privilage)
      CSR_out <= user_mode_CSR_read_resp;
    else if (input_CSR_privilage == 2'h0)
      CSR_out <= _machine_mode_CSR_read_resp_WIRE_reg;
    io_FU_output_bits_fetch_PC_REG <= io_FU_input_bits_fetch_PC;
    io_FU_output_bits_fetch_packet_index_REG <=
      io_FU_input_bits_decoded_instruction_packet_index;
    io_FU_output_bits_PRD_REG <= io_FU_input_bits_decoded_instruction_PRD;
    io_FU_output_bits_RD_valid_REG <= io_FU_input_bits_decoded_instruction_RD_valid;
    io_FU_output_bits_MOB_index_REG <= io_FU_input_bits_decoded_instruction_MOB_index;
    io_FU_output_bits_ROB_index_REG <= io_FU_input_bits_decoded_instruction_ROB_index;
    if (reset) begin
      cycle_reg_reg <= 64'h0;
      time_reg_reg <= 64'h0;
      instret_reg_reg <= 64'h0;
    end
    else begin
      cycle_reg_reg <= cycle_reg_reg + 64'h1;
      time_reg_reg <= time_reg_reg + 64'h1;
      if (io_commit_valid)
        instret_reg_reg <=
          instret_reg_reg
          + {61'h0,
             {1'h0, {1'h0, io_partial_commit_valid_0} + {1'h0, io_partial_commit_valid_1}}
               + {1'h0,
                  {1'h0, io_partial_commit_valid_2} + {1'h0, io_partial_commit_valid_3}}};
    end
  end // always @(posedge)
  assign io_FU_output_valid = io_FU_output_valid_REG & ~io_flush_valid;
  assign io_FU_output_bits_PRD = io_FU_output_bits_PRD_REG;
  assign io_FU_output_bits_RD_data = CSR_out;
  assign io_FU_output_bits_RD_valid = io_FU_output_bits_RD_valid_REG;
  assign io_FU_output_bits_fetch_PC = io_FU_output_bits_fetch_PC_REG;
  assign io_FU_output_bits_MOB_index = io_FU_output_bits_MOB_index_REG;
  assign io_FU_output_bits_ROB_index = io_FU_output_bits_ROB_index_REG;
  assign io_FU_output_bits_fetch_packet_index = io_FU_output_bits_fetch_packet_index_REG;
endmodule

