// Generated by CIRCT firtool-1.76.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS


// Include rmemory initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module SDPReadWriteSmem(	// src/main/scala/memories/memories.scala:83:7
  input         clock,	// src/main/scala/memories/memories.scala:83:7
                reset,	// src/main/scala/memories/memories.scala:83:7
  input  [6:0]  io_rd_addr,	// src/main/scala/memories/memories.scala:84:14
  output [38:0] io_data_out,	// src/main/scala/memories/memories.scala:84:14
  input  [6:0]  io_wr_addr,	// src/main/scala/memories/memories.scala:84:14
  input         io_wr_en,	// src/main/scala/memories/memories.scala:84:14
  input  [38:0] io_data_in	// src/main/scala/memories/memories.scala:84:14
);

  wire [38:0] _mem_ext_R0_data;	// src/main/scala/memories/memories.scala:97:24
  reg         hazard_reg;	// src/main/scala/memories/memories.scala:104:27
  reg  [38:0] din_buff;	// src/main/scala/memories/memories.scala:105:25
  always @(posedge clock) begin	// src/main/scala/memories/memories.scala:83:7
    if (reset) begin	// src/main/scala/memories/memories.scala:83:7
      hazard_reg <= 1'h0;	// src/main/scala/memories/memories.scala:83:7, :104:27
      din_buff <= 39'h0;	// src/main/scala/memories/memories.scala:105:25
    end
    else begin	// src/main/scala/memories/memories.scala:83:7
      hazard_reg <= io_rd_addr == io_wr_addr & io_wr_en;	// src/main/scala/memories/memories.scala:104:27, :107:{29,45}
      din_buff <= io_data_in;	// src/main/scala/memories/memories.scala:105:25
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/memories/memories.scala:83:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/memories/memories.scala:83:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/memories/memories.scala:83:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/memories/memories.scala:83:7
      automatic logic [31:0] _RANDOM[0:1];	// src/main/scala/memories/memories.scala:83:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/memories/memories.scala:83:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/memories/memories.scala:83:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/memories/memories.scala:83:7
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// src/main/scala/memories/memories.scala:83:7
        end	// src/main/scala/memories/memories.scala:83:7
        hazard_reg = _RANDOM[1'h0][0];	// src/main/scala/memories/memories.scala:83:7, :104:27
        din_buff = {_RANDOM[1'h0][31:1], _RANDOM[1'h1][7:0]};	// src/main/scala/memories/memories.scala:83:7, :104:27, :105:25
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/memories/memories.scala:83:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/memories/memories.scala:83:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  mem_128x39 mem_ext (	// src/main/scala/memories/memories.scala:97:24
    .R0_addr (io_rd_addr),
    .R0_en   (1'h1),	// src/main/scala/memories/memories.scala:83:7
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (io_wr_addr),
    .W0_en   (io_wr_en),
    .W0_clk  (clock),
    .W0_data (io_data_in)
  );	// src/main/scala/memories/memories.scala:97:24
  assign io_data_out = hazard_reg ? din_buff : _mem_ext_R0_data;	// src/main/scala/memories/memories.scala:83:7, :97:24, :104:27, :105:25, :125:23
endmodule

