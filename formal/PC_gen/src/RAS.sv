// Generated by CIRCT firtool-1.76.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module RAS(	// src/main/scala/Frontend/BP/RAS.scala:40:7
  input         clock,	// src/main/scala/Frontend/BP/RAS.scala:40:7
                reset,	// src/main/scala/Frontend/BP/RAS.scala:40:7
  input  [31:0] io_wr_addr,	// src/main/scala/Frontend/BP/RAS.scala:49:16
  input         io_wr_valid,	// src/main/scala/Frontend/BP/RAS.scala:49:16
                io_rd_valid,	// src/main/scala/Frontend/BP/RAS.scala:49:16
  input  [6:0]  io_revert_NEXT,	// src/main/scala/Frontend/BP/RAS.scala:49:16
                io_revert_TOS,	// src/main/scala/Frontend/BP/RAS.scala:49:16
  input         io_revert_valid,	// src/main/scala/Frontend/BP/RAS.scala:49:16
  output [31:0] io_ret_addr,	// src/main/scala/Frontend/BP/RAS.scala:49:16
  output [6:0]  io_NEXT,	// src/main/scala/Frontend/BP/RAS.scala:49:16
                io_TOS	// src/main/scala/Frontend/BP/RAS.scala:49:16
);

  wire [6:0]  NOS;	// src/main/scala/Frontend/BP/RAS.scala:124:34
  wire [38:0] _RAS_memory_io_data_out;	// src/main/scala/Frontend/BP/RAS.scala:87:28
  reg  [6:0]  NEXT;	// src/main/scala/Frontend/BP/RAS.scala:83:26
  reg  [6:0]  TOS;	// src/main/scala/Frontend/BP/RAS.scala:84:26
  assign NOS = _RAS_memory_io_data_out[38:32];	// src/main/scala/Frontend/BP/RAS.scala:87:28, :124:34
  always @(posedge clock) begin	// src/main/scala/Frontend/BP/RAS.scala:40:7
    if (reset) begin	// src/main/scala/Frontend/BP/RAS.scala:40:7
      NEXT <= 7'h0;	// src/main/scala/Frontend/BP/RAS.scala:83:26
      TOS <= 7'h0;	// src/main/scala/Frontend/BP/RAS.scala:84:26
    end
    else if (io_revert_valid) begin	// src/main/scala/Frontend/BP/RAS.scala:49:16
      NEXT <= io_revert_NEXT;	// src/main/scala/Frontend/BP/RAS.scala:83:26
      TOS <= io_revert_TOS;	// src/main/scala/Frontend/BP/RAS.scala:84:26
    end
    else if (io_wr_valid) begin	// src/main/scala/Frontend/BP/RAS.scala:49:16
      NEXT <= NEXT + 7'h1;	// src/main/scala/Frontend/BP/RAS.scala:83:26, :131:22
      TOS <= NEXT;	// src/main/scala/Frontend/BP/RAS.scala:83:26, :84:26
    end
    else if (io_rd_valid)	// src/main/scala/Frontend/BP/RAS.scala:49:16
      TOS <= NOS;	// src/main/scala/Frontend/BP/RAS.scala:84:26, :124:34
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/Frontend/BP/RAS.scala:40:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/Frontend/BP/RAS.scala:40:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/Frontend/BP/RAS.scala:40:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/Frontend/BP/RAS.scala:40:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/Frontend/BP/RAS.scala:40:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/Frontend/BP/RAS.scala:40:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/Frontend/BP/RAS.scala:40:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/Frontend/BP/RAS.scala:40:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/Frontend/BP/RAS.scala:40:7
        NEXT = _RANDOM[/*Zero width*/ 1'b0][6:0];	// src/main/scala/Frontend/BP/RAS.scala:40:7, :83:26
        TOS = _RANDOM[/*Zero width*/ 1'b0][13:7];	// src/main/scala/Frontend/BP/RAS.scala:40:7, :83:26, :84:26
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/Frontend/BP/RAS.scala:40:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/Frontend/BP/RAS.scala:40:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  SDPReadWriteSmem RAS_memory (	// src/main/scala/Frontend/BP/RAS.scala:87:28
    .clock       (clock),
    .reset       (reset),
    .io_rd_addr
      (io_wr_valid ? NEXT : io_rd_valid ? NOS : io_revert_valid ? io_revert_TOS : TOS),	// src/main/scala/Frontend/BP/RAS.scala:83:26, :84:26, :106:22, :107:31, :108:28, :109:31, :110:32, :111:31, :113:31, :124:34
    .io_data_out (_RAS_memory_io_data_out),
    .io_wr_addr  (NEXT),	// src/main/scala/Frontend/BP/RAS.scala:83:26
    .io_wr_en    (io_wr_valid),
    .io_data_in  ({TOS, io_wr_addr})	// src/main/scala/Frontend/BP/RAS.scala:84:26, :120:33
  );	// src/main/scala/Frontend/BP/RAS.scala:87:28
  assign io_ret_addr = _RAS_memory_io_data_out[31:0];	// src/main/scala/Frontend/BP/RAS.scala:40:7, :87:28, :116:42
  assign io_NEXT = NEXT;	// src/main/scala/Frontend/BP/RAS.scala:40:7, :83:26
  assign io_TOS = TOS;	// src/main/scala/Frontend/BP/RAS.scala:40:7, :84:26
endmodule

