// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module Arbiter2_AXI_request_Q_entry(
  output         io_in_0_ready,
  input          io_in_0_valid,
                 io_in_0_bits_write_valid,
  input  [31:0]  io_in_0_bits_write_address,
  input  [255:0] io_in_0_bits_write_data,
  input  [7:0]   io_in_0_bits_write_ID,
  input  [6:0]   io_in_0_bits_write_bytes,
  input          io_in_0_bits_read_valid,
  input  [31:0]  io_in_0_bits_read_address,
  input  [7:0]   io_in_0_bits_read_ID,
  input  [6:0]   io_in_0_bits_read_bytes,
  output         io_in_1_ready,
  input          io_in_1_valid,
                 io_in_1_bits_write_valid,
  input  [31:0]  io_in_1_bits_write_address,
  input  [255:0] io_in_1_bits_write_data,
  input  [7:0]   io_in_1_bits_write_ID,
  input  [6:0]   io_in_1_bits_write_bytes,
  input          io_in_1_bits_read_valid,
  input  [31:0]  io_in_1_bits_read_address,
  input  [7:0]   io_in_1_bits_read_ID,
  input  [6:0]   io_in_1_bits_read_bytes,
  input          io_out_ready,
  output         io_out_valid,
                 io_out_bits_write_valid,
  output [31:0]  io_out_bits_write_address,
  output [255:0] io_out_bits_write_data,
  output [7:0]   io_out_bits_write_ID,
  output [6:0]   io_out_bits_write_bytes,
  output         io_out_bits_read_valid,
  output [31:0]  io_out_bits_read_address,
  output [7:0]   io_out_bits_read_ID,
  output [6:0]   io_out_bits_read_bytes
);

  assign io_in_0_ready = io_out_ready;
  assign io_in_1_ready = ~io_in_0_valid & io_out_ready;
  assign io_out_valid = io_in_0_valid | io_in_1_valid;
  assign io_out_bits_write_valid =
    io_in_0_valid ? io_in_0_bits_write_valid : io_in_1_bits_write_valid;
  assign io_out_bits_write_address =
    io_in_0_valid ? io_in_0_bits_write_address : io_in_1_bits_write_address;
  assign io_out_bits_write_data =
    io_in_0_valid ? io_in_0_bits_write_data : io_in_1_bits_write_data;
  assign io_out_bits_write_ID =
    io_in_0_valid ? io_in_0_bits_write_ID : io_in_1_bits_write_ID;
  assign io_out_bits_write_bytes =
    io_in_0_valid ? io_in_0_bits_write_bytes : io_in_1_bits_write_bytes;
  assign io_out_bits_read_valid =
    io_in_0_valid ? io_in_0_bits_read_valid : io_in_1_bits_read_valid;
  assign io_out_bits_read_address =
    io_in_0_valid ? io_in_0_bits_read_address : io_in_1_bits_read_address;
  assign io_out_bits_read_ID =
    io_in_0_valid ? io_in_0_bits_read_ID : io_in_1_bits_read_ID;
  assign io_out_bits_read_bytes =
    io_in_0_valid ? io_in_0_bits_read_bytes : io_in_1_bits_read_bytes;
endmodule

